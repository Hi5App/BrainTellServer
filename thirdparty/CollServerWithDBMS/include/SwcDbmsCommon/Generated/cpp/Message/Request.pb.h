// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message/Request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Message/Message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2fRequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2fRequest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2fRequest_2eproto;
namespace proto {
class BackupFullDatabaseRequest;
struct BackupFullDatabaseRequestDefaultTypeInternal;
extern BackupFullDatabaseRequestDefaultTypeInternal _BackupFullDatabaseRequest_default_instance_;
class ChangeUserPermissionGroupRequest;
struct ChangeUserPermissionGroupRequestDefaultTypeInternal;
extern ChangeUserPermissionGroupRequestDefaultTypeInternal _ChangeUserPermissionGroupRequest_default_instance_;
class CreateDailyStatisticsRequest;
struct CreateDailyStatisticsRequestDefaultTypeInternal;
extern CreateDailyStatisticsRequestDefaultTypeInternal _CreateDailyStatisticsRequest_default_instance_;
class CreateProjectRequest;
struct CreateProjectRequestDefaultTypeInternal;
extern CreateProjectRequestDefaultTypeInternal _CreateProjectRequest_default_instance_;
class CreateSwcAttachmentAnoRequest;
struct CreateSwcAttachmentAnoRequestDefaultTypeInternal;
extern CreateSwcAttachmentAnoRequestDefaultTypeInternal _CreateSwcAttachmentAnoRequest_default_instance_;
class CreateSwcAttachmentApoRequest;
struct CreateSwcAttachmentApoRequestDefaultTypeInternal;
extern CreateSwcAttachmentApoRequestDefaultTypeInternal _CreateSwcAttachmentApoRequest_default_instance_;
class CreateSwcNodeDataRequest;
struct CreateSwcNodeDataRequestDefaultTypeInternal;
extern CreateSwcNodeDataRequestDefaultTypeInternal _CreateSwcNodeDataRequest_default_instance_;
class CreateSwcRequest;
struct CreateSwcRequestDefaultTypeInternal;
extern CreateSwcRequestDefaultTypeInternal _CreateSwcRequest_default_instance_;
class CreateSwcSnapshotRequest;
struct CreateSwcSnapshotRequestDefaultTypeInternal;
extern CreateSwcSnapshotRequestDefaultTypeInternal _CreateSwcSnapshotRequest_default_instance_;
class CreateUserRequest;
struct CreateUserRequestDefaultTypeInternal;
extern CreateUserRequestDefaultTypeInternal _CreateUserRequest_default_instance_;
class DeleteDailyStatisticsRequest;
struct DeleteDailyStatisticsRequestDefaultTypeInternal;
extern DeleteDailyStatisticsRequestDefaultTypeInternal _DeleteDailyStatisticsRequest_default_instance_;
class DeleteProjectRequest;
struct DeleteProjectRequestDefaultTypeInternal;
extern DeleteProjectRequestDefaultTypeInternal _DeleteProjectRequest_default_instance_;
class DeleteSwcAttachmentAnoRequest;
struct DeleteSwcAttachmentAnoRequestDefaultTypeInternal;
extern DeleteSwcAttachmentAnoRequestDefaultTypeInternal _DeleteSwcAttachmentAnoRequest_default_instance_;
class DeleteSwcAttachmentApoRequest;
struct DeleteSwcAttachmentApoRequestDefaultTypeInternal;
extern DeleteSwcAttachmentApoRequestDefaultTypeInternal _DeleteSwcAttachmentApoRequest_default_instance_;
class DeleteSwcNodeDataRequest;
struct DeleteSwcNodeDataRequestDefaultTypeInternal;
extern DeleteSwcNodeDataRequestDefaultTypeInternal _DeleteSwcNodeDataRequest_default_instance_;
class DeleteSwcRequest;
struct DeleteSwcRequestDefaultTypeInternal;
extern DeleteSwcRequestDefaultTypeInternal _DeleteSwcRequest_default_instance_;
class DeleteUserRequest;
struct DeleteUserRequestDefaultTypeInternal;
extern DeleteUserRequestDefaultTypeInternal _DeleteUserRequest_default_instance_;
class GetAllDailyStatisticsRequest;
struct GetAllDailyStatisticsRequestDefaultTypeInternal;
extern GetAllDailyStatisticsRequestDefaultTypeInternal _GetAllDailyStatisticsRequest_default_instance_;
class GetAllIncrementOperationMetaInfoRequest;
struct GetAllIncrementOperationMetaInfoRequestDefaultTypeInternal;
extern GetAllIncrementOperationMetaInfoRequestDefaultTypeInternal _GetAllIncrementOperationMetaInfoRequest_default_instance_;
class GetAllPermissionGroupRequest;
struct GetAllPermissionGroupRequestDefaultTypeInternal;
extern GetAllPermissionGroupRequestDefaultTypeInternal _GetAllPermissionGroupRequest_default_instance_;
class GetAllProjectRequest;
struct GetAllProjectRequestDefaultTypeInternal;
extern GetAllProjectRequestDefaultTypeInternal _GetAllProjectRequest_default_instance_;
class GetAllSnapshotMetaInfoRequest;
struct GetAllSnapshotMetaInfoRequestDefaultTypeInternal;
extern GetAllSnapshotMetaInfoRequestDefaultTypeInternal _GetAllSnapshotMetaInfoRequest_default_instance_;
class GetAllSwcMetaInfoRequest;
struct GetAllSwcMetaInfoRequestDefaultTypeInternal;
extern GetAllSwcMetaInfoRequestDefaultTypeInternal _GetAllSwcMetaInfoRequest_default_instance_;
class GetAllUserRequest;
struct GetAllUserRequestDefaultTypeInternal;
extern GetAllUserRequestDefaultTypeInternal _GetAllUserRequest_default_instance_;
class GetDailyStatisticsRequest;
struct GetDailyStatisticsRequestDefaultTypeInternal;
extern GetDailyStatisticsRequestDefaultTypeInternal _GetDailyStatisticsRequest_default_instance_;
class GetIncrementOperationRequest;
struct GetIncrementOperationRequestDefaultTypeInternal;
extern GetIncrementOperationRequestDefaultTypeInternal _GetIncrementOperationRequest_default_instance_;
class GetPermissionGroupRequest;
struct GetPermissionGroupRequestDefaultTypeInternal;
extern GetPermissionGroupRequestDefaultTypeInternal _GetPermissionGroupRequest_default_instance_;
class GetProjectRequest;
struct GetProjectRequestDefaultTypeInternal;
extern GetProjectRequestDefaultTypeInternal _GetProjectRequest_default_instance_;
class GetSnapshotRequest;
struct GetSnapshotRequestDefaultTypeInternal;
extern GetSnapshotRequestDefaultTypeInternal _GetSnapshotRequest_default_instance_;
class GetSwcAttachmentAnoRequest;
struct GetSwcAttachmentAnoRequestDefaultTypeInternal;
extern GetSwcAttachmentAnoRequestDefaultTypeInternal _GetSwcAttachmentAnoRequest_default_instance_;
class GetSwcAttachmentApoRequest;
struct GetSwcAttachmentApoRequestDefaultTypeInternal;
extern GetSwcAttachmentApoRequestDefaultTypeInternal _GetSwcAttachmentApoRequest_default_instance_;
class GetSwcFullNodeDataRequest;
struct GetSwcFullNodeDataRequestDefaultTypeInternal;
extern GetSwcFullNodeDataRequestDefaultTypeInternal _GetSwcFullNodeDataRequest_default_instance_;
class GetSwcMetaInfoRequest;
struct GetSwcMetaInfoRequestDefaultTypeInternal;
extern GetSwcMetaInfoRequestDefaultTypeInternal _GetSwcMetaInfoRequest_default_instance_;
class GetSwcNodeDataListByTimeAndUserRequest;
struct GetSwcNodeDataListByTimeAndUserRequestDefaultTypeInternal;
extern GetSwcNodeDataListByTimeAndUserRequestDefaultTypeInternal _GetSwcNodeDataListByTimeAndUserRequest_default_instance_;
class GetSwcNodeDataRequest;
struct GetSwcNodeDataRequestDefaultTypeInternal;
extern GetSwcNodeDataRequestDefaultTypeInternal _GetSwcNodeDataRequest_default_instance_;
class GetUserPermissionGroupRequest;
struct GetUserPermissionGroupRequestDefaultTypeInternal;
extern GetUserPermissionGroupRequestDefaultTypeInternal _GetUserPermissionGroupRequest_default_instance_;
class GetUserRequest;
struct GetUserRequestDefaultTypeInternal;
extern GetUserRequestDefaultTypeInternal _GetUserRequest_default_instance_;
class RevertSwcVersionRequest;
struct RevertSwcVersionRequestDefaultTypeInternal;
extern RevertSwcVersionRequestDefaultTypeInternal _RevertSwcVersionRequest_default_instance_;
class UpdateDailyStatisticsRequest;
struct UpdateDailyStatisticsRequestDefaultTypeInternal;
extern UpdateDailyStatisticsRequestDefaultTypeInternal _UpdateDailyStatisticsRequest_default_instance_;
class UpdateProjectRequest;
struct UpdateProjectRequestDefaultTypeInternal;
extern UpdateProjectRequestDefaultTypeInternal _UpdateProjectRequest_default_instance_;
class UpdateSwcAttachmentAnoRequest;
struct UpdateSwcAttachmentAnoRequestDefaultTypeInternal;
extern UpdateSwcAttachmentAnoRequestDefaultTypeInternal _UpdateSwcAttachmentAnoRequest_default_instance_;
class UpdateSwcAttachmentApoRequest;
struct UpdateSwcAttachmentApoRequestDefaultTypeInternal;
extern UpdateSwcAttachmentApoRequestDefaultTypeInternal _UpdateSwcAttachmentApoRequest_default_instance_;
class UpdateSwcNodeDataRequest;
struct UpdateSwcNodeDataRequestDefaultTypeInternal;
extern UpdateSwcNodeDataRequestDefaultTypeInternal _UpdateSwcNodeDataRequest_default_instance_;
class UpdateSwcRequest;
struct UpdateSwcRequestDefaultTypeInternal;
extern UpdateSwcRequestDefaultTypeInternal _UpdateSwcRequest_default_instance_;
class UpdateUserRequest;
struct UpdateUserRequestDefaultTypeInternal;
extern UpdateUserRequestDefaultTypeInternal _UpdateUserRequest_default_instance_;
class UserLoginRequest;
struct UserLoginRequestDefaultTypeInternal;
extern UserLoginRequestDefaultTypeInternal _UserLoginRequest_default_instance_;
class UserLogoutRequest;
struct UserLogoutRequestDefaultTypeInternal;
extern UserLogoutRequestDefaultTypeInternal _UserLogoutRequest_default_instance_;
class UserOnlineHeartBeatNotification;
struct UserOnlineHeartBeatNotificationDefaultTypeInternal;
extern UserOnlineHeartBeatNotificationDefaultTypeInternal _UserOnlineHeartBeatNotification_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::BackupFullDatabaseRequest* Arena::CreateMaybeMessage<::proto::BackupFullDatabaseRequest>(Arena*);
template<> ::proto::ChangeUserPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::ChangeUserPermissionGroupRequest>(Arena*);
template<> ::proto::CreateDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::CreateDailyStatisticsRequest>(Arena*);
template<> ::proto::CreateProjectRequest* Arena::CreateMaybeMessage<::proto::CreateProjectRequest>(Arena*);
template<> ::proto::CreateSwcAttachmentAnoRequest* Arena::CreateMaybeMessage<::proto::CreateSwcAttachmentAnoRequest>(Arena*);
template<> ::proto::CreateSwcAttachmentApoRequest* Arena::CreateMaybeMessage<::proto::CreateSwcAttachmentApoRequest>(Arena*);
template<> ::proto::CreateSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::CreateSwcNodeDataRequest>(Arena*);
template<> ::proto::CreateSwcRequest* Arena::CreateMaybeMessage<::proto::CreateSwcRequest>(Arena*);
template<> ::proto::CreateSwcSnapshotRequest* Arena::CreateMaybeMessage<::proto::CreateSwcSnapshotRequest>(Arena*);
template<> ::proto::CreateUserRequest* Arena::CreateMaybeMessage<::proto::CreateUserRequest>(Arena*);
template<> ::proto::DeleteDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::DeleteDailyStatisticsRequest>(Arena*);
template<> ::proto::DeleteProjectRequest* Arena::CreateMaybeMessage<::proto::DeleteProjectRequest>(Arena*);
template<> ::proto::DeleteSwcAttachmentAnoRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcAttachmentAnoRequest>(Arena*);
template<> ::proto::DeleteSwcAttachmentApoRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcAttachmentApoRequest>(Arena*);
template<> ::proto::DeleteSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcNodeDataRequest>(Arena*);
template<> ::proto::DeleteSwcRequest* Arena::CreateMaybeMessage<::proto::DeleteSwcRequest>(Arena*);
template<> ::proto::DeleteUserRequest* Arena::CreateMaybeMessage<::proto::DeleteUserRequest>(Arena*);
template<> ::proto::GetAllDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::GetAllDailyStatisticsRequest>(Arena*);
template<> ::proto::GetAllIncrementOperationMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetAllIncrementOperationMetaInfoRequest>(Arena*);
template<> ::proto::GetAllPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetAllPermissionGroupRequest>(Arena*);
template<> ::proto::GetAllProjectRequest* Arena::CreateMaybeMessage<::proto::GetAllProjectRequest>(Arena*);
template<> ::proto::GetAllSnapshotMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetAllSnapshotMetaInfoRequest>(Arena*);
template<> ::proto::GetAllSwcMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetAllSwcMetaInfoRequest>(Arena*);
template<> ::proto::GetAllUserRequest* Arena::CreateMaybeMessage<::proto::GetAllUserRequest>(Arena*);
template<> ::proto::GetDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::GetDailyStatisticsRequest>(Arena*);
template<> ::proto::GetIncrementOperationRequest* Arena::CreateMaybeMessage<::proto::GetIncrementOperationRequest>(Arena*);
template<> ::proto::GetPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetPermissionGroupRequest>(Arena*);
template<> ::proto::GetProjectRequest* Arena::CreateMaybeMessage<::proto::GetProjectRequest>(Arena*);
template<> ::proto::GetSnapshotRequest* Arena::CreateMaybeMessage<::proto::GetSnapshotRequest>(Arena*);
template<> ::proto::GetSwcAttachmentAnoRequest* Arena::CreateMaybeMessage<::proto::GetSwcAttachmentAnoRequest>(Arena*);
template<> ::proto::GetSwcAttachmentApoRequest* Arena::CreateMaybeMessage<::proto::GetSwcAttachmentApoRequest>(Arena*);
template<> ::proto::GetSwcFullNodeDataRequest* Arena::CreateMaybeMessage<::proto::GetSwcFullNodeDataRequest>(Arena*);
template<> ::proto::GetSwcMetaInfoRequest* Arena::CreateMaybeMessage<::proto::GetSwcMetaInfoRequest>(Arena*);
template<> ::proto::GetSwcNodeDataListByTimeAndUserRequest* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataListByTimeAndUserRequest>(Arena*);
template<> ::proto::GetSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataRequest>(Arena*);
template<> ::proto::GetUserPermissionGroupRequest* Arena::CreateMaybeMessage<::proto::GetUserPermissionGroupRequest>(Arena*);
template<> ::proto::GetUserRequest* Arena::CreateMaybeMessage<::proto::GetUserRequest>(Arena*);
template<> ::proto::RevertSwcVersionRequest* Arena::CreateMaybeMessage<::proto::RevertSwcVersionRequest>(Arena*);
template<> ::proto::UpdateDailyStatisticsRequest* Arena::CreateMaybeMessage<::proto::UpdateDailyStatisticsRequest>(Arena*);
template<> ::proto::UpdateProjectRequest* Arena::CreateMaybeMessage<::proto::UpdateProjectRequest>(Arena*);
template<> ::proto::UpdateSwcAttachmentAnoRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcAttachmentAnoRequest>(Arena*);
template<> ::proto::UpdateSwcAttachmentApoRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcAttachmentApoRequest>(Arena*);
template<> ::proto::UpdateSwcNodeDataRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcNodeDataRequest>(Arena*);
template<> ::proto::UpdateSwcRequest* Arena::CreateMaybeMessage<::proto::UpdateSwcRequest>(Arena*);
template<> ::proto::UpdateUserRequest* Arena::CreateMaybeMessage<::proto::UpdateUserRequest>(Arena*);
template<> ::proto::UserLoginRequest* Arena::CreateMaybeMessage<::proto::UserLoginRequest>(Arena*);
template<> ::proto::UserLogoutRequest* Arena::CreateMaybeMessage<::proto::UserLogoutRequest>(Arena*);
template<> ::proto::UserOnlineHeartBeatNotification* Arena::CreateMaybeMessage<::proto::UserOnlineHeartBeatNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CreateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateUserRequest) */ {
 public:
  inline CreateUserRequest() : CreateUserRequest(nullptr) {}
  ~CreateUserRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRequest(const CreateUserRequest& from);
  CreateUserRequest(CreateUserRequest&& from) noexcept
    : CreateUserRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRequest& operator=(const CreateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRequest& operator=(CreateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRequest*>(
               &_CreateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUserRequest& a, CreateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUserRequest& from) {
    CreateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateUserRequest";
  }
  protected:
  explicit CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserMetaInfoV1 UserInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteUserRequest) */ {
 public:
  inline DeleteUserRequest() : DeleteUserRequest(nullptr) {}
  ~DeleteUserRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRequest(const DeleteUserRequest& from);
  DeleteUserRequest(DeleteUserRequest&& from) noexcept
    : DeleteUserRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRequest& operator=(const DeleteUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRequest& operator=(DeleteUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRequest*>(
               &_DeleteUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteUserRequest& a, DeleteUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteUserRequest& from) {
    DeleteUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteUserRequest";
  }
  protected:
  explicit DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string UserName = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateUserRequest) */ {
 public:
  inline UpdateUserRequest() : UpdateUserRequest(nullptr) {}
  ~UpdateUserRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserRequest(const UpdateUserRequest& from);
  UpdateUserRequest(UpdateUserRequest&& from) noexcept
    : UpdateUserRequest() {
    *this = ::std::move(from);
  }

  inline UpdateUserRequest& operator=(const UpdateUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserRequest& operator=(UpdateUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUserRequest*>(
               &_UpdateUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateUserRequest& a, UpdateUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateUserRequest& from) {
    UpdateUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateUserRequest";
  }
  protected:
  explicit UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kUserInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.UserMetaInfoV1 UserInfo = 3;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserRequest) */ {
 public:
  inline GetUserRequest() : GetUserRequest(nullptr) {}
  ~GetUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserRequest(const GetUserRequest& from);
  GetUserRequest(GetUserRequest&& from) noexcept
    : GetUserRequest() {
    *this = ::std::move(from);
  }

  inline GetUserRequest& operator=(const GetUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserRequest& operator=(GetUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserRequest*>(
               &_GetUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserRequest& a, GetUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserRequest& from) {
    GetUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserRequest";
  }
  protected:
  explicit GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string UserName = 3;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllUserRequest) */ {
 public:
  inline GetAllUserRequest() : GetAllUserRequest(nullptr) {}
  ~GetAllUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllUserRequest(const GetAllUserRequest& from);
  GetAllUserRequest(GetAllUserRequest&& from) noexcept
    : GetAllUserRequest() {
    *this = ::std::move(from);
  }

  inline GetAllUserRequest& operator=(const GetAllUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllUserRequest& operator=(GetAllUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllUserRequest*>(
               &_GetAllUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAllUserRequest& a, GetAllUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllUserRequest& from) {
    GetAllUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllUserRequest";
  }
  protected:
  explicit GetAllUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserLoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLoginRequest) */ {
 public:
  inline UserLoginRequest() : UserLoginRequest(nullptr) {}
  ~UserLoginRequest() override;
  explicit PROTOBUF_CONSTEXPR UserLoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginRequest(const UserLoginRequest& from);
  UserLoginRequest(UserLoginRequest&& from) noexcept
    : UserLoginRequest() {
    *this = ::std::move(from);
  }

  inline UserLoginRequest& operator=(const UserLoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginRequest& operator=(UserLoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoginRequest*>(
               &_UserLoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserLoginRequest& a, UserLoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginRequest& from) {
    UserLoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLoginRequest";
  }
  protected:
  explicit UserLoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
  };
  // string UserName = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string Password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.UserLoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::proto::RequestMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserLogoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLogoutRequest) */ {
 public:
  inline UserLogoutRequest() : UserLogoutRequest(nullptr) {}
  ~UserLogoutRequest() override;
  explicit PROTOBUF_CONSTEXPR UserLogoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogoutRequest(const UserLogoutRequest& from);
  UserLogoutRequest(UserLogoutRequest&& from) noexcept
    : UserLogoutRequest() {
    *this = ::std::move(from);
  }

  inline UserLogoutRequest& operator=(const UserLogoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogoutRequest& operator=(UserLogoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogoutRequest* internal_default_instance() {
    return reinterpret_cast<const UserLogoutRequest*>(
               &_UserLogoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserLogoutRequest& a, UserLogoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogoutRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogoutRequest& from) {
    UserLogoutRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogoutRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLogoutRequest";
  }
  protected:
  explicit UserLogoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.UserLogoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UserOnlineHeartBeatNotification final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserOnlineHeartBeatNotification) */ {
 public:
  inline UserOnlineHeartBeatNotification() : UserOnlineHeartBeatNotification(nullptr) {}
  ~UserOnlineHeartBeatNotification() override;
  explicit PROTOBUF_CONSTEXPR UserOnlineHeartBeatNotification(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOnlineHeartBeatNotification(const UserOnlineHeartBeatNotification& from);
  UserOnlineHeartBeatNotification(UserOnlineHeartBeatNotification&& from) noexcept
    : UserOnlineHeartBeatNotification() {
    *this = ::std::move(from);
  }

  inline UserOnlineHeartBeatNotification& operator=(const UserOnlineHeartBeatNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOnlineHeartBeatNotification& operator=(UserOnlineHeartBeatNotification&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOnlineHeartBeatNotification& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOnlineHeartBeatNotification* internal_default_instance() {
    return reinterpret_cast<const UserOnlineHeartBeatNotification*>(
               &_UserOnlineHeartBeatNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserOnlineHeartBeatNotification& a, UserOnlineHeartBeatNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOnlineHeartBeatNotification* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOnlineHeartBeatNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOnlineHeartBeatNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOnlineHeartBeatNotification>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserOnlineHeartBeatNotification& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserOnlineHeartBeatNotification& from) {
    UserOnlineHeartBeatNotification::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOnlineHeartBeatNotification* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserOnlineHeartBeatNotification";
  }
  protected:
  explicit UserOnlineHeartBeatNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kHeartBeatTimeFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // int64 HeartBeatTime = 3;
  void clear_heartbeattime();
  int64_t heartbeattime() const;
  void set_heartbeattime(int64_t value);
  private:
  int64_t _internal_heartbeattime() const;
  void _internal_set_heartbeattime(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:proto.UserOnlineHeartBeatNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    int64_t heartbeattime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetUserPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserPermissionGroupRequest) */ {
 public:
  inline GetUserPermissionGroupRequest() : GetUserPermissionGroupRequest(nullptr) {}
  ~GetUserPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserPermissionGroupRequest(const GetUserPermissionGroupRequest& from);
  GetUserPermissionGroupRequest(GetUserPermissionGroupRequest&& from) noexcept
    : GetUserPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetUserPermissionGroupRequest& operator=(const GetUserPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserPermissionGroupRequest& operator=(GetUserPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetUserPermissionGroupRequest*>(
               &_GetUserPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetUserPermissionGroupRequest& a, GetUserPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserPermissionGroupRequest& from) {
    GetUserPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserPermissionGroupRequest";
  }
  protected:
  explicit GetUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetUserPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetPermissionGroupRequest) */ {
 public:
  inline GetPermissionGroupRequest() : GetPermissionGroupRequest(nullptr) {}
  ~GetPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPermissionGroupRequest(const GetPermissionGroupRequest& from);
  GetPermissionGroupRequest(GetPermissionGroupRequest&& from) noexcept
    : GetPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetPermissionGroupRequest& operator=(const GetPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionGroupRequest& operator=(GetPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetPermissionGroupRequest*>(
               &_GetPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPermissionGroupRequest& a, GetPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPermissionGroupRequest& from) {
    GetPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetPermissionGroupRequest";
  }
  protected:
  explicit GetPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kPermissionGroupFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.PermissionGroupMetaInfoV1 PermissionGroup = 3;
  bool has_permissiongroup() const;
  private:
  bool _internal_has_permissiongroup() const;
  public:
  void clear_permissiongroup();
  const ::proto::PermissionGroupMetaInfoV1& permissiongroup() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupMetaInfoV1* release_permissiongroup();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongroup();
  void set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup);
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongroup() const;
  ::proto::PermissionGroupMetaInfoV1* _internal_mutable_permissiongroup();
  public:
  void unsafe_arena_set_allocated_permissiongroup(
      ::proto::PermissionGroupMetaInfoV1* permissiongroup);
  ::proto::PermissionGroupMetaInfoV1* unsafe_arena_release_permissiongroup();

  // @@protoc_insertion_point(class_scope:proto.GetPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::PermissionGroupMetaInfoV1* permissiongroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllPermissionGroupRequest) */ {
 public:
  inline GetAllPermissionGroupRequest() : GetAllPermissionGroupRequest(nullptr) {}
  ~GetAllPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllPermissionGroupRequest(const GetAllPermissionGroupRequest& from);
  GetAllPermissionGroupRequest(GetAllPermissionGroupRequest&& from) noexcept
    : GetAllPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetAllPermissionGroupRequest& operator=(const GetAllPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPermissionGroupRequest& operator=(GetAllPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllPermissionGroupRequest*>(
               &_GetAllPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAllPermissionGroupRequest& a, GetAllPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllPermissionGroupRequest& from) {
    GetAllPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllPermissionGroupRequest";
  }
  protected:
  explicit GetAllPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class ChangeUserPermissionGroupRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ChangeUserPermissionGroupRequest) */ {
 public:
  inline ChangeUserPermissionGroupRequest() : ChangeUserPermissionGroupRequest(nullptr) {}
  ~ChangeUserPermissionGroupRequest() override;
  explicit PROTOBUF_CONSTEXPR ChangeUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeUserPermissionGroupRequest(const ChangeUserPermissionGroupRequest& from);
  ChangeUserPermissionGroupRequest(ChangeUserPermissionGroupRequest&& from) noexcept
    : ChangeUserPermissionGroupRequest() {
    *this = ::std::move(from);
  }

  inline ChangeUserPermissionGroupRequest& operator=(const ChangeUserPermissionGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeUserPermissionGroupRequest& operator=(ChangeUserPermissionGroupRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeUserPermissionGroupRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeUserPermissionGroupRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeUserPermissionGroupRequest*>(
               &_ChangeUserPermissionGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChangeUserPermissionGroupRequest& a, ChangeUserPermissionGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeUserPermissionGroupRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeUserPermissionGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeUserPermissionGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeUserPermissionGroupRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeUserPermissionGroupRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeUserPermissionGroupRequest& from) {
    ChangeUserPermissionGroupRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeUserPermissionGroupRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ChangeUserPermissionGroupRequest";
  }
  protected:
  explicit ChangeUserPermissionGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetUserNameFieldNumber = 3,
    kPermissionGroupNameFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string TargetUserName = 3;
  void clear_targetusername();
  const std::string& targetusername() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_targetusername(ArgT0&& arg0, ArgT... args);
  std::string* mutable_targetusername();
  PROTOBUF_NODISCARD std::string* release_targetusername();
  void set_allocated_targetusername(std::string* targetusername);
  private:
  const std::string& _internal_targetusername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_targetusername(const std::string& value);
  std::string* _internal_mutable_targetusername();
  public:

  // string PermissionGroupName = 4;
  void clear_permissiongroupname();
  const std::string& permissiongroupname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_permissiongroupname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_permissiongroupname();
  PROTOBUF_NODISCARD std::string* release_permissiongroupname();
  void set_allocated_permissiongroupname(std::string* permissiongroupname);
  private:
  const std::string& _internal_permissiongroupname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_permissiongroupname(const std::string& value);
  std::string* _internal_mutable_permissiongroupname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.ChangeUserPermissionGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr targetusername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr permissiongroupname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateProjectRequest) */ {
 public:
  inline CreateProjectRequest() : CreateProjectRequest(nullptr) {}
  ~CreateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRequest(const CreateProjectRequest& from);
  CreateProjectRequest(CreateProjectRequest&& from) noexcept
    : CreateProjectRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRequest& operator=(const CreateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRequest& operator=(CreateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRequest*>(
               &_CreateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateProjectRequest& a, CreateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProjectRequest& from) {
    CreateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateProjectRequest";
  }
  protected:
  explicit CreateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kProjectInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 3;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteProjectRequest) */ {
 public:
  inline DeleteProjectRequest() : DeleteProjectRequest(nullptr) {}
  ~DeleteProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRequest(const DeleteProjectRequest& from);
  DeleteProjectRequest(DeleteProjectRequest&& from) noexcept
    : DeleteProjectRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRequest& operator=(const DeleteProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRequest& operator=(DeleteProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRequest*>(
               &_DeleteProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteProjectRequest& a, DeleteProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteProjectRequest& from) {
    DeleteProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteProjectRequest";
  }
  protected:
  explicit DeleteProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string ProjectName = 3;
  void clear_projectname();
  const std::string& projectname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectname();
  PROTOBUF_NODISCARD std::string* release_projectname();
  void set_allocated_projectname(std::string* projectname);
  private:
  const std::string& _internal_projectname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectname(const std::string& value);
  std::string* _internal_mutable_projectname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateProjectRequest) */ {
 public:
  inline UpdateProjectRequest() : UpdateProjectRequest(nullptr) {}
  ~UpdateProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRequest(const UpdateProjectRequest& from);
  UpdateProjectRequest(UpdateProjectRequest&& from) noexcept
    : UpdateProjectRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRequest& operator=(const UpdateProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRequest& operator=(UpdateProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRequest*>(
               &_UpdateProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateProjectRequest& a, UpdateProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateProjectRequest& from) {
    UpdateProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateProjectRequest";
  }
  protected:
  explicit UpdateProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kProjectInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 3;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetProjectRequest) */ {
 public:
  inline GetProjectRequest() : GetProjectRequest(nullptr) {}
  ~GetProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProjectRequest(const GetProjectRequest& from);
  GetProjectRequest(GetProjectRequest&& from) noexcept
    : GetProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetProjectRequest& operator=(const GetProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectRequest& operator=(GetProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetProjectRequest*>(
               &_GetProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetProjectRequest& a, GetProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetProjectRequest& from) {
    GetProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetProjectRequest";
  }
  protected:
  explicit GetProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string ProjectName = 3;
  void clear_projectname();
  const std::string& projectname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_projectname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_projectname();
  PROTOBUF_NODISCARD std::string* release_projectname();
  void set_allocated_projectname(std::string* projectname);
  private:
  const std::string& _internal_projectname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_projectname(const std::string& value);
  std::string* _internal_mutable_projectname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr projectname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllProjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllProjectRequest) */ {
 public:
  inline GetAllProjectRequest() : GetAllProjectRequest(nullptr) {}
  ~GetAllProjectRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllProjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllProjectRequest(const GetAllProjectRequest& from);
  GetAllProjectRequest(GetAllProjectRequest&& from) noexcept
    : GetAllProjectRequest() {
    *this = ::std::move(from);
  }

  inline GetAllProjectRequest& operator=(const GetAllProjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllProjectRequest& operator=(GetAllProjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllProjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllProjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllProjectRequest*>(
               &_GetAllProjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAllProjectRequest& a, GetAllProjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllProjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllProjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllProjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllProjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllProjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllProjectRequest& from) {
    GetAllProjectRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllProjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllProjectRequest";
  }
  protected:
  explicit GetAllProjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllProjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcRequest) */ {
 public:
  inline CreateSwcRequest() : CreateSwcRequest(nullptr) {}
  ~CreateSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcRequest(const CreateSwcRequest& from);
  CreateSwcRequest(CreateSwcRequest&& from) noexcept
    : CreateSwcRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcRequest& operator=(const CreateSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcRequest& operator=(CreateSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcRequest*>(
               &_CreateSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateSwcRequest& a, CreateSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcRequest& from) {
    CreateSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcRequest";
  }
  protected:
  explicit CreateSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 3;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcRequest) */ {
 public:
  inline DeleteSwcRequest() : DeleteSwcRequest(nullptr) {}
  ~DeleteSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcRequest(const DeleteSwcRequest& from);
  DeleteSwcRequest(DeleteSwcRequest&& from) noexcept
    : DeleteSwcRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcRequest& operator=(const DeleteSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcRequest& operator=(DeleteSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcRequest*>(
               &_DeleteSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteSwcRequest& a, DeleteSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcRequest& from) {
    DeleteSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcRequest";
  }
  protected:
  explicit DeleteSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcRequest) */ {
 public:
  inline UpdateSwcRequest() : UpdateSwcRequest(nullptr) {}
  ~UpdateSwcRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcRequest(const UpdateSwcRequest& from);
  UpdateSwcRequest(UpdateSwcRequest&& from) noexcept
    : UpdateSwcRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcRequest& operator=(const UpdateSwcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcRequest& operator=(UpdateSwcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcRequest*>(
               &_UpdateSwcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateSwcRequest& a, UpdateSwcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcRequest& from) {
    UpdateSwcRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcRequest";
  }
  protected:
  explicit UpdateSwcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 3;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcMetaInfoRequest) */ {
 public:
  inline GetSwcMetaInfoRequest() : GetSwcMetaInfoRequest(nullptr) {}
  ~GetSwcMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcMetaInfoRequest(const GetSwcMetaInfoRequest& from);
  GetSwcMetaInfoRequest(GetSwcMetaInfoRequest&& from) noexcept
    : GetSwcMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcMetaInfoRequest& operator=(const GetSwcMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcMetaInfoRequest& operator=(GetSwcMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcMetaInfoRequest*>(
               &_GetSwcMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetSwcMetaInfoRequest& a, GetSwcMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcMetaInfoRequest& from) {
    GetSwcMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcMetaInfoRequest";
  }
  protected:
  explicit GetSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllSwcMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllSwcMetaInfoRequest) */ {
 public:
  inline GetAllSwcMetaInfoRequest() : GetAllSwcMetaInfoRequest(nullptr) {}
  ~GetAllSwcMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllSwcMetaInfoRequest(const GetAllSwcMetaInfoRequest& from);
  GetAllSwcMetaInfoRequest(GetAllSwcMetaInfoRequest&& from) noexcept
    : GetAllSwcMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAllSwcMetaInfoRequest& operator=(const GetAllSwcMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllSwcMetaInfoRequest& operator=(GetAllSwcMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllSwcMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllSwcMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllSwcMetaInfoRequest*>(
               &_GetAllSwcMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAllSwcMetaInfoRequest& a, GetAllSwcMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllSwcMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllSwcMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllSwcMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllSwcMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllSwcMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllSwcMetaInfoRequest& from) {
    GetAllSwcMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllSwcMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllSwcMetaInfoRequest";
  }
  protected:
  explicit GetAllSwcMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllSwcMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcSnapshotRequest) */ {
 public:
  inline CreateSwcSnapshotRequest() : CreateSwcSnapshotRequest(nullptr) {}
  ~CreateSwcSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcSnapshotRequest(const CreateSwcSnapshotRequest& from);
  CreateSwcSnapshotRequest(CreateSwcSnapshotRequest&& from) noexcept
    : CreateSwcSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcSnapshotRequest& operator=(const CreateSwcSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcSnapshotRequest& operator=(CreateSwcSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcSnapshotRequest*>(
               &_CreateSwcSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateSwcSnapshotRequest& a, CreateSwcSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcSnapshotRequest& from) {
    CreateSwcSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcSnapshotRequest";
  }
  protected:
  explicit CreateSwcSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllSnapshotMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllSnapshotMetaInfoRequest) */ {
 public:
  inline GetAllSnapshotMetaInfoRequest() : GetAllSnapshotMetaInfoRequest(nullptr) {}
  ~GetAllSnapshotMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllSnapshotMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllSnapshotMetaInfoRequest(const GetAllSnapshotMetaInfoRequest& from);
  GetAllSnapshotMetaInfoRequest(GetAllSnapshotMetaInfoRequest&& from) noexcept
    : GetAllSnapshotMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAllSnapshotMetaInfoRequest& operator=(const GetAllSnapshotMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllSnapshotMetaInfoRequest& operator=(GetAllSnapshotMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllSnapshotMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllSnapshotMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllSnapshotMetaInfoRequest*>(
               &_GetAllSnapshotMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetAllSnapshotMetaInfoRequest& a, GetAllSnapshotMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllSnapshotMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllSnapshotMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllSnapshotMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllSnapshotMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllSnapshotMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllSnapshotMetaInfoRequest& from) {
    GetAllSnapshotMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllSnapshotMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllSnapshotMetaInfoRequest";
  }
  protected:
  explicit GetAllSnapshotMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllSnapshotMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSnapshotRequest) */ {
 public:
  inline GetSnapshotRequest() : GetSnapshotRequest(nullptr) {}
  ~GetSnapshotRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSnapshotRequest(const GetSnapshotRequest& from);
  GetSnapshotRequest(GetSnapshotRequest&& from) noexcept
    : GetSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline GetSnapshotRequest& operator=(const GetSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotRequest& operator=(GetSnapshotRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSnapshotRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotRequest*>(
               &_GetSnapshotRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetSnapshotRequest& a, GetSnapshotRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSnapshotRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSnapshotRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSnapshotRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSnapshotRequest& from) {
    GetSnapshotRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSnapshotRequest";
  }
  protected:
  explicit GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcSnapshotCollectionNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcSnapshotCollectionName = 3;
  void clear_swcsnapshotcollectionname();
  const std::string& swcsnapshotcollectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcsnapshotcollectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcsnapshotcollectionname();
  PROTOBUF_NODISCARD std::string* release_swcsnapshotcollectionname();
  void set_allocated_swcsnapshotcollectionname(std::string* swcsnapshotcollectionname);
  private:
  const std::string& _internal_swcsnapshotcollectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcsnapshotcollectionname(const std::string& value);
  std::string* _internal_mutable_swcsnapshotcollectionname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSnapshotRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcsnapshotcollectionname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllIncrementOperationMetaInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllIncrementOperationMetaInfoRequest) */ {
 public:
  inline GetAllIncrementOperationMetaInfoRequest() : GetAllIncrementOperationMetaInfoRequest(nullptr) {}
  ~GetAllIncrementOperationMetaInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllIncrementOperationMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllIncrementOperationMetaInfoRequest(const GetAllIncrementOperationMetaInfoRequest& from);
  GetAllIncrementOperationMetaInfoRequest(GetAllIncrementOperationMetaInfoRequest&& from) noexcept
    : GetAllIncrementOperationMetaInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetAllIncrementOperationMetaInfoRequest& operator=(const GetAllIncrementOperationMetaInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllIncrementOperationMetaInfoRequest& operator=(GetAllIncrementOperationMetaInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllIncrementOperationMetaInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllIncrementOperationMetaInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllIncrementOperationMetaInfoRequest*>(
               &_GetAllIncrementOperationMetaInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetAllIncrementOperationMetaInfoRequest& a, GetAllIncrementOperationMetaInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllIncrementOperationMetaInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllIncrementOperationMetaInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllIncrementOperationMetaInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllIncrementOperationMetaInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllIncrementOperationMetaInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllIncrementOperationMetaInfoRequest& from) {
    GetAllIncrementOperationMetaInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllIncrementOperationMetaInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllIncrementOperationMetaInfoRequest";
  }
  protected:
  explicit GetAllIncrementOperationMetaInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllIncrementOperationMetaInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetIncrementOperationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetIncrementOperationRequest) */ {
 public:
  inline GetIncrementOperationRequest() : GetIncrementOperationRequest(nullptr) {}
  ~GetIncrementOperationRequest() override;
  explicit PROTOBUF_CONSTEXPR GetIncrementOperationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIncrementOperationRequest(const GetIncrementOperationRequest& from);
  GetIncrementOperationRequest(GetIncrementOperationRequest&& from) noexcept
    : GetIncrementOperationRequest() {
    *this = ::std::move(from);
  }

  inline GetIncrementOperationRequest& operator=(const GetIncrementOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncrementOperationRequest& operator=(GetIncrementOperationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIncrementOperationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIncrementOperationRequest* internal_default_instance() {
    return reinterpret_cast<const GetIncrementOperationRequest*>(
               &_GetIncrementOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetIncrementOperationRequest& a, GetIncrementOperationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncrementOperationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIncrementOperationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIncrementOperationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIncrementOperationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIncrementOperationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIncrementOperationRequest& from) {
    GetIncrementOperationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncrementOperationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetIncrementOperationRequest";
  }
  protected:
  explicit GetIncrementOperationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIncrementOperationCollectionNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string IncrementOperationCollectionName = 3;
  void clear_incrementoperationcollectionname();
  const std::string& incrementoperationcollectionname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_incrementoperationcollectionname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_incrementoperationcollectionname();
  PROTOBUF_NODISCARD std::string* release_incrementoperationcollectionname();
  void set_allocated_incrementoperationcollectionname(std::string* incrementoperationcollectionname);
  private:
  const std::string& _internal_incrementoperationcollectionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_incrementoperationcollectionname(const std::string& value);
  std::string* _internal_mutable_incrementoperationcollectionname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetIncrementOperationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr incrementoperationcollectionname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcNodeDataRequest) */ {
 public:
  inline CreateSwcNodeDataRequest() : CreateSwcNodeDataRequest(nullptr) {}
  ~CreateSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcNodeDataRequest(const CreateSwcNodeDataRequest& from);
  CreateSwcNodeDataRequest(CreateSwcNodeDataRequest&& from) noexcept
    : CreateSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcNodeDataRequest& operator=(const CreateSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcNodeDataRequest& operator=(CreateSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcNodeDataRequest*>(
               &_CreateSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CreateSwcNodeDataRequest& a, CreateSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcNodeDataRequest& from) {
    CreateSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcNodeDataRequest";
  }
  protected:
  explicit CreateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcDataFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcDataV1 SwcData = 4;
  bool has_swcdata() const;
  private:
  bool _internal_has_swcdata() const;
  public:
  void clear_swcdata();
  const ::proto::SwcDataV1& swcdata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcdata();
  ::proto::SwcDataV1* mutable_swcdata();
  void set_allocated_swcdata(::proto::SwcDataV1* swcdata);
  private:
  const ::proto::SwcDataV1& _internal_swcdata() const;
  ::proto::SwcDataV1* _internal_mutable_swcdata();
  public:
  void unsafe_arena_set_allocated_swcdata(
      ::proto::SwcDataV1* swcdata);
  ::proto::SwcDataV1* unsafe_arena_release_swcdata();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcDataV1* swcdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcNodeDataRequest) */ {
 public:
  inline DeleteSwcNodeDataRequest() : DeleteSwcNodeDataRequest(nullptr) {}
  ~DeleteSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcNodeDataRequest(const DeleteSwcNodeDataRequest& from);
  DeleteSwcNodeDataRequest(DeleteSwcNodeDataRequest&& from) noexcept
    : DeleteSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcNodeDataRequest& operator=(const DeleteSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcNodeDataRequest& operator=(DeleteSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcNodeDataRequest*>(
               &_DeleteSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteSwcNodeDataRequest& a, DeleteSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcNodeDataRequest& from) {
    DeleteSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcNodeDataRequest";
  }
  protected:
  explicit DeleteSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcDataFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcDataV1 SwcData = 4;
  bool has_swcdata() const;
  private:
  bool _internal_has_swcdata() const;
  public:
  void clear_swcdata();
  const ::proto::SwcDataV1& swcdata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcdata();
  ::proto::SwcDataV1* mutable_swcdata();
  void set_allocated_swcdata(::proto::SwcDataV1* swcdata);
  private:
  const ::proto::SwcDataV1& _internal_swcdata() const;
  ::proto::SwcDataV1* _internal_mutable_swcdata();
  public:
  void unsafe_arena_set_allocated_swcdata(
      ::proto::SwcDataV1* swcdata);
  ::proto::SwcDataV1* unsafe_arena_release_swcdata();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcDataV1* swcdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcNodeDataRequest) */ {
 public:
  inline UpdateSwcNodeDataRequest() : UpdateSwcNodeDataRequest(nullptr) {}
  ~UpdateSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcNodeDataRequest(const UpdateSwcNodeDataRequest& from);
  UpdateSwcNodeDataRequest(UpdateSwcNodeDataRequest&& from) noexcept
    : UpdateSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcNodeDataRequest& operator=(const UpdateSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcNodeDataRequest& operator=(UpdateSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcNodeDataRequest*>(
               &_UpdateSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateSwcNodeDataRequest& a, UpdateSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcNodeDataRequest& from) {
    UpdateSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcNodeDataRequest";
  }
  protected:
  explicit UpdateSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcDataFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcDataV1 SwcData = 4;
  bool has_swcdata() const;
  private:
  bool _internal_has_swcdata() const;
  public:
  void clear_swcdata();
  const ::proto::SwcDataV1& swcdata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcdata();
  ::proto::SwcDataV1* mutable_swcdata();
  void set_allocated_swcdata(::proto::SwcDataV1* swcdata);
  private:
  const ::proto::SwcDataV1& _internal_swcdata() const;
  ::proto::SwcDataV1* _internal_mutable_swcdata();
  public:
  void unsafe_arena_set_allocated_swcdata(
      ::proto::SwcDataV1* swcdata);
  ::proto::SwcDataV1* unsafe_arena_release_swcdata();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcDataV1* swcdata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataRequest) */ {
 public:
  inline GetSwcNodeDataRequest() : GetSwcNodeDataRequest(nullptr) {}
  ~GetSwcNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataRequest(const GetSwcNodeDataRequest& from);
  GetSwcNodeDataRequest(GetSwcNodeDataRequest&& from) noexcept
    : GetSwcNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataRequest& operator=(const GetSwcNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataRequest& operator=(GetSwcNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataRequest*>(
               &_GetSwcNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetSwcNodeDataRequest& a, GetSwcNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataRequest& from) {
    GetSwcNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataRequest";
  }
  protected:
  explicit GetSwcNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcDataV1 SwcNodeData = 4;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcFullNodeDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcFullNodeDataRequest) */ {
 public:
  inline GetSwcFullNodeDataRequest() : GetSwcFullNodeDataRequest(nullptr) {}
  ~GetSwcFullNodeDataRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcFullNodeDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcFullNodeDataRequest(const GetSwcFullNodeDataRequest& from);
  GetSwcFullNodeDataRequest(GetSwcFullNodeDataRequest&& from) noexcept
    : GetSwcFullNodeDataRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcFullNodeDataRequest& operator=(const GetSwcFullNodeDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcFullNodeDataRequest& operator=(GetSwcFullNodeDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcFullNodeDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcFullNodeDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcFullNodeDataRequest*>(
               &_GetSwcFullNodeDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetSwcFullNodeDataRequest& a, GetSwcFullNodeDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcFullNodeDataRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcFullNodeDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcFullNodeDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcFullNodeDataRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcFullNodeDataRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcFullNodeDataRequest& from) {
    GetSwcFullNodeDataRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcFullNodeDataRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcFullNodeDataRequest";
  }
  protected:
  explicit GetSwcFullNodeDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcFullNodeDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataListByTimeAndUserRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataListByTimeAndUserRequest) */ {
 public:
  inline GetSwcNodeDataListByTimeAndUserRequest() : GetSwcNodeDataListByTimeAndUserRequest(nullptr) {}
  ~GetSwcNodeDataListByTimeAndUserRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataListByTimeAndUserRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataListByTimeAndUserRequest(const GetSwcNodeDataListByTimeAndUserRequest& from);
  GetSwcNodeDataListByTimeAndUserRequest(GetSwcNodeDataListByTimeAndUserRequest&& from) noexcept
    : GetSwcNodeDataListByTimeAndUserRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataListByTimeAndUserRequest& operator=(const GetSwcNodeDataListByTimeAndUserRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataListByTimeAndUserRequest& operator=(GetSwcNodeDataListByTimeAndUserRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataListByTimeAndUserRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataListByTimeAndUserRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataListByTimeAndUserRequest*>(
               &_GetSwcNodeDataListByTimeAndUserRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetSwcNodeDataListByTimeAndUserRequest& a, GetSwcNodeDataListByTimeAndUserRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataListByTimeAndUserRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataListByTimeAndUserRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataListByTimeAndUserRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataListByTimeAndUserRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataListByTimeAndUserRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataListByTimeAndUserRequest& from) {
    GetSwcNodeDataListByTimeAndUserRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataListByTimeAndUserRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataListByTimeAndUserRequest";
  }
  protected:
  explicit GetSwcNodeDataListByTimeAndUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kUserNameFieldNumber = 6,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kStartTimeFieldNumber = 4,
    kEndTimeFieldNumber = 5,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string UserName = 6;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .google.protobuf.Timestamp StartTime = 4;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& starttime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_starttime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_starttime();
  void set_allocated_starttime(::PROTOBUF_NAMESPACE_ID::Timestamp* starttime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_starttime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_starttime();
  public:
  void unsafe_arena_set_allocated_starttime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* starttime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_starttime();

  // .google.protobuf.Timestamp EndTime = 5;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& endtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_endtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_endtime();
  void set_allocated_endtime(::PROTOBUF_NAMESPACE_ID::Timestamp* endtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_endtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_endtime();
  public:
  void unsafe_arena_set_allocated_endtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* endtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_endtime();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataListByTimeAndUserRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* starttime_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* endtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class BackupFullDatabaseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.BackupFullDatabaseRequest) */ {
 public:
  inline BackupFullDatabaseRequest() : BackupFullDatabaseRequest(nullptr) {}
  ~BackupFullDatabaseRequest() override;
  explicit PROTOBUF_CONSTEXPR BackupFullDatabaseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackupFullDatabaseRequest(const BackupFullDatabaseRequest& from);
  BackupFullDatabaseRequest(BackupFullDatabaseRequest&& from) noexcept
    : BackupFullDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline BackupFullDatabaseRequest& operator=(const BackupFullDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackupFullDatabaseRequest& operator=(BackupFullDatabaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BackupFullDatabaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackupFullDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const BackupFullDatabaseRequest*>(
               &_BackupFullDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(BackupFullDatabaseRequest& a, BackupFullDatabaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BackupFullDatabaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackupFullDatabaseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackupFullDatabaseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackupFullDatabaseRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BackupFullDatabaseRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BackupFullDatabaseRequest& from) {
    BackupFullDatabaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BackupFullDatabaseRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.BackupFullDatabaseRequest";
  }
  protected:
  explicit BackupFullDatabaseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kDelayBackupTimeFieldNumber = 4,
    kInstantBackupFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .google.protobuf.Timestamp DelayBackupTime = 4;
  bool has_delaybackuptime() const;
  private:
  bool _internal_has_delaybackuptime() const;
  public:
  void clear_delaybackuptime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& delaybackuptime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_delaybackuptime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_delaybackuptime();
  void set_allocated_delaybackuptime(::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_delaybackuptime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_delaybackuptime();
  public:
  void unsafe_arena_set_allocated_delaybackuptime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_delaybackuptime();

  // bool InstantBackup = 3;
  void clear_instantbackup();
  bool instantbackup() const;
  void set_instantbackup(bool value);
  private:
  bool _internal_instantbackup() const;
  void _internal_set_instantbackup(bool value);
  public:

  // @@protoc_insertion_point(class_scope:proto.BackupFullDatabaseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime_;
    bool instantbackup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateDailyStatisticsRequest) */ {
 public:
  inline CreateDailyStatisticsRequest() : CreateDailyStatisticsRequest(nullptr) {}
  ~CreateDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDailyStatisticsRequest(const CreateDailyStatisticsRequest& from);
  CreateDailyStatisticsRequest(CreateDailyStatisticsRequest&& from) noexcept
    : CreateDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline CreateDailyStatisticsRequest& operator=(const CreateDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDailyStatisticsRequest& operator=(CreateDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDailyStatisticsRequest*>(
               &_CreateDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CreateDailyStatisticsRequest& a, CreateDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDailyStatisticsRequest& from) {
    CreateDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateDailyStatisticsRequest";
  }
  protected:
  explicit CreateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kDailyStatisticsInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 3;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteDailyStatisticsRequest) */ {
 public:
  inline DeleteDailyStatisticsRequest() : DeleteDailyStatisticsRequest(nullptr) {}
  ~DeleteDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDailyStatisticsRequest(const DeleteDailyStatisticsRequest& from);
  DeleteDailyStatisticsRequest(DeleteDailyStatisticsRequest&& from) noexcept
    : DeleteDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline DeleteDailyStatisticsRequest& operator=(const DeleteDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDailyStatisticsRequest& operator=(DeleteDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteDailyStatisticsRequest*>(
               &_DeleteDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(DeleteDailyStatisticsRequest& a, DeleteDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDailyStatisticsRequest& from) {
    DeleteDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteDailyStatisticsRequest";
  }
  protected:
  explicit DeleteDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyStatisticsNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string DailyStatisticsName = 3;
  void clear_dailystatisticsname();
  const std::string& dailystatisticsname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dailystatisticsname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dailystatisticsname();
  PROTOBUF_NODISCARD std::string* release_dailystatisticsname();
  void set_allocated_dailystatisticsname(std::string* dailystatisticsname);
  private:
  const std::string& _internal_dailystatisticsname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dailystatisticsname(const std::string& value);
  std::string* _internal_mutable_dailystatisticsname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dailystatisticsname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateDailyStatisticsRequest) */ {
 public:
  inline UpdateDailyStatisticsRequest() : UpdateDailyStatisticsRequest(nullptr) {}
  ~UpdateDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDailyStatisticsRequest(const UpdateDailyStatisticsRequest& from);
  UpdateDailyStatisticsRequest(UpdateDailyStatisticsRequest&& from) noexcept
    : UpdateDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDailyStatisticsRequest& operator=(const UpdateDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDailyStatisticsRequest& operator=(UpdateDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDailyStatisticsRequest*>(
               &_UpdateDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(UpdateDailyStatisticsRequest& a, UpdateDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDailyStatisticsRequest& from) {
    UpdateDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateDailyStatisticsRequest";
  }
  protected:
  explicit UpdateDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kDailyStatisticsInfoFieldNumber = 3,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 3;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetDailyStatisticsRequest) */ {
 public:
  inline GetDailyStatisticsRequest() : GetDailyStatisticsRequest(nullptr) {}
  ~GetDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDailyStatisticsRequest(const GetDailyStatisticsRequest& from);
  GetDailyStatisticsRequest(GetDailyStatisticsRequest&& from) noexcept
    : GetDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetDailyStatisticsRequest& operator=(const GetDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDailyStatisticsRequest& operator=(GetDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetDailyStatisticsRequest*>(
               &_GetDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetDailyStatisticsRequest& a, GetDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDailyStatisticsRequest& from) {
    GetDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetDailyStatisticsRequest";
  }
  protected:
  explicit GetDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyStatisticsNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string DailyStatisticsName = 3;
  void clear_dailystatisticsname();
  const std::string& dailystatisticsname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dailystatisticsname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dailystatisticsname();
  PROTOBUF_NODISCARD std::string* release_dailystatisticsname();
  void set_allocated_dailystatisticsname(std::string* dailystatisticsname);
  private:
  const std::string& _internal_dailystatisticsname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dailystatisticsname(const std::string& value);
  std::string* _internal_mutable_dailystatisticsname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dailystatisticsname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetAllDailyStatisticsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllDailyStatisticsRequest) */ {
 public:
  inline GetAllDailyStatisticsRequest() : GetAllDailyStatisticsRequest(nullptr) {}
  ~GetAllDailyStatisticsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetAllDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllDailyStatisticsRequest(const GetAllDailyStatisticsRequest& from);
  GetAllDailyStatisticsRequest(GetAllDailyStatisticsRequest&& from) noexcept
    : GetAllDailyStatisticsRequest() {
    *this = ::std::move(from);
  }

  inline GetAllDailyStatisticsRequest& operator=(const GetAllDailyStatisticsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllDailyStatisticsRequest& operator=(GetAllDailyStatisticsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllDailyStatisticsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllDailyStatisticsRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllDailyStatisticsRequest*>(
               &_GetAllDailyStatisticsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetAllDailyStatisticsRequest& a, GetAllDailyStatisticsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllDailyStatisticsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllDailyStatisticsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllDailyStatisticsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllDailyStatisticsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllDailyStatisticsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllDailyStatisticsRequest& from) {
    GetAllDailyStatisticsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDailyStatisticsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllDailyStatisticsRequest";
  }
  protected:
  explicit GetAllDailyStatisticsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllDailyStatisticsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcAttachmentAnoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcAttachmentAnoRequest) */ {
 public:
  inline CreateSwcAttachmentAnoRequest() : CreateSwcAttachmentAnoRequest(nullptr) {}
  ~CreateSwcAttachmentAnoRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcAttachmentAnoRequest(const CreateSwcAttachmentAnoRequest& from);
  CreateSwcAttachmentAnoRequest(CreateSwcAttachmentAnoRequest&& from) noexcept
    : CreateSwcAttachmentAnoRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcAttachmentAnoRequest& operator=(const CreateSwcAttachmentAnoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcAttachmentAnoRequest& operator=(CreateSwcAttachmentAnoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcAttachmentAnoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcAttachmentAnoRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcAttachmentAnoRequest*>(
               &_CreateSwcAttachmentAnoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CreateSwcAttachmentAnoRequest& a, CreateSwcAttachmentAnoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcAttachmentAnoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcAttachmentAnoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcAttachmentAnoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcAttachmentAnoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcAttachmentAnoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcAttachmentAnoRequest& from) {
    CreateSwcAttachmentAnoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcAttachmentAnoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcAttachmentAnoRequest";
  }
  protected:
  explicit CreateSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kSwcAttachmentAnoFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcAttachmentAnoV1 SwcAttachmentAno = 4;
  bool has_swcattachmentano() const;
  private:
  bool _internal_has_swcattachmentano() const;
  public:
  void clear_swcattachmentano();
  const ::proto::SwcAttachmentAnoV1& swcattachmentano() const;
  PROTOBUF_NODISCARD ::proto::SwcAttachmentAnoV1* release_swcattachmentano();
  ::proto::SwcAttachmentAnoV1* mutable_swcattachmentano();
  void set_allocated_swcattachmentano(::proto::SwcAttachmentAnoV1* swcattachmentano);
  private:
  const ::proto::SwcAttachmentAnoV1& _internal_swcattachmentano() const;
  ::proto::SwcAttachmentAnoV1* _internal_mutable_swcattachmentano();
  public:
  void unsafe_arena_set_allocated_swcattachmentano(
      ::proto::SwcAttachmentAnoV1* swcattachmentano);
  ::proto::SwcAttachmentAnoV1* unsafe_arena_release_swcattachmentano();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcAttachmentAnoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcAttachmentAnoV1* swcattachmentano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcAttachmentAnoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcAttachmentAnoRequest) */ {
 public:
  inline DeleteSwcAttachmentAnoRequest() : DeleteSwcAttachmentAnoRequest(nullptr) {}
  ~DeleteSwcAttachmentAnoRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcAttachmentAnoRequest(const DeleteSwcAttachmentAnoRequest& from);
  DeleteSwcAttachmentAnoRequest(DeleteSwcAttachmentAnoRequest&& from) noexcept
    : DeleteSwcAttachmentAnoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcAttachmentAnoRequest& operator=(const DeleteSwcAttachmentAnoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcAttachmentAnoRequest& operator=(DeleteSwcAttachmentAnoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcAttachmentAnoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcAttachmentAnoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcAttachmentAnoRequest*>(
               &_DeleteSwcAttachmentAnoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(DeleteSwcAttachmentAnoRequest& a, DeleteSwcAttachmentAnoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcAttachmentAnoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcAttachmentAnoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcAttachmentAnoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcAttachmentAnoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcAttachmentAnoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcAttachmentAnoRequest& from) {
    DeleteSwcAttachmentAnoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcAttachmentAnoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcAttachmentAnoRequest";
  }
  protected:
  explicit DeleteSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kAnoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string AnoAttachmentUuid = 4;
  void clear_anoattachmentuuid();
  const std::string& anoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_anoattachmentuuid();
  void set_allocated_anoattachmentuuid(std::string* anoattachmentuuid);
  private:
  const std::string& _internal_anoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_anoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcAttachmentAnoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcAttachmentAnoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcAttachmentAnoRequest) */ {
 public:
  inline UpdateSwcAttachmentAnoRequest() : UpdateSwcAttachmentAnoRequest(nullptr) {}
  ~UpdateSwcAttachmentAnoRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcAttachmentAnoRequest(const UpdateSwcAttachmentAnoRequest& from);
  UpdateSwcAttachmentAnoRequest(UpdateSwcAttachmentAnoRequest&& from) noexcept
    : UpdateSwcAttachmentAnoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcAttachmentAnoRequest& operator=(const UpdateSwcAttachmentAnoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcAttachmentAnoRequest& operator=(UpdateSwcAttachmentAnoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcAttachmentAnoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcAttachmentAnoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcAttachmentAnoRequest*>(
               &_UpdateSwcAttachmentAnoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(UpdateSwcAttachmentAnoRequest& a, UpdateSwcAttachmentAnoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcAttachmentAnoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcAttachmentAnoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcAttachmentAnoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcAttachmentAnoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcAttachmentAnoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcAttachmentAnoRequest& from) {
    UpdateSwcAttachmentAnoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcAttachmentAnoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcAttachmentAnoRequest";
  }
  protected:
  explicit UpdateSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kAnoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kNewSwcAttachmentAnoFieldNumber = 5,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string AnoAttachmentUuid = 4;
  void clear_anoattachmentuuid();
  const std::string& anoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_anoattachmentuuid();
  void set_allocated_anoattachmentuuid(std::string* anoattachmentuuid);
  private:
  const std::string& _internal_anoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_anoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .proto.SwcAttachmentAnoV1 NewSwcAttachmentAno = 5;
  bool has_newswcattachmentano() const;
  private:
  bool _internal_has_newswcattachmentano() const;
  public:
  void clear_newswcattachmentano();
  const ::proto::SwcAttachmentAnoV1& newswcattachmentano() const;
  PROTOBUF_NODISCARD ::proto::SwcAttachmentAnoV1* release_newswcattachmentano();
  ::proto::SwcAttachmentAnoV1* mutable_newswcattachmentano();
  void set_allocated_newswcattachmentano(::proto::SwcAttachmentAnoV1* newswcattachmentano);
  private:
  const ::proto::SwcAttachmentAnoV1& _internal_newswcattachmentano() const;
  ::proto::SwcAttachmentAnoV1* _internal_mutable_newswcattachmentano();
  public:
  void unsafe_arena_set_allocated_newswcattachmentano(
      ::proto::SwcAttachmentAnoV1* newswcattachmentano);
  ::proto::SwcAttachmentAnoV1* unsafe_arena_release_newswcattachmentano();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcAttachmentAnoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::proto::SwcAttachmentAnoV1* newswcattachmentano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcAttachmentAnoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcAttachmentAnoRequest) */ {
 public:
  inline GetSwcAttachmentAnoRequest() : GetSwcAttachmentAnoRequest(nullptr) {}
  ~GetSwcAttachmentAnoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcAttachmentAnoRequest(const GetSwcAttachmentAnoRequest& from);
  GetSwcAttachmentAnoRequest(GetSwcAttachmentAnoRequest&& from) noexcept
    : GetSwcAttachmentAnoRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcAttachmentAnoRequest& operator=(const GetSwcAttachmentAnoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcAttachmentAnoRequest& operator=(GetSwcAttachmentAnoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcAttachmentAnoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcAttachmentAnoRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcAttachmentAnoRequest*>(
               &_GetSwcAttachmentAnoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(GetSwcAttachmentAnoRequest& a, GetSwcAttachmentAnoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcAttachmentAnoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcAttachmentAnoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcAttachmentAnoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcAttachmentAnoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcAttachmentAnoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcAttachmentAnoRequest& from) {
    GetSwcAttachmentAnoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcAttachmentAnoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcAttachmentAnoRequest";
  }
  protected:
  explicit GetSwcAttachmentAnoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kAnoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string AnoAttachmentUuid = 4;
  void clear_anoattachmentuuid();
  const std::string& anoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_anoattachmentuuid();
  void set_allocated_anoattachmentuuid(std::string* anoattachmentuuid);
  private:
  const std::string& _internal_anoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_anoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcAttachmentAnoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcAttachmentApoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcAttachmentApoRequest) */ {
 public:
  inline CreateSwcAttachmentApoRequest() : CreateSwcAttachmentApoRequest(nullptr) {}
  ~CreateSwcAttachmentApoRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcAttachmentApoRequest(const CreateSwcAttachmentApoRequest& from);
  CreateSwcAttachmentApoRequest(CreateSwcAttachmentApoRequest&& from) noexcept
    : CreateSwcAttachmentApoRequest() {
    *this = ::std::move(from);
  }

  inline CreateSwcAttachmentApoRequest& operator=(const CreateSwcAttachmentApoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcAttachmentApoRequest& operator=(CreateSwcAttachmentApoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcAttachmentApoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcAttachmentApoRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSwcAttachmentApoRequest*>(
               &_CreateSwcAttachmentApoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CreateSwcAttachmentApoRequest& a, CreateSwcAttachmentApoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcAttachmentApoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcAttachmentApoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcAttachmentApoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcAttachmentApoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcAttachmentApoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcAttachmentApoRequest& from) {
    CreateSwcAttachmentApoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcAttachmentApoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcAttachmentApoRequest";
  }
  protected:
  explicit CreateSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcAttachmentApoFieldNumber = 4,
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // repeated .proto.SwcAttachmentApoV1 SwcAttachmentApo = 4;
  int swcattachmentapo_size() const;
  private:
  int _internal_swcattachmentapo_size() const;
  public:
  void clear_swcattachmentapo();
  ::proto::SwcAttachmentApoV1* mutable_swcattachmentapo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
      mutable_swcattachmentapo();
  private:
  const ::proto::SwcAttachmentApoV1& _internal_swcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* _internal_add_swcattachmentapo();
  public:
  const ::proto::SwcAttachmentApoV1& swcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* add_swcattachmentapo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
      swcattachmentapo() const;

  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcAttachmentApoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 > swcattachmentapo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcAttachmentApoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcAttachmentApoRequest) */ {
 public:
  inline DeleteSwcAttachmentApoRequest() : DeleteSwcAttachmentApoRequest(nullptr) {}
  ~DeleteSwcAttachmentApoRequest() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcAttachmentApoRequest(const DeleteSwcAttachmentApoRequest& from);
  DeleteSwcAttachmentApoRequest(DeleteSwcAttachmentApoRequest&& from) noexcept
    : DeleteSwcAttachmentApoRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSwcAttachmentApoRequest& operator=(const DeleteSwcAttachmentApoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcAttachmentApoRequest& operator=(DeleteSwcAttachmentApoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcAttachmentApoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcAttachmentApoRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcAttachmentApoRequest*>(
               &_DeleteSwcAttachmentApoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(DeleteSwcAttachmentApoRequest& a, DeleteSwcAttachmentApoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcAttachmentApoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcAttachmentApoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcAttachmentApoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcAttachmentApoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcAttachmentApoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcAttachmentApoRequest& from) {
    DeleteSwcAttachmentApoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcAttachmentApoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcAttachmentApoRequest";
  }
  protected:
  explicit DeleteSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kApoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string ApoAttachmentUuid = 4;
  void clear_apoattachmentuuid();
  const std::string& apoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_apoattachmentuuid();
  void set_allocated_apoattachmentuuid(std::string* apoattachmentuuid);
  private:
  const std::string& _internal_apoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_apoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcAttachmentApoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcAttachmentApoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcAttachmentApoRequest) */ {
 public:
  inline UpdateSwcAttachmentApoRequest() : UpdateSwcAttachmentApoRequest(nullptr) {}
  ~UpdateSwcAttachmentApoRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcAttachmentApoRequest(const UpdateSwcAttachmentApoRequest& from);
  UpdateSwcAttachmentApoRequest(UpdateSwcAttachmentApoRequest&& from) noexcept
    : UpdateSwcAttachmentApoRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSwcAttachmentApoRequest& operator=(const UpdateSwcAttachmentApoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcAttachmentApoRequest& operator=(UpdateSwcAttachmentApoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcAttachmentApoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcAttachmentApoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcAttachmentApoRequest*>(
               &_UpdateSwcAttachmentApoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UpdateSwcAttachmentApoRequest& a, UpdateSwcAttachmentApoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcAttachmentApoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcAttachmentApoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcAttachmentApoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcAttachmentApoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcAttachmentApoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcAttachmentApoRequest& from) {
    UpdateSwcAttachmentApoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcAttachmentApoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcAttachmentApoRequest";
  }
  protected:
  explicit UpdateSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewSwcAttachmentApoFieldNumber = 5,
    kSwcNameFieldNumber = 3,
    kApoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // repeated .proto.SwcAttachmentApoV1 NewSwcAttachmentApo = 5;
  int newswcattachmentapo_size() const;
  private:
  int _internal_newswcattachmentapo_size() const;
  public:
  void clear_newswcattachmentapo();
  ::proto::SwcAttachmentApoV1* mutable_newswcattachmentapo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
      mutable_newswcattachmentapo();
  private:
  const ::proto::SwcAttachmentApoV1& _internal_newswcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* _internal_add_newswcattachmentapo();
  public:
  const ::proto::SwcAttachmentApoV1& newswcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* add_newswcattachmentapo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
      newswcattachmentapo() const;

  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string ApoAttachmentUuid = 4;
  void clear_apoattachmentuuid();
  const std::string& apoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_apoattachmentuuid();
  void set_allocated_apoattachmentuuid(std::string* apoattachmentuuid);
  private:
  const std::string& _internal_apoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_apoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcAttachmentApoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 > newswcattachmentapo_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class GetSwcAttachmentApoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcAttachmentApoRequest) */ {
 public:
  inline GetSwcAttachmentApoRequest() : GetSwcAttachmentApoRequest(nullptr) {}
  ~GetSwcAttachmentApoRequest() override;
  explicit PROTOBUF_CONSTEXPR GetSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcAttachmentApoRequest(const GetSwcAttachmentApoRequest& from);
  GetSwcAttachmentApoRequest(GetSwcAttachmentApoRequest&& from) noexcept
    : GetSwcAttachmentApoRequest() {
    *this = ::std::move(from);
  }

  inline GetSwcAttachmentApoRequest& operator=(const GetSwcAttachmentApoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcAttachmentApoRequest& operator=(GetSwcAttachmentApoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcAttachmentApoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcAttachmentApoRequest* internal_default_instance() {
    return reinterpret_cast<const GetSwcAttachmentApoRequest*>(
               &_GetSwcAttachmentApoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetSwcAttachmentApoRequest& a, GetSwcAttachmentApoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcAttachmentApoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcAttachmentApoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcAttachmentApoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcAttachmentApoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcAttachmentApoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcAttachmentApoRequest& from) {
    GetSwcAttachmentApoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcAttachmentApoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcAttachmentApoRequest";
  }
  protected:
  explicit GetSwcAttachmentApoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kApoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // string ApoAttachmentUuid = 4;
  void clear_apoattachmentuuid();
  const std::string& apoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_apoattachmentuuid();
  void set_allocated_apoattachmentuuid(std::string* apoattachmentuuid);
  private:
  const std::string& _internal_apoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_apoattachmentuuid();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcAttachmentApoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apoattachmentuuid_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// -------------------------------------------------------------------

class RevertSwcVersionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RevertSwcVersionRequest) */ {
 public:
  inline RevertSwcVersionRequest() : RevertSwcVersionRequest(nullptr) {}
  ~RevertSwcVersionRequest() override;
  explicit PROTOBUF_CONSTEXPR RevertSwcVersionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevertSwcVersionRequest(const RevertSwcVersionRequest& from);
  RevertSwcVersionRequest(RevertSwcVersionRequest&& from) noexcept
    : RevertSwcVersionRequest() {
    *this = ::std::move(from);
  }

  inline RevertSwcVersionRequest& operator=(const RevertSwcVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevertSwcVersionRequest& operator=(RevertSwcVersionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevertSwcVersionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevertSwcVersionRequest* internal_default_instance() {
    return reinterpret_cast<const RevertSwcVersionRequest*>(
               &_RevertSwcVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RevertSwcVersionRequest& a, RevertSwcVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RevertSwcVersionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevertSwcVersionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevertSwcVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevertSwcVersionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevertSwcVersionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevertSwcVersionRequest& from) {
    RevertSwcVersionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevertSwcVersionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RevertSwcVersionRequest";
  }
  protected:
  explicit RevertSwcVersionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcNameFieldNumber = 3,
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
    kVersionEndTimeFieldNumber = 4,
  };
  // string SwcName = 3;
  void clear_swcname();
  const std::string& swcname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_swcname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_swcname();
  PROTOBUF_NODISCARD std::string* release_swcname();
  void set_allocated_swcname(std::string* swcname);
  private:
  const std::string& _internal_swcname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_swcname(const std::string& value);
  std::string* _internal_mutable_swcname();
  public:

  // .proto.RequestMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::RequestMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::RequestMetaInfoV1* release_metainfo();
  ::proto::RequestMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo);
  private:
  const ::proto::RequestMetaInfoV1& _internal_metainfo() const;
  ::proto::RequestMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::RequestMetaInfoV1* metainfo);
  ::proto::RequestMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // .google.protobuf.Timestamp VersionEndTime = 4;
  bool has_versionendtime() const;
  private:
  bool _internal_has_versionendtime() const;
  public:
  void clear_versionendtime();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& versionendtime() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_versionendtime();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_versionendtime();
  void set_allocated_versionendtime(::PROTOBUF_NAMESPACE_ID::Timestamp* versionendtime);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_versionendtime() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_versionendtime();
  public:
  void unsafe_arena_set_allocated_versionendtime(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* versionendtime);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_versionendtime();

  // @@protoc_insertion_point(class_scope:proto.RevertSwcVersionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr swcname_;
    ::proto::RequestMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* versionendtime_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fRequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateUserRequest.metaInfo)
  return _msg;
}
inline void CreateUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateUserRequest.metaInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 2;
inline bool CreateUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void CreateUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateUserRequest.UserInfo)
  return _msg;
}
inline void CreateUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// DeleteUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteUserRequest.metaInfo)
  return _msg;
}
inline void DeleteUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteUserRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteUserRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteUserRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteUserRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteUserRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteUserRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteUserRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteUserRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteUserRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteUserRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteUserRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteUserRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteUserRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteUserRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteUserRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteUserRequest.UserVerifyInfo)
}

// string UserName = 3;
inline void DeleteUserRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& DeleteUserRequest::username() const {
  // @@protoc_insertion_point(field_get:proto.DeleteUserRequest.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteUserRequest.UserName)
}
inline std::string* DeleteUserRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.DeleteUserRequest.UserName)
  return _s;
}
inline const std::string& DeleteUserRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void DeleteUserRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:proto.DeleteUserRequest.UserName)
  return _impl_.username_.Release();
}
inline void DeleteUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteUserRequest.UserName)
}

// -------------------------------------------------------------------

// UpdateUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserRequest.metaInfo)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateUserRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateUserRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateUserRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateUserRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateUserRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateUserRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateUserRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateUserRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserRequest.UserVerifyInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 3;
inline bool UpdateUserRequest::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateUserRequest::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateUserRequest::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateUserRequest::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserRequest.UserInfo)
  return _internal_userinfo();
}
inline void UpdateUserRequest::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserRequest.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserRequest.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateUserRequest::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserRequest.UserInfo)
  return _msg;
}
inline void UpdateUserRequest::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserRequest.UserInfo)
}

// -------------------------------------------------------------------

// GetUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserRequest.metaInfo)
  return _msg;
}
inline void GetUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetUserRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetUserRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetUserRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetUserRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetUserRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetUserRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetUserRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetUserRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetUserRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserRequest.UserVerifyInfo)
  return _msg;
}
inline void GetUserRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserRequest.UserVerifyInfo)
}

// string UserName = 3;
inline void GetUserRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& GetUserRequest::username() const {
  // @@protoc_insertion_point(field_get:proto.GetUserRequest.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUserRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetUserRequest.UserName)
}
inline std::string* GetUserRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.GetUserRequest.UserName)
  return _s;
}
inline const std::string& GetUserRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void GetUserRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* GetUserRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* GetUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:proto.GetUserRequest.UserName)
  return _impl_.username_.Release();
}
inline void GetUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserRequest.UserName)
}

// -------------------------------------------------------------------

// GetAllUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllUserRequest.metaInfo)
  return _msg;
}
inline void GetAllUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllUserRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllUserRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllUserRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllUserRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllUserRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllUserRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllUserRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllUserRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllUserRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllUserRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllUserRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllUserRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllUserRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllUserRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllUserRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllUserRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// UserLoginRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UserLoginRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserLoginRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UserLoginRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UserLoginRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginRequest.metaInfo)
  return _internal_metainfo();
}
inline void UserLoginRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLoginRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UserLoginRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserLoginRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserLoginRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserLoginRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UserLoginRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginRequest.metaInfo)
  return _msg;
}
inline void UserLoginRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginRequest.metaInfo)
}

// string UserName = 2;
inline void UserLoginRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& UserLoginRequest::username() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginRequest.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserLoginRequest.UserName)
}
inline std::string* UserLoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginRequest.UserName)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void UserLoginRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:proto.UserLoginRequest.UserName)
  return _impl_.username_.Release();
}
inline void UserLoginRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginRequest.UserName)
}

// string Password = 3;
inline void UserLoginRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& UserLoginRequest::password() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginRequest.Password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLoginRequest::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UserLoginRequest.Password)
}
inline std::string* UserLoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginRequest.Password)
  return _s;
}
inline const std::string& UserLoginRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void UserLoginRequest::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLoginRequest::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:proto.UserLoginRequest.Password)
  return _impl_.password_.Release();
}
inline void UserLoginRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginRequest.Password)
}

// -------------------------------------------------------------------

// UserLogoutRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UserLogoutRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserLogoutRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UserLogoutRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UserLogoutRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLogoutRequest.metaInfo)
  return _internal_metainfo();
}
inline void UserLogoutRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLogoutRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UserLogoutRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserLogoutRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserLogoutRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserLogoutRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UserLogoutRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLogoutRequest.metaInfo)
  return _msg;
}
inline void UserLogoutRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLogoutRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UserLogoutRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UserLogoutRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UserLogoutRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UserLogoutRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLogoutRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UserLogoutRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLogoutRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UserLogoutRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserLogoutRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UserLogoutRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserLogoutRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UserLogoutRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLogoutRequest.UserVerifyInfo)
  return _msg;
}
inline void UserLogoutRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLogoutRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// UserOnlineHeartBeatNotification

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UserOnlineHeartBeatNotification::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserOnlineHeartBeatNotification::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UserOnlineHeartBeatNotification::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UserOnlineHeartBeatNotification::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatNotification.metaInfo)
  return _internal_metainfo();
}
inline void UserOnlineHeartBeatNotification::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserOnlineHeartBeatNotification.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UserOnlineHeartBeatNotification::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserOnlineHeartBeatNotification::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserOnlineHeartBeatNotification.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UserOnlineHeartBeatNotification::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UserOnlineHeartBeatNotification::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserOnlineHeartBeatNotification.metaInfo)
  return _msg;
}
inline void UserOnlineHeartBeatNotification::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserOnlineHeartBeatNotification.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UserOnlineHeartBeatNotification::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UserOnlineHeartBeatNotification::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UserOnlineHeartBeatNotification::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UserOnlineHeartBeatNotification::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatNotification.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UserOnlineHeartBeatNotification::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserOnlineHeartBeatNotification.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatNotification::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatNotification::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UserOnlineHeartBeatNotification.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatNotification::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatNotification::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserOnlineHeartBeatNotification.UserVerifyInfo)
  return _msg;
}
inline void UserOnlineHeartBeatNotification::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserOnlineHeartBeatNotification.UserVerifyInfo)
}

// int64 HeartBeatTime = 3;
inline void UserOnlineHeartBeatNotification::clear_heartbeattime() {
  _impl_.heartbeattime_ = int64_t{0};
}
inline int64_t UserOnlineHeartBeatNotification::_internal_heartbeattime() const {
  return _impl_.heartbeattime_;
}
inline int64_t UserOnlineHeartBeatNotification::heartbeattime() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatNotification.HeartBeatTime)
  return _internal_heartbeattime();
}
inline void UserOnlineHeartBeatNotification::_internal_set_heartbeattime(int64_t value) {
  
  _impl_.heartbeattime_ = value;
}
inline void UserOnlineHeartBeatNotification::set_heartbeattime(int64_t value) {
  _internal_set_heartbeattime(value);
  // @@protoc_insertion_point(field_set:proto.UserOnlineHeartBeatNotification.HeartBeatTime)
}

// -------------------------------------------------------------------

// GetUserPermissionGroupRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetUserPermissionGroupRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetUserPermissionGroupRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetUserPermissionGroupRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetUserPermissionGroupRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserPermissionGroupRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetUserPermissionGroupRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserPermissionGroupRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetUserPermissionGroupRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetUserPermissionGroupRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserPermissionGroupRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetUserPermissionGroupRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetUserPermissionGroupRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserPermissionGroupRequest.metaInfo)
  return _msg;
}
inline void GetUserPermissionGroupRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserPermissionGroupRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetUserPermissionGroupRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetUserPermissionGroupRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetUserPermissionGroupRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetUserPermissionGroupRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserPermissionGroupRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetUserPermissionGroupRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserPermissionGroupRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetUserPermissionGroupRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetUserPermissionGroupRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserPermissionGroupRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetUserPermissionGroupRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetUserPermissionGroupRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserPermissionGroupRequest.UserVerifyInfo)
  return _msg;
}
inline void GetUserPermissionGroupRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserPermissionGroupRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// GetPermissionGroupRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetPermissionGroupRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetPermissionGroupRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetPermissionGroupRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetPermissionGroupRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetPermissionGroupRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetPermissionGroupRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetPermissionGroupRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetPermissionGroupRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetPermissionGroupRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupRequest.metaInfo)
  return _msg;
}
inline void GetPermissionGroupRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetPermissionGroupRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetPermissionGroupRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetPermissionGroupRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetPermissionGroupRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetPermissionGroupRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetPermissionGroupRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetPermissionGroupRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetPermissionGroupRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetPermissionGroupRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupRequest.UserVerifyInfo)
  return _msg;
}
inline void GetPermissionGroupRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupRequest.UserVerifyInfo)
}

// .proto.PermissionGroupMetaInfoV1 PermissionGroup = 3;
inline bool GetPermissionGroupRequest::_internal_has_permissiongroup() const {
  return this != internal_default_instance() && _impl_.permissiongroup_ != nullptr;
}
inline bool GetPermissionGroupRequest::has_permissiongroup() const {
  return _internal_has_permissiongroup();
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupRequest::_internal_permissiongroup() const {
  const ::proto::PermissionGroupMetaInfoV1* p = _impl_.permissiongroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupMetaInfoV1&>(
      ::proto::_PermissionGroupMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupRequest::permissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupRequest.PermissionGroup)
  return _internal_permissiongroup();
}
inline void GetPermissionGroupRequest::unsafe_arena_set_allocated_permissiongroup(
    ::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  _impl_.permissiongroup_ = permissiongroup;
  if (permissiongroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupRequest.PermissionGroup)
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::release_permissiongroup() {
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::unsafe_arena_release_permissiongroup() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupRequest.PermissionGroup)
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::_internal_mutable_permissiongroup() {
  
  if (_impl_.permissiongroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(GetArenaForAllocation());
    _impl_.permissiongroup_ = p;
  }
  return _impl_.permissiongroup_;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupRequest::mutable_permissiongroup() {
  ::proto::PermissionGroupMetaInfoV1* _msg = _internal_mutable_permissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupRequest.PermissionGroup)
  return _msg;
}
inline void GetPermissionGroupRequest::set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  if (permissiongroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permissiongroup));
    if (message_arena != submessage_arena) {
      permissiongroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroup_ = permissiongroup;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupRequest.PermissionGroup)
}

// -------------------------------------------------------------------

// GetAllPermissionGroupRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllPermissionGroupRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllPermissionGroupRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllPermissionGroupRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllPermissionGroupRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllPermissionGroupRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllPermissionGroupRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllPermissionGroupRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllPermissionGroupRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllPermissionGroupRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllPermissionGroupRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllPermissionGroupRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllPermissionGroupRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllPermissionGroupRequest.metaInfo)
  return _msg;
}
inline void GetAllPermissionGroupRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllPermissionGroupRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllPermissionGroupRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllPermissionGroupRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllPermissionGroupRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllPermissionGroupRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllPermissionGroupRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllPermissionGroupRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllPermissionGroupRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllPermissionGroupRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllPermissionGroupRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllPermissionGroupRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllPermissionGroupRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllPermissionGroupRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllPermissionGroupRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllPermissionGroupRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllPermissionGroupRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// ChangeUserPermissionGroupRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool ChangeUserPermissionGroupRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool ChangeUserPermissionGroupRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& ChangeUserPermissionGroupRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& ChangeUserPermissionGroupRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.metaInfo)
  return _internal_metainfo();
}
inline void ChangeUserPermissionGroupRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ChangeUserPermissionGroupRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* ChangeUserPermissionGroupRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* ChangeUserPermissionGroupRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* ChangeUserPermissionGroupRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* ChangeUserPermissionGroupRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.metaInfo)
  return _msg;
}
inline void ChangeUserPermissionGroupRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool ChangeUserPermissionGroupRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool ChangeUserPermissionGroupRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& ChangeUserPermissionGroupRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& ChangeUserPermissionGroupRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void ChangeUserPermissionGroupRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ChangeUserPermissionGroupRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* ChangeUserPermissionGroupRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* ChangeUserPermissionGroupRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* ChangeUserPermissionGroupRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* ChangeUserPermissionGroupRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.UserVerifyInfo)
  return _msg;
}
inline void ChangeUserPermissionGroupRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.UserVerifyInfo)
}

// string TargetUserName = 3;
inline void ChangeUserPermissionGroupRequest::clear_targetusername() {
  _impl_.targetusername_.ClearToEmpty();
}
inline const std::string& ChangeUserPermissionGroupRequest::targetusername() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.TargetUserName)
  return _internal_targetusername();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeUserPermissionGroupRequest::set_targetusername(ArgT0&& arg0, ArgT... args) {
 
 _impl_.targetusername_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ChangeUserPermissionGroupRequest.TargetUserName)
}
inline std::string* ChangeUserPermissionGroupRequest::mutable_targetusername() {
  std::string* _s = _internal_mutable_targetusername();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.TargetUserName)
  return _s;
}
inline const std::string& ChangeUserPermissionGroupRequest::_internal_targetusername() const {
  return _impl_.targetusername_.Get();
}
inline void ChangeUserPermissionGroupRequest::_internal_set_targetusername(const std::string& value) {
  
  _impl_.targetusername_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeUserPermissionGroupRequest::_internal_mutable_targetusername() {
  
  return _impl_.targetusername_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeUserPermissionGroupRequest::release_targetusername() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.TargetUserName)
  return _impl_.targetusername_.Release();
}
inline void ChangeUserPermissionGroupRequest::set_allocated_targetusername(std::string* targetusername) {
  if (targetusername != nullptr) {
    
  } else {
    
  }
  _impl_.targetusername_.SetAllocated(targetusername, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.targetusername_.IsDefault()) {
    _impl_.targetusername_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.TargetUserName)
}

// string PermissionGroupName = 4;
inline void ChangeUserPermissionGroupRequest::clear_permissiongroupname() {
  _impl_.permissiongroupname_.ClearToEmpty();
}
inline const std::string& ChangeUserPermissionGroupRequest::permissiongroupname() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupRequest.PermissionGroupName)
  return _internal_permissiongroupname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeUserPermissionGroupRequest::set_permissiongroupname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.permissiongroupname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.ChangeUserPermissionGroupRequest.PermissionGroupName)
}
inline std::string* ChangeUserPermissionGroupRequest::mutable_permissiongroupname() {
  std::string* _s = _internal_mutable_permissiongroupname();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupRequest.PermissionGroupName)
  return _s;
}
inline const std::string& ChangeUserPermissionGroupRequest::_internal_permissiongroupname() const {
  return _impl_.permissiongroupname_.Get();
}
inline void ChangeUserPermissionGroupRequest::_internal_set_permissiongroupname(const std::string& value) {
  
  _impl_.permissiongroupname_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeUserPermissionGroupRequest::_internal_mutable_permissiongroupname() {
  
  return _impl_.permissiongroupname_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeUserPermissionGroupRequest::release_permissiongroupname() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupRequest.PermissionGroupName)
  return _impl_.permissiongroupname_.Release();
}
inline void ChangeUserPermissionGroupRequest::set_allocated_permissiongroupname(std::string* permissiongroupname) {
  if (permissiongroupname != nullptr) {
    
  } else {
    
  }
  _impl_.permissiongroupname_.SetAllocated(permissiongroupname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.permissiongroupname_.IsDefault()) {
    _impl_.permissiongroupname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupRequest.PermissionGroupName)
}

// -------------------------------------------------------------------

// CreateProjectRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateProjectRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateProjectRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateProjectRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateProjectRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateProjectRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateProjectRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateProjectRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateProjectRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectRequest.metaInfo)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateProjectRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateProjectRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateProjectRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateProjectRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateProjectRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateProjectRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateProjectRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateProjectRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectRequest.UserVerifyInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 3;
inline bool CreateProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool CreateProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void CreateProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectRequest.ProjectInfo)
  return _msg;
}
inline void CreateProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// DeleteProjectRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteProjectRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteProjectRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteProjectRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteProjectRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteProjectRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteProjectRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteProjectRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteProjectRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteProjectRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectRequest.metaInfo)
  return _msg;
}
inline void DeleteProjectRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteProjectRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteProjectRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteProjectRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteProjectRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteProjectRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteProjectRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteProjectRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteProjectRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteProjectRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteProjectRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectRequest.UserVerifyInfo)
}

// string ProjectName = 3;
inline void DeleteProjectRequest::clear_projectname() {
  _impl_.projectname_.ClearToEmpty();
}
inline const std::string& DeleteProjectRequest::projectname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectRequest.ProjectName)
  return _internal_projectname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectRequest::set_projectname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteProjectRequest.ProjectName)
}
inline std::string* DeleteProjectRequest::mutable_projectname() {
  std::string* _s = _internal_mutable_projectname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectRequest.ProjectName)
  return _s;
}
inline const std::string& DeleteProjectRequest::_internal_projectname() const {
  return _impl_.projectname_.Get();
}
inline void DeleteProjectRequest::_internal_set_projectname(const std::string& value) {
  
  _impl_.projectname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::_internal_mutable_projectname() {
  
  return _impl_.projectname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteProjectRequest::release_projectname() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectRequest.ProjectName)
  return _impl_.projectname_.Release();
}
inline void DeleteProjectRequest::set_allocated_projectname(std::string* projectname) {
  if (projectname != nullptr) {
    
  } else {
    
  }
  _impl_.projectname_.SetAllocated(projectname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectname_.IsDefault()) {
    _impl_.projectname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectRequest.ProjectName)
}

// -------------------------------------------------------------------

// UpdateProjectRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateProjectRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateProjectRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateProjectRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateProjectRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateProjectRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateProjectRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateProjectRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateProjectRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectRequest.metaInfo)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateProjectRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateProjectRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateProjectRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateProjectRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateProjectRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateProjectRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateProjectRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateProjectRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectRequest.UserVerifyInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 3;
inline bool UpdateProjectRequest::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool UpdateProjectRequest::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectRequest::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectRequest::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectRequest.ProjectInfo)
  return _internal_projectinfo();
}
inline void UpdateProjectRequest::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectRequest.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectRequest.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectRequest::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectRequest.ProjectInfo)
  return _msg;
}
inline void UpdateProjectRequest::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectRequest.ProjectInfo)
}

// -------------------------------------------------------------------

// GetProjectRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetProjectRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetProjectRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetProjectRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetProjectRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetProjectRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetProjectRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetProjectRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetProjectRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetProjectRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectRequest.metaInfo)
  return _msg;
}
inline void GetProjectRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetProjectRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetProjectRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetProjectRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetProjectRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetProjectRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetProjectRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetProjectRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetProjectRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetProjectRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectRequest.UserVerifyInfo)
  return _msg;
}
inline void GetProjectRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectRequest.UserVerifyInfo)
}

// string ProjectName = 3;
inline void GetProjectRequest::clear_projectname() {
  _impl_.projectname_.ClearToEmpty();
}
inline const std::string& GetProjectRequest::projectname() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectRequest.ProjectName)
  return _internal_projectname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetProjectRequest::set_projectname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.projectname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetProjectRequest.ProjectName)
}
inline std::string* GetProjectRequest::mutable_projectname() {
  std::string* _s = _internal_mutable_projectname();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectRequest.ProjectName)
  return _s;
}
inline const std::string& GetProjectRequest::_internal_projectname() const {
  return _impl_.projectname_.Get();
}
inline void GetProjectRequest::_internal_set_projectname(const std::string& value) {
  
  _impl_.projectname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetProjectRequest::_internal_mutable_projectname() {
  
  return _impl_.projectname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetProjectRequest::release_projectname() {
  // @@protoc_insertion_point(field_release:proto.GetProjectRequest.ProjectName)
  return _impl_.projectname_.Release();
}
inline void GetProjectRequest::set_allocated_projectname(std::string* projectname) {
  if (projectname != nullptr) {
    
  } else {
    
  }
  _impl_.projectname_.SetAllocated(projectname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.projectname_.IsDefault()) {
    _impl_.projectname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectRequest.ProjectName)
}

// -------------------------------------------------------------------

// GetAllProjectRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllProjectRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllProjectRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllProjectRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllProjectRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllProjectRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllProjectRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllProjectRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllProjectRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllProjectRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllProjectRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllProjectRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllProjectRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllProjectRequest.metaInfo)
  return _msg;
}
inline void GetAllProjectRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllProjectRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllProjectRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllProjectRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllProjectRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllProjectRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllProjectRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllProjectRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllProjectRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllProjectRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllProjectRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllProjectRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllProjectRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllProjectRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllProjectRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllProjectRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllProjectRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// CreateSwcRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateSwcRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateSwcRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateSwcRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateSwcRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateSwcRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcRequest.metaInfo)
  return _msg;
}
inline void CreateSwcRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateSwcRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateSwcRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateSwcRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateSwcRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateSwcRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateSwcRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateSwcRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateSwcRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcRequest.UserVerifyInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 3;
inline bool CreateSwcRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool CreateSwcRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& CreateSwcRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& CreateSwcRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void CreateSwcRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* CreateSwcRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcRequest.SwcInfo)
  return _msg;
}
inline void CreateSwcRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcRequest.SwcInfo)
}

// -------------------------------------------------------------------

// DeleteSwcRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteSwcRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcRequest.metaInfo)
  return _msg;
}
inline void DeleteSwcRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteSwcRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteSwcRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteSwcRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteSwcRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteSwcRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void DeleteSwcRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& DeleteSwcRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcRequest.SwcName)
}
inline std::string* DeleteSwcRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcRequest.SwcName)
  return _s;
}
inline const std::string& DeleteSwcRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void DeleteSwcRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void DeleteSwcRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcRequest.SwcName)
}

// -------------------------------------------------------------------

// UpdateSwcRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateSwcRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcRequest.metaInfo)
  return _msg;
}
inline void UpdateSwcRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateSwcRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateSwcRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateSwcRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateSwcRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateSwcRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcRequest.UserVerifyInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 3;
inline bool UpdateSwcRequest::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool UpdateSwcRequest::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcRequest::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcRequest::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcRequest.SwcInfo)
  return _internal_swcinfo();
}
inline void UpdateSwcRequest::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcRequest.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcRequest.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcRequest::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcRequest.SwcInfo)
  return _msg;
}
inline void UpdateSwcRequest::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcRequest.SwcInfo)
}

// -------------------------------------------------------------------

// GetSwcMetaInfoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcMetaInfoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcMetaInfoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcMetaInfoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcMetaInfoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcMetaInfoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcMetaInfoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcMetaInfoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcMetaInfoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcMetaInfoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoRequest.metaInfo)
  return _msg;
}
inline void GetSwcMetaInfoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcMetaInfoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcMetaInfoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcMetaInfoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcMetaInfoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcMetaInfoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcMetaInfoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcMetaInfoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcMetaInfoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcMetaInfoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcMetaInfoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcMetaInfoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcMetaInfoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcMetaInfoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcMetaInfoRequest.SwcName)
}
inline std::string* GetSwcMetaInfoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcMetaInfoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcMetaInfoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcMetaInfoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcMetaInfoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcMetaInfoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoRequest.SwcName)
}

// -------------------------------------------------------------------

// GetAllSwcMetaInfoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllSwcMetaInfoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllSwcMetaInfoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllSwcMetaInfoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllSwcMetaInfoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSwcMetaInfoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllSwcMetaInfoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSwcMetaInfoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllSwcMetaInfoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllSwcMetaInfoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSwcMetaInfoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllSwcMetaInfoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllSwcMetaInfoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSwcMetaInfoRequest.metaInfo)
  return _msg;
}
inline void GetAllSwcMetaInfoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSwcMetaInfoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllSwcMetaInfoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllSwcMetaInfoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllSwcMetaInfoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllSwcMetaInfoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSwcMetaInfoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllSwcMetaInfoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSwcMetaInfoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllSwcMetaInfoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllSwcMetaInfoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSwcMetaInfoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllSwcMetaInfoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllSwcMetaInfoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSwcMetaInfoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllSwcMetaInfoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSwcMetaInfoRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// CreateSwcSnapshotRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateSwcSnapshotRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcSnapshotRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateSwcSnapshotRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateSwcSnapshotRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcSnapshotRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcSnapshotRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcSnapshotRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateSwcSnapshotRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcSnapshotRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcSnapshotRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcSnapshotRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateSwcSnapshotRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcSnapshotRequest.metaInfo)
  return _msg;
}
inline void CreateSwcSnapshotRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcSnapshotRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateSwcSnapshotRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateSwcSnapshotRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateSwcSnapshotRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateSwcSnapshotRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcSnapshotRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateSwcSnapshotRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcSnapshotRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateSwcSnapshotRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcSnapshotRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcSnapshotRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcSnapshotRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateSwcSnapshotRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcSnapshotRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateSwcSnapshotRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcSnapshotRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void CreateSwcSnapshotRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& CreateSwcSnapshotRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcSnapshotRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcSnapshotRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcSnapshotRequest.SwcName)
}
inline std::string* CreateSwcSnapshotRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcSnapshotRequest.SwcName)
  return _s;
}
inline const std::string& CreateSwcSnapshotRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void CreateSwcSnapshotRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcSnapshotRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcSnapshotRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcSnapshotRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void CreateSwcSnapshotRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcSnapshotRequest.SwcName)
}

// -------------------------------------------------------------------

// GetAllSnapshotMetaInfoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllSnapshotMetaInfoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllSnapshotMetaInfoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllSnapshotMetaInfoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllSnapshotMetaInfoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSnapshotMetaInfoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllSnapshotMetaInfoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSnapshotMetaInfoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllSnapshotMetaInfoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllSnapshotMetaInfoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSnapshotMetaInfoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllSnapshotMetaInfoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllSnapshotMetaInfoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSnapshotMetaInfoRequest.metaInfo)
  return _msg;
}
inline void GetAllSnapshotMetaInfoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSnapshotMetaInfoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllSnapshotMetaInfoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllSnapshotMetaInfoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllSnapshotMetaInfoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllSnapshotMetaInfoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSnapshotMetaInfoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllSnapshotMetaInfoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSnapshotMetaInfoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllSnapshotMetaInfoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllSnapshotMetaInfoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSnapshotMetaInfoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllSnapshotMetaInfoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllSnapshotMetaInfoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSnapshotMetaInfoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllSnapshotMetaInfoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSnapshotMetaInfoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetAllSnapshotMetaInfoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetAllSnapshotMetaInfoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSnapshotMetaInfoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAllSnapshotMetaInfoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAllSnapshotMetaInfoRequest.SwcName)
}
inline std::string* GetAllSnapshotMetaInfoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSnapshotMetaInfoRequest.SwcName)
  return _s;
}
inline const std::string& GetAllSnapshotMetaInfoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetAllSnapshotMetaInfoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAllSnapshotMetaInfoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAllSnapshotMetaInfoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetAllSnapshotMetaInfoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetAllSnapshotMetaInfoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSnapshotMetaInfoRequest.SwcName)
}

// -------------------------------------------------------------------

// GetSnapshotRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSnapshotRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSnapshotRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSnapshotRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSnapshotRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSnapshotRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSnapshotRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSnapshotRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSnapshotRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSnapshotRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSnapshotRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSnapshotRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSnapshotRequest.metaInfo)
  return _msg;
}
inline void GetSnapshotRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSnapshotRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSnapshotRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSnapshotRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSnapshotRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSnapshotRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSnapshotRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSnapshotRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSnapshotRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSnapshotRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSnapshotRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSnapshotRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSnapshotRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSnapshotRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSnapshotRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSnapshotRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSnapshotRequest.UserVerifyInfo)
}

// string SwcSnapshotCollectionName = 3;
inline void GetSnapshotRequest::clear_swcsnapshotcollectionname() {
  _impl_.swcsnapshotcollectionname_.ClearToEmpty();
}
inline const std::string& GetSnapshotRequest::swcsnapshotcollectionname() const {
  // @@protoc_insertion_point(field_get:proto.GetSnapshotRequest.SwcSnapshotCollectionName)
  return _internal_swcsnapshotcollectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSnapshotRequest::set_swcsnapshotcollectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcsnapshotcollectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSnapshotRequest.SwcSnapshotCollectionName)
}
inline std::string* GetSnapshotRequest::mutable_swcsnapshotcollectionname() {
  std::string* _s = _internal_mutable_swcsnapshotcollectionname();
  // @@protoc_insertion_point(field_mutable:proto.GetSnapshotRequest.SwcSnapshotCollectionName)
  return _s;
}
inline const std::string& GetSnapshotRequest::_internal_swcsnapshotcollectionname() const {
  return _impl_.swcsnapshotcollectionname_.Get();
}
inline void GetSnapshotRequest::_internal_set_swcsnapshotcollectionname(const std::string& value) {
  
  _impl_.swcsnapshotcollectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSnapshotRequest::_internal_mutable_swcsnapshotcollectionname() {
  
  return _impl_.swcsnapshotcollectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSnapshotRequest::release_swcsnapshotcollectionname() {
  // @@protoc_insertion_point(field_release:proto.GetSnapshotRequest.SwcSnapshotCollectionName)
  return _impl_.swcsnapshotcollectionname_.Release();
}
inline void GetSnapshotRequest::set_allocated_swcsnapshotcollectionname(std::string* swcsnapshotcollectionname) {
  if (swcsnapshotcollectionname != nullptr) {
    
  } else {
    
  }
  _impl_.swcsnapshotcollectionname_.SetAllocated(swcsnapshotcollectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcsnapshotcollectionname_.IsDefault()) {
    _impl_.swcsnapshotcollectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSnapshotRequest.SwcSnapshotCollectionName)
}

// -------------------------------------------------------------------

// GetAllIncrementOperationMetaInfoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllIncrementOperationMetaInfoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllIncrementOperationMetaInfoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllIncrementOperationMetaInfoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllIncrementOperationMetaInfoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllIncrementOperationMetaInfoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllIncrementOperationMetaInfoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllIncrementOperationMetaInfoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllIncrementOperationMetaInfoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllIncrementOperationMetaInfoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllIncrementOperationMetaInfoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllIncrementOperationMetaInfoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllIncrementOperationMetaInfoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllIncrementOperationMetaInfoRequest.metaInfo)
  return _msg;
}
inline void GetAllIncrementOperationMetaInfoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllIncrementOperationMetaInfoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllIncrementOperationMetaInfoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllIncrementOperationMetaInfoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllIncrementOperationMetaInfoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllIncrementOperationMetaInfoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllIncrementOperationMetaInfoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllIncrementOperationMetaInfoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllIncrementOperationMetaInfoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllIncrementOperationMetaInfoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllIncrementOperationMetaInfoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllIncrementOperationMetaInfoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllIncrementOperationMetaInfoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllIncrementOperationMetaInfoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllIncrementOperationMetaInfoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllIncrementOperationMetaInfoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllIncrementOperationMetaInfoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetAllIncrementOperationMetaInfoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetAllIncrementOperationMetaInfoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetAllIncrementOperationMetaInfoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetAllIncrementOperationMetaInfoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetAllIncrementOperationMetaInfoRequest.SwcName)
}
inline std::string* GetAllIncrementOperationMetaInfoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetAllIncrementOperationMetaInfoRequest.SwcName)
  return _s;
}
inline const std::string& GetAllIncrementOperationMetaInfoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetAllIncrementOperationMetaInfoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetAllIncrementOperationMetaInfoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetAllIncrementOperationMetaInfoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetAllIncrementOperationMetaInfoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetAllIncrementOperationMetaInfoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllIncrementOperationMetaInfoRequest.SwcName)
}

// -------------------------------------------------------------------

// GetIncrementOperationRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetIncrementOperationRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetIncrementOperationRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetIncrementOperationRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetIncrementOperationRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetIncrementOperationRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetIncrementOperationRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetIncrementOperationRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetIncrementOperationRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetIncrementOperationRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetIncrementOperationRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetIncrementOperationRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetIncrementOperationRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetIncrementOperationRequest.metaInfo)
  return _msg;
}
inline void GetIncrementOperationRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetIncrementOperationRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetIncrementOperationRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetIncrementOperationRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetIncrementOperationRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetIncrementOperationRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetIncrementOperationRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetIncrementOperationRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetIncrementOperationRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetIncrementOperationRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetIncrementOperationRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetIncrementOperationRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetIncrementOperationRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetIncrementOperationRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetIncrementOperationRequest.UserVerifyInfo)
  return _msg;
}
inline void GetIncrementOperationRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetIncrementOperationRequest.UserVerifyInfo)
}

// string IncrementOperationCollectionName = 3;
inline void GetIncrementOperationRequest::clear_incrementoperationcollectionname() {
  _impl_.incrementoperationcollectionname_.ClearToEmpty();
}
inline const std::string& GetIncrementOperationRequest::incrementoperationcollectionname() const {
  // @@protoc_insertion_point(field_get:proto.GetIncrementOperationRequest.IncrementOperationCollectionName)
  return _internal_incrementoperationcollectionname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetIncrementOperationRequest::set_incrementoperationcollectionname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.incrementoperationcollectionname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetIncrementOperationRequest.IncrementOperationCollectionName)
}
inline std::string* GetIncrementOperationRequest::mutable_incrementoperationcollectionname() {
  std::string* _s = _internal_mutable_incrementoperationcollectionname();
  // @@protoc_insertion_point(field_mutable:proto.GetIncrementOperationRequest.IncrementOperationCollectionName)
  return _s;
}
inline const std::string& GetIncrementOperationRequest::_internal_incrementoperationcollectionname() const {
  return _impl_.incrementoperationcollectionname_.Get();
}
inline void GetIncrementOperationRequest::_internal_set_incrementoperationcollectionname(const std::string& value) {
  
  _impl_.incrementoperationcollectionname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetIncrementOperationRequest::_internal_mutable_incrementoperationcollectionname() {
  
  return _impl_.incrementoperationcollectionname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetIncrementOperationRequest::release_incrementoperationcollectionname() {
  // @@protoc_insertion_point(field_release:proto.GetIncrementOperationRequest.IncrementOperationCollectionName)
  return _impl_.incrementoperationcollectionname_.Release();
}
inline void GetIncrementOperationRequest::set_allocated_incrementoperationcollectionname(std::string* incrementoperationcollectionname) {
  if (incrementoperationcollectionname != nullptr) {
    
  } else {
    
  }
  _impl_.incrementoperationcollectionname_.SetAllocated(incrementoperationcollectionname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.incrementoperationcollectionname_.IsDefault()) {
    _impl_.incrementoperationcollectionname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetIncrementOperationRequest.IncrementOperationCollectionName)
}

// -------------------------------------------------------------------

// CreateSwcNodeDataRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateSwcNodeDataRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateSwcNodeDataRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateSwcNodeDataRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateSwcNodeDataRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcNodeDataRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcNodeDataRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateSwcNodeDataRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.metaInfo)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateSwcNodeDataRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateSwcNodeDataRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateSwcNodeDataRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateSwcNodeDataRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcNodeDataRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcNodeDataRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateSwcNodeDataRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void CreateSwcNodeDataRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& CreateSwcNodeDataRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcNodeDataRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcNodeDataRequest.SwcName)
}
inline std::string* CreateSwcNodeDataRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.SwcName)
  return _s;
}
inline const std::string& CreateSwcNodeDataRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void CreateSwcNodeDataRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcNodeDataRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcNodeDataRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void CreateSwcNodeDataRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.SwcName)
}

// .proto.SwcDataV1 SwcData = 4;
inline bool CreateSwcNodeDataRequest::_internal_has_swcdata() const {
  return this != internal_default_instance() && _impl_.swcdata_ != nullptr;
}
inline bool CreateSwcNodeDataRequest::has_swcdata() const {
  return _internal_has_swcdata();
}
inline const ::proto::SwcDataV1& CreateSwcNodeDataRequest::_internal_swcdata() const {
  const ::proto::SwcDataV1* p = _impl_.swcdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& CreateSwcNodeDataRequest::swcdata() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataRequest.SwcData)
  return _internal_swcdata();
}
inline void CreateSwcNodeDataRequest::unsafe_arena_set_allocated_swcdata(
    ::proto::SwcDataV1* swcdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  _impl_.swcdata_ = swcdata;
  if (swcdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataRequest.SwcData)
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::release_swcdata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::unsafe_arena_release_swcdata() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataRequest.SwcData)
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::_internal_mutable_swcdata() {
  
  if (_impl_.swcdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcdata_ = p;
  }
  return _impl_.swcdata_;
}
inline ::proto::SwcDataV1* CreateSwcNodeDataRequest::mutable_swcdata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcdata();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataRequest.SwcData)
  return _msg;
}
inline void CreateSwcNodeDataRequest::set_allocated_swcdata(::proto::SwcDataV1* swcdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  if (swcdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcdata));
    if (message_arena != submessage_arena) {
      swcdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcdata_ = swcdata;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataRequest.SwcData)
}

// -------------------------------------------------------------------

// DeleteSwcNodeDataRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcNodeDataRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcNodeDataRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcNodeDataRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteSwcNodeDataRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcNodeDataRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcNodeDataRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcNodeDataRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.metaInfo)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteSwcNodeDataRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcNodeDataRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcNodeDataRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteSwcNodeDataRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcNodeDataRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcNodeDataRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcNodeDataRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void DeleteSwcNodeDataRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& DeleteSwcNodeDataRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcNodeDataRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcNodeDataRequest.SwcName)
}
inline std::string* DeleteSwcNodeDataRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.SwcName)
  return _s;
}
inline const std::string& DeleteSwcNodeDataRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void DeleteSwcNodeDataRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcNodeDataRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcNodeDataRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void DeleteSwcNodeDataRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.SwcName)
}

// .proto.SwcDataV1 SwcData = 4;
inline bool DeleteSwcNodeDataRequest::_internal_has_swcdata() const {
  return this != internal_default_instance() && _impl_.swcdata_ != nullptr;
}
inline bool DeleteSwcNodeDataRequest::has_swcdata() const {
  return _internal_has_swcdata();
}
inline const ::proto::SwcDataV1& DeleteSwcNodeDataRequest::_internal_swcdata() const {
  const ::proto::SwcDataV1* p = _impl_.swcdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& DeleteSwcNodeDataRequest::swcdata() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataRequest.SwcData)
  return _internal_swcdata();
}
inline void DeleteSwcNodeDataRequest::unsafe_arena_set_allocated_swcdata(
    ::proto::SwcDataV1* swcdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  _impl_.swcdata_ = swcdata;
  if (swcdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataRequest.SwcData)
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::release_swcdata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::unsafe_arena_release_swcdata() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataRequest.SwcData)
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::_internal_mutable_swcdata() {
  
  if (_impl_.swcdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcdata_ = p;
  }
  return _impl_.swcdata_;
}
inline ::proto::SwcDataV1* DeleteSwcNodeDataRequest::mutable_swcdata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcdata();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataRequest.SwcData)
  return _msg;
}
inline void DeleteSwcNodeDataRequest::set_allocated_swcdata(::proto::SwcDataV1* swcdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  if (swcdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcdata));
    if (message_arena != submessage_arena) {
      swcdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcdata_ = swcdata;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataRequest.SwcData)
}

// -------------------------------------------------------------------

// UpdateSwcNodeDataRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcNodeDataRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcNodeDataRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcNodeDataRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateSwcNodeDataRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcNodeDataRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcNodeDataRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcNodeDataRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.metaInfo)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateSwcNodeDataRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcNodeDataRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcNodeDataRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateSwcNodeDataRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcNodeDataRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcNodeDataRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcNodeDataRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void UpdateSwcNodeDataRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& UpdateSwcNodeDataRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSwcNodeDataRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateSwcNodeDataRequest.SwcName)
}
inline std::string* UpdateSwcNodeDataRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.SwcName)
  return _s;
}
inline const std::string& UpdateSwcNodeDataRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void UpdateSwcNodeDataRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSwcNodeDataRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSwcNodeDataRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void UpdateSwcNodeDataRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.SwcName)
}

// .proto.SwcDataV1 SwcData = 4;
inline bool UpdateSwcNodeDataRequest::_internal_has_swcdata() const {
  return this != internal_default_instance() && _impl_.swcdata_ != nullptr;
}
inline bool UpdateSwcNodeDataRequest::has_swcdata() const {
  return _internal_has_swcdata();
}
inline const ::proto::SwcDataV1& UpdateSwcNodeDataRequest::_internal_swcdata() const {
  const ::proto::SwcDataV1* p = _impl_.swcdata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& UpdateSwcNodeDataRequest::swcdata() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataRequest.SwcData)
  return _internal_swcdata();
}
inline void UpdateSwcNodeDataRequest::unsafe_arena_set_allocated_swcdata(
    ::proto::SwcDataV1* swcdata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  _impl_.swcdata_ = swcdata;
  if (swcdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataRequest.SwcData)
}
inline ::proto::SwcDataV1* UpdateSwcNodeDataRequest::release_swcdata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* UpdateSwcNodeDataRequest::unsafe_arena_release_swcdata() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataRequest.SwcData)
  
  ::proto::SwcDataV1* temp = _impl_.swcdata_;
  _impl_.swcdata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* UpdateSwcNodeDataRequest::_internal_mutable_swcdata() {
  
  if (_impl_.swcdata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcdata_ = p;
  }
  return _impl_.swcdata_;
}
inline ::proto::SwcDataV1* UpdateSwcNodeDataRequest::mutable_swcdata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcdata();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataRequest.SwcData)
  return _msg;
}
inline void UpdateSwcNodeDataRequest::set_allocated_swcdata(::proto::SwcDataV1* swcdata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcdata_);
  }
  if (swcdata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcdata));
    if (message_arena != submessage_arena) {
      swcdata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcdata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcdata_ = swcdata;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataRequest.SwcData)
}

// -------------------------------------------------------------------

// GetSwcNodeDataRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcNodeDataRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcNodeDataRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcNodeDataRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.metaInfo)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcNodeDataRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcNodeDataRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcNodeDataRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcNodeDataRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcNodeDataRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcNodeDataRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcNodeDataRequest.SwcName)
}
inline std::string* GetSwcNodeDataRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcNodeDataRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcNodeDataRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcNodeDataRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.SwcName)
}

// .proto.SwcDataV1 SwcNodeData = 4;
inline bool GetSwcNodeDataRequest::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcNodeDataRequest::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSwcNodeDataRequest::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSwcNodeDataRequest::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataRequest.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcNodeDataRequest::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataRequest.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataRequest.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSwcNodeDataRequest::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataRequest.SwcNodeData)
  return _msg;
}
inline void GetSwcNodeDataRequest::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataRequest.SwcNodeData)
}

// -------------------------------------------------------------------

// GetSwcFullNodeDataRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcFullNodeDataRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcFullNodeDataRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcFullNodeDataRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcFullNodeDataRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcFullNodeDataRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcFullNodeDataRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcFullNodeDataRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcFullNodeDataRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcFullNodeDataRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataRequest.metaInfo)
  return _msg;
}
inline void GetSwcFullNodeDataRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcFullNodeDataRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcFullNodeDataRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcFullNodeDataRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcFullNodeDataRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcFullNodeDataRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcFullNodeDataRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcFullNodeDataRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcFullNodeDataRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcFullNodeDataRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcFullNodeDataRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcFullNodeDataRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcFullNodeDataRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcFullNodeDataRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcFullNodeDataRequest.SwcName)
}
inline std::string* GetSwcFullNodeDataRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcFullNodeDataRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcFullNodeDataRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcFullNodeDataRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcFullNodeDataRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcFullNodeDataRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataRequest.SwcName)
}

// -------------------------------------------------------------------

// GetSwcNodeDataListByTimeAndUserRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcNodeDataListByTimeAndUserRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcNodeDataListByTimeAndUserRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.metaInfo)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcNodeDataListByTimeAndUserRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcNodeDataListByTimeAndUserRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataListByTimeAndUserRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcNodeDataListByTimeAndUserRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcNodeDataListByTimeAndUserRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcNodeDataListByTimeAndUserRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcName)
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.SwcName)
}

// .google.protobuf.Timestamp StartTime = 4;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_starttime() const {
  return this != internal_default_instance() && _impl_.starttime_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_starttime() const {
  return _internal_has_starttime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::_internal_starttime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.starttime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::starttime() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.StartTime)
  return _internal_starttime();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_starttime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* starttime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starttime_);
  }
  _impl_.starttime_ = starttime;
  if (starttime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.StartTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::release_starttime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.StartTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.starttime_;
  _impl_.starttime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_starttime() {
  
  if (_impl_.starttime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.starttime_ = p;
  }
  return _impl_.starttime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::mutable_starttime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_starttime();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.StartTime)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_starttime(::PROTOBUF_NAMESPACE_ID::Timestamp* starttime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.starttime_);
  }
  if (starttime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(starttime));
    if (message_arena != submessage_arena) {
      starttime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, starttime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.starttime_ = starttime;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.StartTime)
}

// .google.protobuf.Timestamp EndTime = 5;
inline bool GetSwcNodeDataListByTimeAndUserRequest::_internal_has_endtime() const {
  return this != internal_default_instance() && _impl_.endtime_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserRequest::has_endtime() const {
  return _internal_has_endtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::_internal_endtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.endtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& GetSwcNodeDataListByTimeAndUserRequest::endtime() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.EndTime)
  return _internal_endtime();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_set_allocated_endtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* endtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endtime_);
  }
  _impl_.endtime_ = endtime;
  if (endtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.EndTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::release_endtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.endtime_;
  _impl_.endtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.EndTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.endtime_;
  _impl_.endtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_endtime() {
  
  if (_impl_.endtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.endtime_ = p;
  }
  return _impl_.endtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* GetSwcNodeDataListByTimeAndUserRequest::mutable_endtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_endtime();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.EndTime)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_endtime(::PROTOBUF_NAMESPACE_ID::Timestamp* endtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endtime_);
  }
  if (endtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endtime));
    if (message_arena != submessage_arena) {
      endtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.endtime_ = endtime;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.EndTime)
}

// string UserName = 6;
inline void GetSwcNodeDataListByTimeAndUserRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::username() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserRequest.UserName)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcNodeDataListByTimeAndUserRequest::set_username(ArgT0&& arg0, ArgT... args) {
 
 _impl_.username_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcNodeDataListByTimeAndUserRequest.UserName)
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserRequest.UserName)
  return _s;
}
inline const std::string& GetSwcNodeDataListByTimeAndUserRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::_internal_set_username(const std::string& value) {
  
  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::_internal_mutable_username() {
  
  return _impl_.username_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcNodeDataListByTimeAndUserRequest::release_username() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserRequest.UserName)
  return _impl_.username_.Release();
}
inline void GetSwcNodeDataListByTimeAndUserRequest::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  _impl_.username_.SetAllocated(username, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.username_.IsDefault()) {
    _impl_.username_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserRequest.UserName)
}

// -------------------------------------------------------------------

// BackupFullDatabaseRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool BackupFullDatabaseRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool BackupFullDatabaseRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& BackupFullDatabaseRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& BackupFullDatabaseRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.metaInfo)
  return _internal_metainfo();
}
inline void BackupFullDatabaseRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BackupFullDatabaseRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* BackupFullDatabaseRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* BackupFullDatabaseRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.BackupFullDatabaseRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* BackupFullDatabaseRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* BackupFullDatabaseRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.BackupFullDatabaseRequest.metaInfo)
  return _msg;
}
inline void BackupFullDatabaseRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.BackupFullDatabaseRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool BackupFullDatabaseRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool BackupFullDatabaseRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& BackupFullDatabaseRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& BackupFullDatabaseRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void BackupFullDatabaseRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BackupFullDatabaseRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* BackupFullDatabaseRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* BackupFullDatabaseRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.BackupFullDatabaseRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* BackupFullDatabaseRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* BackupFullDatabaseRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.BackupFullDatabaseRequest.UserVerifyInfo)
  return _msg;
}
inline void BackupFullDatabaseRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.BackupFullDatabaseRequest.UserVerifyInfo)
}

// bool InstantBackup = 3;
inline void BackupFullDatabaseRequest::clear_instantbackup() {
  _impl_.instantbackup_ = false;
}
inline bool BackupFullDatabaseRequest::_internal_instantbackup() const {
  return _impl_.instantbackup_;
}
inline bool BackupFullDatabaseRequest::instantbackup() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.InstantBackup)
  return _internal_instantbackup();
}
inline void BackupFullDatabaseRequest::_internal_set_instantbackup(bool value) {
  
  _impl_.instantbackup_ = value;
}
inline void BackupFullDatabaseRequest::set_instantbackup(bool value) {
  _internal_set_instantbackup(value);
  // @@protoc_insertion_point(field_set:proto.BackupFullDatabaseRequest.InstantBackup)
}

// .google.protobuf.Timestamp DelayBackupTime = 4;
inline bool BackupFullDatabaseRequest::_internal_has_delaybackuptime() const {
  return this != internal_default_instance() && _impl_.delaybackuptime_ != nullptr;
}
inline bool BackupFullDatabaseRequest::has_delaybackuptime() const {
  return _internal_has_delaybackuptime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupFullDatabaseRequest::_internal_delaybackuptime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.delaybackuptime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& BackupFullDatabaseRequest::delaybackuptime() const {
  // @@protoc_insertion_point(field_get:proto.BackupFullDatabaseRequest.DelayBackupTime)
  return _internal_delaybackuptime();
}
inline void BackupFullDatabaseRequest::unsafe_arena_set_allocated_delaybackuptime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delaybackuptime_);
  }
  _impl_.delaybackuptime_ = delaybackuptime;
  if (delaybackuptime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.BackupFullDatabaseRequest.DelayBackupTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::release_delaybackuptime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delaybackuptime_;
  _impl_.delaybackuptime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::unsafe_arena_release_delaybackuptime() {
  // @@protoc_insertion_point(field_release:proto.BackupFullDatabaseRequest.DelayBackupTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.delaybackuptime_;
  _impl_.delaybackuptime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::_internal_mutable_delaybackuptime() {
  
  if (_impl_.delaybackuptime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.delaybackuptime_ = p;
  }
  return _impl_.delaybackuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* BackupFullDatabaseRequest::mutable_delaybackuptime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_delaybackuptime();
  // @@protoc_insertion_point(field_mutable:proto.BackupFullDatabaseRequest.DelayBackupTime)
  return _msg;
}
inline void BackupFullDatabaseRequest::set_allocated_delaybackuptime(::PROTOBUF_NAMESPACE_ID::Timestamp* delaybackuptime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delaybackuptime_);
  }
  if (delaybackuptime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delaybackuptime));
    if (message_arena != submessage_arena) {
      delaybackuptime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delaybackuptime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.delaybackuptime_ = delaybackuptime;
  // @@protoc_insertion_point(field_set_allocated:proto.BackupFullDatabaseRequest.DelayBackupTime)
}

// -------------------------------------------------------------------

// CreateDailyStatisticsRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateDailyStatisticsRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateDailyStatisticsRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateDailyStatisticsRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateDailyStatisticsRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateDailyStatisticsRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateDailyStatisticsRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateDailyStatisticsRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateDailyStatisticsRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateDailyStatisticsRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsRequest.metaInfo)
  return _msg;
}
inline void CreateDailyStatisticsRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateDailyStatisticsRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateDailyStatisticsRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateDailyStatisticsRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateDailyStatisticsRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateDailyStatisticsRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateDailyStatisticsRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateDailyStatisticsRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateDailyStatisticsRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateDailyStatisticsRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateDailyStatisticsRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsRequest.UserVerifyInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 3;
inline bool CreateDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool CreateDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void CreateDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void CreateDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// DeleteDailyStatisticsRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteDailyStatisticsRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteDailyStatisticsRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteDailyStatisticsRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteDailyStatisticsRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteDailyStatisticsRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteDailyStatisticsRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteDailyStatisticsRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteDailyStatisticsRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteDailyStatisticsRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsRequest.metaInfo)
  return _msg;
}
inline void DeleteDailyStatisticsRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteDailyStatisticsRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteDailyStatisticsRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteDailyStatisticsRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteDailyStatisticsRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteDailyStatisticsRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteDailyStatisticsRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteDailyStatisticsRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteDailyStatisticsRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteDailyStatisticsRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteDailyStatisticsRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsRequest.UserVerifyInfo)
}

// string DailyStatisticsName = 3;
inline void DeleteDailyStatisticsRequest::clear_dailystatisticsname() {
  _impl_.dailystatisticsname_.ClearToEmpty();
}
inline const std::string& DeleteDailyStatisticsRequest::dailystatisticsname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsRequest.DailyStatisticsName)
  return _internal_dailystatisticsname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteDailyStatisticsRequest::set_dailystatisticsname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dailystatisticsname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteDailyStatisticsRequest.DailyStatisticsName)
}
inline std::string* DeleteDailyStatisticsRequest::mutable_dailystatisticsname() {
  std::string* _s = _internal_mutable_dailystatisticsname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsRequest.DailyStatisticsName)
  return _s;
}
inline const std::string& DeleteDailyStatisticsRequest::_internal_dailystatisticsname() const {
  return _impl_.dailystatisticsname_.Get();
}
inline void DeleteDailyStatisticsRequest::_internal_set_dailystatisticsname(const std::string& value) {
  
  _impl_.dailystatisticsname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteDailyStatisticsRequest::_internal_mutable_dailystatisticsname() {
  
  return _impl_.dailystatisticsname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteDailyStatisticsRequest::release_dailystatisticsname() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsRequest.DailyStatisticsName)
  return _impl_.dailystatisticsname_.Release();
}
inline void DeleteDailyStatisticsRequest::set_allocated_dailystatisticsname(std::string* dailystatisticsname) {
  if (dailystatisticsname != nullptr) {
    
  } else {
    
  }
  _impl_.dailystatisticsname_.SetAllocated(dailystatisticsname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dailystatisticsname_.IsDefault()) {
    _impl_.dailystatisticsname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsRequest.DailyStatisticsName)
}

// -------------------------------------------------------------------

// UpdateDailyStatisticsRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateDailyStatisticsRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateDailyStatisticsRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateDailyStatisticsRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateDailyStatisticsRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateDailyStatisticsRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateDailyStatisticsRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateDailyStatisticsRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateDailyStatisticsRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateDailyStatisticsRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsRequest.metaInfo)
  return _msg;
}
inline void UpdateDailyStatisticsRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateDailyStatisticsRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateDailyStatisticsRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateDailyStatisticsRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateDailyStatisticsRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateDailyStatisticsRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateDailyStatisticsRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateDailyStatisticsRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateDailyStatisticsRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateDailyStatisticsRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateDailyStatisticsRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsRequest.UserVerifyInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 3;
inline bool UpdateDailyStatisticsRequest::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool UpdateDailyStatisticsRequest::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsRequest::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsRequest::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void UpdateDailyStatisticsRequest::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsRequest::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
  return _msg;
}
inline void UpdateDailyStatisticsRequest::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsRequest.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// GetDailyStatisticsRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetDailyStatisticsRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetDailyStatisticsRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetDailyStatisticsRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetDailyStatisticsRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetDailyStatisticsRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetDailyStatisticsRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetDailyStatisticsRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetDailyStatisticsRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetDailyStatisticsRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsRequest.metaInfo)
  return _msg;
}
inline void GetDailyStatisticsRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetDailyStatisticsRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetDailyStatisticsRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetDailyStatisticsRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetDailyStatisticsRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetDailyStatisticsRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetDailyStatisticsRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetDailyStatisticsRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetDailyStatisticsRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetDailyStatisticsRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsRequest.UserVerifyInfo)
  return _msg;
}
inline void GetDailyStatisticsRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsRequest.UserVerifyInfo)
}

// string DailyStatisticsName = 3;
inline void GetDailyStatisticsRequest::clear_dailystatisticsname() {
  _impl_.dailystatisticsname_.ClearToEmpty();
}
inline const std::string& GetDailyStatisticsRequest::dailystatisticsname() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsRequest.DailyStatisticsName)
  return _internal_dailystatisticsname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetDailyStatisticsRequest::set_dailystatisticsname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.dailystatisticsname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetDailyStatisticsRequest.DailyStatisticsName)
}
inline std::string* GetDailyStatisticsRequest::mutable_dailystatisticsname() {
  std::string* _s = _internal_mutable_dailystatisticsname();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsRequest.DailyStatisticsName)
  return _s;
}
inline const std::string& GetDailyStatisticsRequest::_internal_dailystatisticsname() const {
  return _impl_.dailystatisticsname_.Get();
}
inline void GetDailyStatisticsRequest::_internal_set_dailystatisticsname(const std::string& value) {
  
  _impl_.dailystatisticsname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetDailyStatisticsRequest::_internal_mutable_dailystatisticsname() {
  
  return _impl_.dailystatisticsname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetDailyStatisticsRequest::release_dailystatisticsname() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsRequest.DailyStatisticsName)
  return _impl_.dailystatisticsname_.Release();
}
inline void GetDailyStatisticsRequest::set_allocated_dailystatisticsname(std::string* dailystatisticsname) {
  if (dailystatisticsname != nullptr) {
    
  } else {
    
  }
  _impl_.dailystatisticsname_.SetAllocated(dailystatisticsname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.dailystatisticsname_.IsDefault()) {
    _impl_.dailystatisticsname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsRequest.DailyStatisticsName)
}

// -------------------------------------------------------------------

// GetAllDailyStatisticsRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetAllDailyStatisticsRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllDailyStatisticsRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetAllDailyStatisticsRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetAllDailyStatisticsRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllDailyStatisticsRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetAllDailyStatisticsRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllDailyStatisticsRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetAllDailyStatisticsRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllDailyStatisticsRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllDailyStatisticsRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetAllDailyStatisticsRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetAllDailyStatisticsRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllDailyStatisticsRequest.metaInfo)
  return _msg;
}
inline void GetAllDailyStatisticsRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllDailyStatisticsRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetAllDailyStatisticsRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetAllDailyStatisticsRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetAllDailyStatisticsRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetAllDailyStatisticsRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllDailyStatisticsRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetAllDailyStatisticsRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllDailyStatisticsRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetAllDailyStatisticsRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllDailyStatisticsRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllDailyStatisticsRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetAllDailyStatisticsRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetAllDailyStatisticsRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllDailyStatisticsRequest.UserVerifyInfo)
  return _msg;
}
inline void GetAllDailyStatisticsRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllDailyStatisticsRequest.UserVerifyInfo)
}

// -------------------------------------------------------------------

// CreateSwcAttachmentAnoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateSwcAttachmentAnoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcAttachmentAnoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateSwcAttachmentAnoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateSwcAttachmentAnoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentAnoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentAnoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentAnoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentAnoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentAnoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoRequest.metaInfo)
  return _msg;
}
inline void CreateSwcAttachmentAnoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateSwcAttachmentAnoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateSwcAttachmentAnoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateSwcAttachmentAnoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateSwcAttachmentAnoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentAnoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentAnoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentAnoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentAnoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentAnoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateSwcAttachmentAnoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void CreateSwcAttachmentAnoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& CreateSwcAttachmentAnoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcAttachmentAnoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcAttachmentAnoRequest.SwcName)
}
inline std::string* CreateSwcAttachmentAnoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoRequest.SwcName)
  return _s;
}
inline const std::string& CreateSwcAttachmentAnoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void CreateSwcAttachmentAnoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentAnoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentAnoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void CreateSwcAttachmentAnoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoRequest.SwcName)
}

// .proto.SwcAttachmentAnoV1 SwcAttachmentAno = 4;
inline bool CreateSwcAttachmentAnoRequest::_internal_has_swcattachmentano() const {
  return this != internal_default_instance() && _impl_.swcattachmentano_ != nullptr;
}
inline bool CreateSwcAttachmentAnoRequest::has_swcattachmentano() const {
  return _internal_has_swcattachmentano();
}
inline const ::proto::SwcAttachmentAnoV1& CreateSwcAttachmentAnoRequest::_internal_swcattachmentano() const {
  const ::proto::SwcAttachmentAnoV1* p = _impl_.swcattachmentano_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcAttachmentAnoV1&>(
      ::proto::_SwcAttachmentAnoV1_default_instance_);
}
inline const ::proto::SwcAttachmentAnoV1& CreateSwcAttachmentAnoRequest::swcattachmentano() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoRequest.SwcAttachmentAno)
  return _internal_swcattachmentano();
}
inline void CreateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_swcattachmentano(
    ::proto::SwcAttachmentAnoV1* swcattachmentano) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentano_);
  }
  _impl_.swcattachmentano_ = swcattachmentano;
  if (swcattachmentano) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentAnoRequest.SwcAttachmentAno)
}
inline ::proto::SwcAttachmentAnoV1* CreateSwcAttachmentAnoRequest::release_swcattachmentano() {
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.swcattachmentano_;
  _impl_.swcattachmentano_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* CreateSwcAttachmentAnoRequest::unsafe_arena_release_swcattachmentano() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoRequest.SwcAttachmentAno)
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.swcattachmentano_;
  _impl_.swcattachmentano_ = nullptr;
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* CreateSwcAttachmentAnoRequest::_internal_mutable_swcattachmentano() {
  
  if (_impl_.swcattachmentano_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcAttachmentAnoV1>(GetArenaForAllocation());
    _impl_.swcattachmentano_ = p;
  }
  return _impl_.swcattachmentano_;
}
inline ::proto::SwcAttachmentAnoV1* CreateSwcAttachmentAnoRequest::mutable_swcattachmentano() {
  ::proto::SwcAttachmentAnoV1* _msg = _internal_mutable_swcattachmentano();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoRequest.SwcAttachmentAno)
  return _msg;
}
inline void CreateSwcAttachmentAnoRequest::set_allocated_swcattachmentano(::proto::SwcAttachmentAnoV1* swcattachmentano) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentano_);
  }
  if (swcattachmentano) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcattachmentano));
    if (message_arena != submessage_arena) {
      swcattachmentano = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcattachmentano, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcattachmentano_ = swcattachmentano;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoRequest.SwcAttachmentAno)
}

// -------------------------------------------------------------------

// DeleteSwcAttachmentAnoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcAttachmentAnoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcAttachmentAnoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcAttachmentAnoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcAttachmentAnoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentAnoRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcAttachmentAnoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentAnoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentAnoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentAnoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentAnoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentAnoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentAnoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentAnoRequest.metaInfo)
  return _msg;
}
inline void DeleteSwcAttachmentAnoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentAnoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteSwcAttachmentAnoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteSwcAttachmentAnoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcAttachmentAnoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcAttachmentAnoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentAnoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteSwcAttachmentAnoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentAnoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentAnoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentAnoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentAnoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentAnoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentAnoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentAnoRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteSwcAttachmentAnoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentAnoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void DeleteSwcAttachmentAnoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& DeleteSwcAttachmentAnoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentAnoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcAttachmentAnoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcAttachmentAnoRequest.SwcName)
}
inline std::string* DeleteSwcAttachmentAnoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentAnoRequest.SwcName)
  return _s;
}
inline const std::string& DeleteSwcAttachmentAnoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void DeleteSwcAttachmentAnoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentAnoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentAnoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentAnoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void DeleteSwcAttachmentAnoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentAnoRequest.SwcName)
}

// string AnoAttachmentUuid = 4;
inline void DeleteSwcAttachmentAnoRequest::clear_anoattachmentuuid() {
  _impl_.anoattachmentuuid_.ClearToEmpty();
}
inline const std::string& DeleteSwcAttachmentAnoRequest::anoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _internal_anoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcAttachmentAnoRequest::set_anoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcAttachmentAnoRequest.AnoAttachmentUuid)
}
inline std::string* DeleteSwcAttachmentAnoRequest::mutable_anoattachmentuuid() {
  std::string* _s = _internal_mutable_anoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _s;
}
inline const std::string& DeleteSwcAttachmentAnoRequest::_internal_anoattachmentuuid() const {
  return _impl_.anoattachmentuuid_.Get();
}
inline void DeleteSwcAttachmentAnoRequest::_internal_set_anoattachmentuuid(const std::string& value) {
  
  _impl_.anoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentAnoRequest::_internal_mutable_anoattachmentuuid() {
  
  return _impl_.anoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentAnoRequest::release_anoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _impl_.anoattachmentuuid_.Release();
}
inline void DeleteSwcAttachmentAnoRequest::set_allocated_anoattachmentuuid(std::string* anoattachmentuuid) {
  if (anoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.anoattachmentuuid_.SetAllocated(anoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anoattachmentuuid_.IsDefault()) {
    _impl_.anoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentAnoRequest.AnoAttachmentUuid)
}

// -------------------------------------------------------------------

// UpdateSwcAttachmentAnoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcAttachmentAnoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcAttachmentAnoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcAttachmentAnoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcAttachmentAnoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentAnoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentAnoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentAnoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentAnoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentAnoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoRequest.metaInfo)
  return _msg;
}
inline void UpdateSwcAttachmentAnoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateSwcAttachmentAnoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateSwcAttachmentAnoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcAttachmentAnoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcAttachmentAnoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentAnoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentAnoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentAnoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentAnoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentAnoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateSwcAttachmentAnoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void UpdateSwcAttachmentAnoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& UpdateSwcAttachmentAnoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSwcAttachmentAnoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateSwcAttachmentAnoRequest.SwcName)
}
inline std::string* UpdateSwcAttachmentAnoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoRequest.SwcName)
  return _s;
}
inline const std::string& UpdateSwcAttachmentAnoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void UpdateSwcAttachmentAnoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentAnoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentAnoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void UpdateSwcAttachmentAnoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoRequest.SwcName)
}

// string AnoAttachmentUuid = 4;
inline void UpdateSwcAttachmentAnoRequest::clear_anoattachmentuuid() {
  _impl_.anoattachmentuuid_.ClearToEmpty();
}
inline const std::string& UpdateSwcAttachmentAnoRequest::anoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _internal_anoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSwcAttachmentAnoRequest::set_anoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateSwcAttachmentAnoRequest.AnoAttachmentUuid)
}
inline std::string* UpdateSwcAttachmentAnoRequest::mutable_anoattachmentuuid() {
  std::string* _s = _internal_mutable_anoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _s;
}
inline const std::string& UpdateSwcAttachmentAnoRequest::_internal_anoattachmentuuid() const {
  return _impl_.anoattachmentuuid_.Get();
}
inline void UpdateSwcAttachmentAnoRequest::_internal_set_anoattachmentuuid(const std::string& value) {
  
  _impl_.anoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentAnoRequest::_internal_mutable_anoattachmentuuid() {
  
  return _impl_.anoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentAnoRequest::release_anoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _impl_.anoattachmentuuid_.Release();
}
inline void UpdateSwcAttachmentAnoRequest::set_allocated_anoattachmentuuid(std::string* anoattachmentuuid) {
  if (anoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.anoattachmentuuid_.SetAllocated(anoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anoattachmentuuid_.IsDefault()) {
    _impl_.anoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoRequest.AnoAttachmentUuid)
}

// .proto.SwcAttachmentAnoV1 NewSwcAttachmentAno = 5;
inline bool UpdateSwcAttachmentAnoRequest::_internal_has_newswcattachmentano() const {
  return this != internal_default_instance() && _impl_.newswcattachmentano_ != nullptr;
}
inline bool UpdateSwcAttachmentAnoRequest::has_newswcattachmentano() const {
  return _internal_has_newswcattachmentano();
}
inline const ::proto::SwcAttachmentAnoV1& UpdateSwcAttachmentAnoRequest::_internal_newswcattachmentano() const {
  const ::proto::SwcAttachmentAnoV1* p = _impl_.newswcattachmentano_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcAttachmentAnoV1&>(
      ::proto::_SwcAttachmentAnoV1_default_instance_);
}
inline const ::proto::SwcAttachmentAnoV1& UpdateSwcAttachmentAnoRequest::newswcattachmentano() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoRequest.NewSwcAttachmentAno)
  return _internal_newswcattachmentano();
}
inline void UpdateSwcAttachmentAnoRequest::unsafe_arena_set_allocated_newswcattachmentano(
    ::proto::SwcAttachmentAnoV1* newswcattachmentano) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newswcattachmentano_);
  }
  _impl_.newswcattachmentano_ = newswcattachmentano;
  if (newswcattachmentano) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentAnoRequest.NewSwcAttachmentAno)
}
inline ::proto::SwcAttachmentAnoV1* UpdateSwcAttachmentAnoRequest::release_newswcattachmentano() {
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.newswcattachmentano_;
  _impl_.newswcattachmentano_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* UpdateSwcAttachmentAnoRequest::unsafe_arena_release_newswcattachmentano() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoRequest.NewSwcAttachmentAno)
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.newswcattachmentano_;
  _impl_.newswcattachmentano_ = nullptr;
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* UpdateSwcAttachmentAnoRequest::_internal_mutable_newswcattachmentano() {
  
  if (_impl_.newswcattachmentano_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcAttachmentAnoV1>(GetArenaForAllocation());
    _impl_.newswcattachmentano_ = p;
  }
  return _impl_.newswcattachmentano_;
}
inline ::proto::SwcAttachmentAnoV1* UpdateSwcAttachmentAnoRequest::mutable_newswcattachmentano() {
  ::proto::SwcAttachmentAnoV1* _msg = _internal_mutable_newswcattachmentano();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoRequest.NewSwcAttachmentAno)
  return _msg;
}
inline void UpdateSwcAttachmentAnoRequest::set_allocated_newswcattachmentano(::proto::SwcAttachmentAnoV1* newswcattachmentano) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.newswcattachmentano_);
  }
  if (newswcattachmentano) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(newswcattachmentano));
    if (message_arena != submessage_arena) {
      newswcattachmentano = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, newswcattachmentano, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.newswcattachmentano_ = newswcattachmentano;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoRequest.NewSwcAttachmentAno)
}

// -------------------------------------------------------------------

// GetSwcAttachmentAnoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcAttachmentAnoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcAttachmentAnoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcAttachmentAnoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcAttachmentAnoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcAttachmentAnoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentAnoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentAnoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentAnoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentAnoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentAnoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoRequest.metaInfo)
  return _msg;
}
inline void GetSwcAttachmentAnoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcAttachmentAnoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcAttachmentAnoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcAttachmentAnoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcAttachmentAnoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcAttachmentAnoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentAnoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentAnoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentAnoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentAnoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentAnoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcAttachmentAnoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcAttachmentAnoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcAttachmentAnoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcAttachmentAnoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcAttachmentAnoRequest.SwcName)
}
inline std::string* GetSwcAttachmentAnoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcAttachmentAnoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcAttachmentAnoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentAnoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentAnoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcAttachmentAnoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoRequest.SwcName)
}

// string AnoAttachmentUuid = 4;
inline void GetSwcAttachmentAnoRequest::clear_anoattachmentuuid() {
  _impl_.anoattachmentuuid_.ClearToEmpty();
}
inline const std::string& GetSwcAttachmentAnoRequest::anoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _internal_anoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcAttachmentAnoRequest::set_anoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcAttachmentAnoRequest.AnoAttachmentUuid)
}
inline std::string* GetSwcAttachmentAnoRequest::mutable_anoattachmentuuid() {
  std::string* _s = _internal_mutable_anoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _s;
}
inline const std::string& GetSwcAttachmentAnoRequest::_internal_anoattachmentuuid() const {
  return _impl_.anoattachmentuuid_.Get();
}
inline void GetSwcAttachmentAnoRequest::_internal_set_anoattachmentuuid(const std::string& value) {
  
  _impl_.anoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentAnoRequest::_internal_mutable_anoattachmentuuid() {
  
  return _impl_.anoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentAnoRequest::release_anoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoRequest.AnoAttachmentUuid)
  return _impl_.anoattachmentuuid_.Release();
}
inline void GetSwcAttachmentAnoRequest::set_allocated_anoattachmentuuid(std::string* anoattachmentuuid) {
  if (anoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.anoattachmentuuid_.SetAllocated(anoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anoattachmentuuid_.IsDefault()) {
    _impl_.anoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoRequest.AnoAttachmentUuid)
}

// -------------------------------------------------------------------

// CreateSwcAttachmentApoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool CreateSwcAttachmentApoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcAttachmentApoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& CreateSwcAttachmentApoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& CreateSwcAttachmentApoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoRequest.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcAttachmentApoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentApoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentApoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentApoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentApoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentApoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* CreateSwcAttachmentApoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoRequest.metaInfo)
  return _msg;
}
inline void CreateSwcAttachmentApoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentApoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool CreateSwcAttachmentApoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool CreateSwcAttachmentApoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& CreateSwcAttachmentApoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& CreateSwcAttachmentApoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void CreateSwcAttachmentApoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentApoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentApoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentApoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentApoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentApoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* CreateSwcAttachmentApoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoRequest.UserVerifyInfo)
  return _msg;
}
inline void CreateSwcAttachmentApoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentApoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void CreateSwcAttachmentApoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& CreateSwcAttachmentApoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcAttachmentApoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcAttachmentApoRequest.SwcName)
}
inline std::string* CreateSwcAttachmentApoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoRequest.SwcName)
  return _s;
}
inline const std::string& CreateSwcAttachmentApoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void CreateSwcAttachmentApoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentApoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentApoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentApoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void CreateSwcAttachmentApoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentApoRequest.SwcName)
}

// repeated .proto.SwcAttachmentApoV1 SwcAttachmentApo = 4;
inline int CreateSwcAttachmentApoRequest::_internal_swcattachmentapo_size() const {
  return _impl_.swcattachmentapo_.size();
}
inline int CreateSwcAttachmentApoRequest::swcattachmentapo_size() const {
  return _internal_swcattachmentapo_size();
}
inline ::proto::SwcAttachmentApoV1* CreateSwcAttachmentApoRequest::mutable_swcattachmentapo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoRequest.SwcAttachmentApo)
  return _impl_.swcattachmentapo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
CreateSwcAttachmentApoRequest::mutable_swcattachmentapo() {
  // @@protoc_insertion_point(field_mutable_list:proto.CreateSwcAttachmentApoRequest.SwcAttachmentApo)
  return &_impl_.swcattachmentapo_;
}
inline const ::proto::SwcAttachmentApoV1& CreateSwcAttachmentApoRequest::_internal_swcattachmentapo(int index) const {
  return _impl_.swcattachmentapo_.Get(index);
}
inline const ::proto::SwcAttachmentApoV1& CreateSwcAttachmentApoRequest::swcattachmentapo(int index) const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoRequest.SwcAttachmentApo)
  return _internal_swcattachmentapo(index);
}
inline ::proto::SwcAttachmentApoV1* CreateSwcAttachmentApoRequest::_internal_add_swcattachmentapo() {
  return _impl_.swcattachmentapo_.Add();
}
inline ::proto::SwcAttachmentApoV1* CreateSwcAttachmentApoRequest::add_swcattachmentapo() {
  ::proto::SwcAttachmentApoV1* _add = _internal_add_swcattachmentapo();
  // @@protoc_insertion_point(field_add:proto.CreateSwcAttachmentApoRequest.SwcAttachmentApo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
CreateSwcAttachmentApoRequest::swcattachmentapo() const {
  // @@protoc_insertion_point(field_list:proto.CreateSwcAttachmentApoRequest.SwcAttachmentApo)
  return _impl_.swcattachmentapo_;
}

// -------------------------------------------------------------------

// DeleteSwcAttachmentApoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcAttachmentApoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcAttachmentApoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcAttachmentApoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& DeleteSwcAttachmentApoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentApoRequest.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcAttachmentApoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentApoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentApoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentApoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentApoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentApoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* DeleteSwcAttachmentApoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentApoRequest.metaInfo)
  return _msg;
}
inline void DeleteSwcAttachmentApoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentApoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool DeleteSwcAttachmentApoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool DeleteSwcAttachmentApoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcAttachmentApoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& DeleteSwcAttachmentApoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentApoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void DeleteSwcAttachmentApoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentApoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentApoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentApoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentApoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentApoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* DeleteSwcAttachmentApoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentApoRequest.UserVerifyInfo)
  return _msg;
}
inline void DeleteSwcAttachmentApoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentApoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void DeleteSwcAttachmentApoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& DeleteSwcAttachmentApoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentApoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcAttachmentApoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcAttachmentApoRequest.SwcName)
}
inline std::string* DeleteSwcAttachmentApoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentApoRequest.SwcName)
  return _s;
}
inline const std::string& DeleteSwcAttachmentApoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void DeleteSwcAttachmentApoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentApoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentApoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentApoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void DeleteSwcAttachmentApoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentApoRequest.SwcName)
}

// string ApoAttachmentUuid = 4;
inline void DeleteSwcAttachmentApoRequest::clear_apoattachmentuuid() {
  _impl_.apoattachmentuuid_.ClearToEmpty();
}
inline const std::string& DeleteSwcAttachmentApoRequest::apoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _internal_apoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteSwcAttachmentApoRequest::set_apoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.DeleteSwcAttachmentApoRequest.ApoAttachmentUuid)
}
inline std::string* DeleteSwcAttachmentApoRequest::mutable_apoattachmentuuid() {
  std::string* _s = _internal_mutable_apoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _s;
}
inline const std::string& DeleteSwcAttachmentApoRequest::_internal_apoattachmentuuid() const {
  return _impl_.apoattachmentuuid_.Get();
}
inline void DeleteSwcAttachmentApoRequest::_internal_set_apoattachmentuuid(const std::string& value) {
  
  _impl_.apoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentApoRequest::_internal_mutable_apoattachmentuuid() {
  
  return _impl_.apoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* DeleteSwcAttachmentApoRequest::release_apoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _impl_.apoattachmentuuid_.Release();
}
inline void DeleteSwcAttachmentApoRequest::set_allocated_apoattachmentuuid(std::string* apoattachmentuuid) {
  if (apoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.apoattachmentuuid_.SetAllocated(apoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apoattachmentuuid_.IsDefault()) {
    _impl_.apoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentApoRequest.ApoAttachmentUuid)
}

// -------------------------------------------------------------------

// UpdateSwcAttachmentApoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcAttachmentApoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcAttachmentApoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcAttachmentApoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& UpdateSwcAttachmentApoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoRequest.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcAttachmentApoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentApoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentApoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentApoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentApoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentApoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* UpdateSwcAttachmentApoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoRequest.metaInfo)
  return _msg;
}
inline void UpdateSwcAttachmentApoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentApoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UpdateSwcAttachmentApoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UpdateSwcAttachmentApoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcAttachmentApoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UpdateSwcAttachmentApoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UpdateSwcAttachmentApoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentApoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentApoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentApoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentApoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentApoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UpdateSwcAttachmentApoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoRequest.UserVerifyInfo)
  return _msg;
}
inline void UpdateSwcAttachmentApoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentApoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void UpdateSwcAttachmentApoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& UpdateSwcAttachmentApoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSwcAttachmentApoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateSwcAttachmentApoRequest.SwcName)
}
inline std::string* UpdateSwcAttachmentApoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoRequest.SwcName)
  return _s;
}
inline const std::string& UpdateSwcAttachmentApoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void UpdateSwcAttachmentApoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentApoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentApoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentApoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void UpdateSwcAttachmentApoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentApoRequest.SwcName)
}

// string ApoAttachmentUuid = 4;
inline void UpdateSwcAttachmentApoRequest::clear_apoattachmentuuid() {
  _impl_.apoattachmentuuid_.ClearToEmpty();
}
inline const std::string& UpdateSwcAttachmentApoRequest::apoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _internal_apoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateSwcAttachmentApoRequest::set_apoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.UpdateSwcAttachmentApoRequest.ApoAttachmentUuid)
}
inline std::string* UpdateSwcAttachmentApoRequest::mutable_apoattachmentuuid() {
  std::string* _s = _internal_mutable_apoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _s;
}
inline const std::string& UpdateSwcAttachmentApoRequest::_internal_apoattachmentuuid() const {
  return _impl_.apoattachmentuuid_.Get();
}
inline void UpdateSwcAttachmentApoRequest::_internal_set_apoattachmentuuid(const std::string& value) {
  
  _impl_.apoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentApoRequest::_internal_mutable_apoattachmentuuid() {
  
  return _impl_.apoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdateSwcAttachmentApoRequest::release_apoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _impl_.apoattachmentuuid_.Release();
}
inline void UpdateSwcAttachmentApoRequest::set_allocated_apoattachmentuuid(std::string* apoattachmentuuid) {
  if (apoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.apoattachmentuuid_.SetAllocated(apoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apoattachmentuuid_.IsDefault()) {
    _impl_.apoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentApoRequest.ApoAttachmentUuid)
}

// repeated .proto.SwcAttachmentApoV1 NewSwcAttachmentApo = 5;
inline int UpdateSwcAttachmentApoRequest::_internal_newswcattachmentapo_size() const {
  return _impl_.newswcattachmentapo_.size();
}
inline int UpdateSwcAttachmentApoRequest::newswcattachmentapo_size() const {
  return _internal_newswcattachmentapo_size();
}
inline ::proto::SwcAttachmentApoV1* UpdateSwcAttachmentApoRequest::mutable_newswcattachmentapo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoRequest.NewSwcAttachmentApo)
  return _impl_.newswcattachmentapo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
UpdateSwcAttachmentApoRequest::mutable_newswcattachmentapo() {
  // @@protoc_insertion_point(field_mutable_list:proto.UpdateSwcAttachmentApoRequest.NewSwcAttachmentApo)
  return &_impl_.newswcattachmentapo_;
}
inline const ::proto::SwcAttachmentApoV1& UpdateSwcAttachmentApoRequest::_internal_newswcattachmentapo(int index) const {
  return _impl_.newswcattachmentapo_.Get(index);
}
inline const ::proto::SwcAttachmentApoV1& UpdateSwcAttachmentApoRequest::newswcattachmentapo(int index) const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoRequest.NewSwcAttachmentApo)
  return _internal_newswcattachmentapo(index);
}
inline ::proto::SwcAttachmentApoV1* UpdateSwcAttachmentApoRequest::_internal_add_newswcattachmentapo() {
  return _impl_.newswcattachmentapo_.Add();
}
inline ::proto::SwcAttachmentApoV1* UpdateSwcAttachmentApoRequest::add_newswcattachmentapo() {
  ::proto::SwcAttachmentApoV1* _add = _internal_add_newswcattachmentapo();
  // @@protoc_insertion_point(field_add:proto.UpdateSwcAttachmentApoRequest.NewSwcAttachmentApo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
UpdateSwcAttachmentApoRequest::newswcattachmentapo() const {
  // @@protoc_insertion_point(field_list:proto.UpdateSwcAttachmentApoRequest.NewSwcAttachmentApo)
  return _impl_.newswcattachmentapo_;
}

// -------------------------------------------------------------------

// GetSwcAttachmentApoRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool GetSwcAttachmentApoRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcAttachmentApoRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& GetSwcAttachmentApoRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& GetSwcAttachmentApoRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoRequest.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcAttachmentApoRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentApoRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentApoRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentApoRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentApoRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentApoRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* GetSwcAttachmentApoRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoRequest.metaInfo)
  return _msg;
}
inline void GetSwcAttachmentApoRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentApoRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool GetSwcAttachmentApoRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool GetSwcAttachmentApoRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& GetSwcAttachmentApoRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& GetSwcAttachmentApoRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void GetSwcAttachmentApoRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentApoRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentApoRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentApoRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentApoRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentApoRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* GetSwcAttachmentApoRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoRequest.UserVerifyInfo)
  return _msg;
}
inline void GetSwcAttachmentApoRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentApoRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void GetSwcAttachmentApoRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& GetSwcAttachmentApoRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcAttachmentApoRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcAttachmentApoRequest.SwcName)
}
inline std::string* GetSwcAttachmentApoRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoRequest.SwcName)
  return _s;
}
inline const std::string& GetSwcAttachmentApoRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void GetSwcAttachmentApoRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentApoRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentApoRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentApoRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void GetSwcAttachmentApoRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentApoRequest.SwcName)
}

// string ApoAttachmentUuid = 4;
inline void GetSwcAttachmentApoRequest::clear_apoattachmentuuid() {
  _impl_.apoattachmentuuid_.ClearToEmpty();
}
inline const std::string& GetSwcAttachmentApoRequest::apoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _internal_apoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetSwcAttachmentApoRequest::set_apoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.GetSwcAttachmentApoRequest.ApoAttachmentUuid)
}
inline std::string* GetSwcAttachmentApoRequest::mutable_apoattachmentuuid() {
  std::string* _s = _internal_mutable_apoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _s;
}
inline const std::string& GetSwcAttachmentApoRequest::_internal_apoattachmentuuid() const {
  return _impl_.apoattachmentuuid_.Get();
}
inline void GetSwcAttachmentApoRequest::_internal_set_apoattachmentuuid(const std::string& value) {
  
  _impl_.apoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentApoRequest::_internal_mutable_apoattachmentuuid() {
  
  return _impl_.apoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* GetSwcAttachmentApoRequest::release_apoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentApoRequest.ApoAttachmentUuid)
  return _impl_.apoattachmentuuid_.Release();
}
inline void GetSwcAttachmentApoRequest::set_allocated_apoattachmentuuid(std::string* apoattachmentuuid) {
  if (apoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.apoattachmentuuid_.SetAllocated(apoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apoattachmentuuid_.IsDefault()) {
    _impl_.apoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentApoRequest.ApoAttachmentUuid)
}

// -------------------------------------------------------------------

// RevertSwcVersionRequest

// .proto.RequestMetaInfoV1 metaInfo = 1;
inline bool RevertSwcVersionRequest::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool RevertSwcVersionRequest::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::RequestMetaInfoV1& RevertSwcVersionRequest::_internal_metainfo() const {
  const ::proto::RequestMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::RequestMetaInfoV1&>(
      ::proto::_RequestMetaInfoV1_default_instance_);
}
inline const ::proto::RequestMetaInfoV1& RevertSwcVersionRequest::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.RevertSwcVersionRequest.metaInfo)
  return _internal_metainfo();
}
inline void RevertSwcVersionRequest::unsafe_arena_set_allocated_metainfo(
    ::proto::RequestMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RevertSwcVersionRequest.metaInfo)
}
inline ::proto::RequestMetaInfoV1* RevertSwcVersionRequest::release_metainfo() {
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::RequestMetaInfoV1* RevertSwcVersionRequest::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.RevertSwcVersionRequest.metaInfo)
  
  ::proto::RequestMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::RequestMetaInfoV1* RevertSwcVersionRequest::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::RequestMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::RequestMetaInfoV1* RevertSwcVersionRequest::mutable_metainfo() {
  ::proto::RequestMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.RevertSwcVersionRequest.metaInfo)
  return _msg;
}
inline void RevertSwcVersionRequest::set_allocated_metainfo(::proto::RequestMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.RevertSwcVersionRequest.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool RevertSwcVersionRequest::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool RevertSwcVersionRequest::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& RevertSwcVersionRequest::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& RevertSwcVersionRequest::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.RevertSwcVersionRequest.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void RevertSwcVersionRequest::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RevertSwcVersionRequest.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* RevertSwcVersionRequest::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* RevertSwcVersionRequest::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.RevertSwcVersionRequest.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* RevertSwcVersionRequest::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* RevertSwcVersionRequest::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.RevertSwcVersionRequest.UserVerifyInfo)
  return _msg;
}
inline void RevertSwcVersionRequest::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.RevertSwcVersionRequest.UserVerifyInfo)
}

// string SwcName = 3;
inline void RevertSwcVersionRequest::clear_swcname() {
  _impl_.swcname_.ClearToEmpty();
}
inline const std::string& RevertSwcVersionRequest::swcname() const {
  // @@protoc_insertion_point(field_get:proto.RevertSwcVersionRequest.SwcName)
  return _internal_swcname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RevertSwcVersionRequest::set_swcname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.swcname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.RevertSwcVersionRequest.SwcName)
}
inline std::string* RevertSwcVersionRequest::mutable_swcname() {
  std::string* _s = _internal_mutable_swcname();
  // @@protoc_insertion_point(field_mutable:proto.RevertSwcVersionRequest.SwcName)
  return _s;
}
inline const std::string& RevertSwcVersionRequest::_internal_swcname() const {
  return _impl_.swcname_.Get();
}
inline void RevertSwcVersionRequest::_internal_set_swcname(const std::string& value) {
  
  _impl_.swcname_.Set(value, GetArenaForAllocation());
}
inline std::string* RevertSwcVersionRequest::_internal_mutable_swcname() {
  
  return _impl_.swcname_.Mutable(GetArenaForAllocation());
}
inline std::string* RevertSwcVersionRequest::release_swcname() {
  // @@protoc_insertion_point(field_release:proto.RevertSwcVersionRequest.SwcName)
  return _impl_.swcname_.Release();
}
inline void RevertSwcVersionRequest::set_allocated_swcname(std::string* swcname) {
  if (swcname != nullptr) {
    
  } else {
    
  }
  _impl_.swcname_.SetAllocated(swcname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.swcname_.IsDefault()) {
    _impl_.swcname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.RevertSwcVersionRequest.SwcName)
}

// .google.protobuf.Timestamp VersionEndTime = 4;
inline bool RevertSwcVersionRequest::_internal_has_versionendtime() const {
  return this != internal_default_instance() && _impl_.versionendtime_ != nullptr;
}
inline bool RevertSwcVersionRequest::has_versionendtime() const {
  return _internal_has_versionendtime();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RevertSwcVersionRequest::_internal_versionendtime() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.versionendtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& RevertSwcVersionRequest::versionendtime() const {
  // @@protoc_insertion_point(field_get:proto.RevertSwcVersionRequest.VersionEndTime)
  return _internal_versionendtime();
}
inline void RevertSwcVersionRequest::unsafe_arena_set_allocated_versionendtime(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* versionendtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versionendtime_);
  }
  _impl_.versionendtime_ = versionendtime;
  if (versionendtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RevertSwcVersionRequest.VersionEndTime)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RevertSwcVersionRequest::release_versionendtime() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.versionendtime_;
  _impl_.versionendtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RevertSwcVersionRequest::unsafe_arena_release_versionendtime() {
  // @@protoc_insertion_point(field_release:proto.RevertSwcVersionRequest.VersionEndTime)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.versionendtime_;
  _impl_.versionendtime_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RevertSwcVersionRequest::_internal_mutable_versionendtime() {
  
  if (_impl_.versionendtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.versionendtime_ = p;
  }
  return _impl_.versionendtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* RevertSwcVersionRequest::mutable_versionendtime() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_versionendtime();
  // @@protoc_insertion_point(field_mutable:proto.RevertSwcVersionRequest.VersionEndTime)
  return _msg;
}
inline void RevertSwcVersionRequest::set_allocated_versionendtime(::PROTOBUF_NAMESPACE_ID::Timestamp* versionendtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.versionendtime_);
  }
  if (versionendtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(versionendtime));
    if (message_arena != submessage_arena) {
      versionendtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, versionendtime, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.versionendtime_ = versionendtime;
  // @@protoc_insertion_point(field_set_allocated:proto.RevertSwcVersionRequest.VersionEndTime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2fRequest_2eproto
