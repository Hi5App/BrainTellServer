// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message/Response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2fResponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2fResponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "Message/Message.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2fResponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2fResponse_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2fResponse_2eproto;
namespace proto {
class ChangeUserPermissionGroupResponse;
struct ChangeUserPermissionGroupResponseDefaultTypeInternal;
extern ChangeUserPermissionGroupResponseDefaultTypeInternal _ChangeUserPermissionGroupResponse_default_instance_;
class CreateDailyStatisticsResponse;
struct CreateDailyStatisticsResponseDefaultTypeInternal;
extern CreateDailyStatisticsResponseDefaultTypeInternal _CreateDailyStatisticsResponse_default_instance_;
class CreateProjectResponse;
struct CreateProjectResponseDefaultTypeInternal;
extern CreateProjectResponseDefaultTypeInternal _CreateProjectResponse_default_instance_;
class CreateSwcAttachmentAnoResponse;
struct CreateSwcAttachmentAnoResponseDefaultTypeInternal;
extern CreateSwcAttachmentAnoResponseDefaultTypeInternal _CreateSwcAttachmentAnoResponse_default_instance_;
class CreateSwcAttachmentApoResponse;
struct CreateSwcAttachmentApoResponseDefaultTypeInternal;
extern CreateSwcAttachmentApoResponseDefaultTypeInternal _CreateSwcAttachmentApoResponse_default_instance_;
class CreateSwcNodeDataResponse;
struct CreateSwcNodeDataResponseDefaultTypeInternal;
extern CreateSwcNodeDataResponseDefaultTypeInternal _CreateSwcNodeDataResponse_default_instance_;
class CreateSwcResponse;
struct CreateSwcResponseDefaultTypeInternal;
extern CreateSwcResponseDefaultTypeInternal _CreateSwcResponse_default_instance_;
class CreateSwcSnapshotResponse;
struct CreateSwcSnapshotResponseDefaultTypeInternal;
extern CreateSwcSnapshotResponseDefaultTypeInternal _CreateSwcSnapshotResponse_default_instance_;
class CreateUserResponse;
struct CreateUserResponseDefaultTypeInternal;
extern CreateUserResponseDefaultTypeInternal _CreateUserResponse_default_instance_;
class DeleteDailyStatisticsResponse;
struct DeleteDailyStatisticsResponseDefaultTypeInternal;
extern DeleteDailyStatisticsResponseDefaultTypeInternal _DeleteDailyStatisticsResponse_default_instance_;
class DeleteProjectResponse;
struct DeleteProjectResponseDefaultTypeInternal;
extern DeleteProjectResponseDefaultTypeInternal _DeleteProjectResponse_default_instance_;
class DeleteSwcAttachmentAnoResponse;
struct DeleteSwcAttachmentAnoResponseDefaultTypeInternal;
extern DeleteSwcAttachmentAnoResponseDefaultTypeInternal _DeleteSwcAttachmentAnoResponse_default_instance_;
class DeleteSwcAttachmentApoResponse;
struct DeleteSwcAttachmentApoResponseDefaultTypeInternal;
extern DeleteSwcAttachmentApoResponseDefaultTypeInternal _DeleteSwcAttachmentApoResponse_default_instance_;
class DeleteSwcNodeDataResponse;
struct DeleteSwcNodeDataResponseDefaultTypeInternal;
extern DeleteSwcNodeDataResponseDefaultTypeInternal _DeleteSwcNodeDataResponse_default_instance_;
class DeleteSwcResponse;
struct DeleteSwcResponseDefaultTypeInternal;
extern DeleteSwcResponseDefaultTypeInternal _DeleteSwcResponse_default_instance_;
class DeleteUserResponse;
struct DeleteUserResponseDefaultTypeInternal;
extern DeleteUserResponseDefaultTypeInternal _DeleteUserResponse_default_instance_;
class GetAllDailyStatisticsResponse;
struct GetAllDailyStatisticsResponseDefaultTypeInternal;
extern GetAllDailyStatisticsResponseDefaultTypeInternal _GetAllDailyStatisticsResponse_default_instance_;
class GetAllIncrementOperationMetaInfoResponse;
struct GetAllIncrementOperationMetaInfoResponseDefaultTypeInternal;
extern GetAllIncrementOperationMetaInfoResponseDefaultTypeInternal _GetAllIncrementOperationMetaInfoResponse_default_instance_;
class GetAllPermissionGroupResponse;
struct GetAllPermissionGroupResponseDefaultTypeInternal;
extern GetAllPermissionGroupResponseDefaultTypeInternal _GetAllPermissionGroupResponse_default_instance_;
class GetAllProjectResponse;
struct GetAllProjectResponseDefaultTypeInternal;
extern GetAllProjectResponseDefaultTypeInternal _GetAllProjectResponse_default_instance_;
class GetAllSnapshotMetaInfoResponse;
struct GetAllSnapshotMetaInfoResponseDefaultTypeInternal;
extern GetAllSnapshotMetaInfoResponseDefaultTypeInternal _GetAllSnapshotMetaInfoResponse_default_instance_;
class GetAllSwcMetaInfoResponse;
struct GetAllSwcMetaInfoResponseDefaultTypeInternal;
extern GetAllSwcMetaInfoResponseDefaultTypeInternal _GetAllSwcMetaInfoResponse_default_instance_;
class GetAllUserResponse;
struct GetAllUserResponseDefaultTypeInternal;
extern GetAllUserResponseDefaultTypeInternal _GetAllUserResponse_default_instance_;
class GetDailyStatisticsResponse;
struct GetDailyStatisticsResponseDefaultTypeInternal;
extern GetDailyStatisticsResponseDefaultTypeInternal _GetDailyStatisticsResponse_default_instance_;
class GetIncrementOperationResponse;
struct GetIncrementOperationResponseDefaultTypeInternal;
extern GetIncrementOperationResponseDefaultTypeInternal _GetIncrementOperationResponse_default_instance_;
class GetPermissionGroupResponse;
struct GetPermissionGroupResponseDefaultTypeInternal;
extern GetPermissionGroupResponseDefaultTypeInternal _GetPermissionGroupResponse_default_instance_;
class GetProjectResponse;
struct GetProjectResponseDefaultTypeInternal;
extern GetProjectResponseDefaultTypeInternal _GetProjectResponse_default_instance_;
class GetSnapshotResponse;
struct GetSnapshotResponseDefaultTypeInternal;
extern GetSnapshotResponseDefaultTypeInternal _GetSnapshotResponse_default_instance_;
class GetSwcAttachmentAnoResponse;
struct GetSwcAttachmentAnoResponseDefaultTypeInternal;
extern GetSwcAttachmentAnoResponseDefaultTypeInternal _GetSwcAttachmentAnoResponse_default_instance_;
class GetSwcAttachmentApoResponse;
struct GetSwcAttachmentApoResponseDefaultTypeInternal;
extern GetSwcAttachmentApoResponseDefaultTypeInternal _GetSwcAttachmentApoResponse_default_instance_;
class GetSwcFullNodeDataResponse;
struct GetSwcFullNodeDataResponseDefaultTypeInternal;
extern GetSwcFullNodeDataResponseDefaultTypeInternal _GetSwcFullNodeDataResponse_default_instance_;
class GetSwcMetaInfoResponse;
struct GetSwcMetaInfoResponseDefaultTypeInternal;
extern GetSwcMetaInfoResponseDefaultTypeInternal _GetSwcMetaInfoResponse_default_instance_;
class GetSwcNodeDataListByTimeAndUserResponse;
struct GetSwcNodeDataListByTimeAndUserResponseDefaultTypeInternal;
extern GetSwcNodeDataListByTimeAndUserResponseDefaultTypeInternal _GetSwcNodeDataListByTimeAndUserResponse_default_instance_;
class GetSwcNodeDataResponse;
struct GetSwcNodeDataResponseDefaultTypeInternal;
extern GetSwcNodeDataResponseDefaultTypeInternal _GetSwcNodeDataResponse_default_instance_;
class GetUserPermissionGroupResponse;
struct GetUserPermissionGroupResponseDefaultTypeInternal;
extern GetUserPermissionGroupResponseDefaultTypeInternal _GetUserPermissionGroupResponse_default_instance_;
class GetUserResponse;
struct GetUserResponseDefaultTypeInternal;
extern GetUserResponseDefaultTypeInternal _GetUserResponse_default_instance_;
class RevertSwcVersionResponse;
struct RevertSwcVersionResponseDefaultTypeInternal;
extern RevertSwcVersionResponseDefaultTypeInternal _RevertSwcVersionResponse_default_instance_;
class UpdateDailyStatisticsResponse;
struct UpdateDailyStatisticsResponseDefaultTypeInternal;
extern UpdateDailyStatisticsResponseDefaultTypeInternal _UpdateDailyStatisticsResponse_default_instance_;
class UpdateProjectResponse;
struct UpdateProjectResponseDefaultTypeInternal;
extern UpdateProjectResponseDefaultTypeInternal _UpdateProjectResponse_default_instance_;
class UpdateSwcAttachmentAnoResponse;
struct UpdateSwcAttachmentAnoResponseDefaultTypeInternal;
extern UpdateSwcAttachmentAnoResponseDefaultTypeInternal _UpdateSwcAttachmentAnoResponse_default_instance_;
class UpdateSwcAttachmentApoResponse;
struct UpdateSwcAttachmentApoResponseDefaultTypeInternal;
extern UpdateSwcAttachmentApoResponseDefaultTypeInternal _UpdateSwcAttachmentApoResponse_default_instance_;
class UpdateSwcNodeDataResponse;
struct UpdateSwcNodeDataResponseDefaultTypeInternal;
extern UpdateSwcNodeDataResponseDefaultTypeInternal _UpdateSwcNodeDataResponse_default_instance_;
class UpdateSwcResponse;
struct UpdateSwcResponseDefaultTypeInternal;
extern UpdateSwcResponseDefaultTypeInternal _UpdateSwcResponse_default_instance_;
class UpdateUserResponse;
struct UpdateUserResponseDefaultTypeInternal;
extern UpdateUserResponseDefaultTypeInternal _UpdateUserResponse_default_instance_;
class UserLoginResponse;
struct UserLoginResponseDefaultTypeInternal;
extern UserLoginResponseDefaultTypeInternal _UserLoginResponse_default_instance_;
class UserLogoutResponse;
struct UserLogoutResponseDefaultTypeInternal;
extern UserLogoutResponseDefaultTypeInternal _UserLogoutResponse_default_instance_;
class UserOnlineHeartBeatResponse;
struct UserOnlineHeartBeatResponseDefaultTypeInternal;
extern UserOnlineHeartBeatResponseDefaultTypeInternal _UserOnlineHeartBeatResponse_default_instance_;
}  // namespace proto
PROTOBUF_NAMESPACE_OPEN
template<> ::proto::ChangeUserPermissionGroupResponse* Arena::CreateMaybeMessage<::proto::ChangeUserPermissionGroupResponse>(Arena*);
template<> ::proto::CreateDailyStatisticsResponse* Arena::CreateMaybeMessage<::proto::CreateDailyStatisticsResponse>(Arena*);
template<> ::proto::CreateProjectResponse* Arena::CreateMaybeMessage<::proto::CreateProjectResponse>(Arena*);
template<> ::proto::CreateSwcAttachmentAnoResponse* Arena::CreateMaybeMessage<::proto::CreateSwcAttachmentAnoResponse>(Arena*);
template<> ::proto::CreateSwcAttachmentApoResponse* Arena::CreateMaybeMessage<::proto::CreateSwcAttachmentApoResponse>(Arena*);
template<> ::proto::CreateSwcNodeDataResponse* Arena::CreateMaybeMessage<::proto::CreateSwcNodeDataResponse>(Arena*);
template<> ::proto::CreateSwcResponse* Arena::CreateMaybeMessage<::proto::CreateSwcResponse>(Arena*);
template<> ::proto::CreateSwcSnapshotResponse* Arena::CreateMaybeMessage<::proto::CreateSwcSnapshotResponse>(Arena*);
template<> ::proto::CreateUserResponse* Arena::CreateMaybeMessage<::proto::CreateUserResponse>(Arena*);
template<> ::proto::DeleteDailyStatisticsResponse* Arena::CreateMaybeMessage<::proto::DeleteDailyStatisticsResponse>(Arena*);
template<> ::proto::DeleteProjectResponse* Arena::CreateMaybeMessage<::proto::DeleteProjectResponse>(Arena*);
template<> ::proto::DeleteSwcAttachmentAnoResponse* Arena::CreateMaybeMessage<::proto::DeleteSwcAttachmentAnoResponse>(Arena*);
template<> ::proto::DeleteSwcAttachmentApoResponse* Arena::CreateMaybeMessage<::proto::DeleteSwcAttachmentApoResponse>(Arena*);
template<> ::proto::DeleteSwcNodeDataResponse* Arena::CreateMaybeMessage<::proto::DeleteSwcNodeDataResponse>(Arena*);
template<> ::proto::DeleteSwcResponse* Arena::CreateMaybeMessage<::proto::DeleteSwcResponse>(Arena*);
template<> ::proto::DeleteUserResponse* Arena::CreateMaybeMessage<::proto::DeleteUserResponse>(Arena*);
template<> ::proto::GetAllDailyStatisticsResponse* Arena::CreateMaybeMessage<::proto::GetAllDailyStatisticsResponse>(Arena*);
template<> ::proto::GetAllIncrementOperationMetaInfoResponse* Arena::CreateMaybeMessage<::proto::GetAllIncrementOperationMetaInfoResponse>(Arena*);
template<> ::proto::GetAllPermissionGroupResponse* Arena::CreateMaybeMessage<::proto::GetAllPermissionGroupResponse>(Arena*);
template<> ::proto::GetAllProjectResponse* Arena::CreateMaybeMessage<::proto::GetAllProjectResponse>(Arena*);
template<> ::proto::GetAllSnapshotMetaInfoResponse* Arena::CreateMaybeMessage<::proto::GetAllSnapshotMetaInfoResponse>(Arena*);
template<> ::proto::GetAllSwcMetaInfoResponse* Arena::CreateMaybeMessage<::proto::GetAllSwcMetaInfoResponse>(Arena*);
template<> ::proto::GetAllUserResponse* Arena::CreateMaybeMessage<::proto::GetAllUserResponse>(Arena*);
template<> ::proto::GetDailyStatisticsResponse* Arena::CreateMaybeMessage<::proto::GetDailyStatisticsResponse>(Arena*);
template<> ::proto::GetIncrementOperationResponse* Arena::CreateMaybeMessage<::proto::GetIncrementOperationResponse>(Arena*);
template<> ::proto::GetPermissionGroupResponse* Arena::CreateMaybeMessage<::proto::GetPermissionGroupResponse>(Arena*);
template<> ::proto::GetProjectResponse* Arena::CreateMaybeMessage<::proto::GetProjectResponse>(Arena*);
template<> ::proto::GetSnapshotResponse* Arena::CreateMaybeMessage<::proto::GetSnapshotResponse>(Arena*);
template<> ::proto::GetSwcAttachmentAnoResponse* Arena::CreateMaybeMessage<::proto::GetSwcAttachmentAnoResponse>(Arena*);
template<> ::proto::GetSwcAttachmentApoResponse* Arena::CreateMaybeMessage<::proto::GetSwcAttachmentApoResponse>(Arena*);
template<> ::proto::GetSwcFullNodeDataResponse* Arena::CreateMaybeMessage<::proto::GetSwcFullNodeDataResponse>(Arena*);
template<> ::proto::GetSwcMetaInfoResponse* Arena::CreateMaybeMessage<::proto::GetSwcMetaInfoResponse>(Arena*);
template<> ::proto::GetSwcNodeDataListByTimeAndUserResponse* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataListByTimeAndUserResponse>(Arena*);
template<> ::proto::GetSwcNodeDataResponse* Arena::CreateMaybeMessage<::proto::GetSwcNodeDataResponse>(Arena*);
template<> ::proto::GetUserPermissionGroupResponse* Arena::CreateMaybeMessage<::proto::GetUserPermissionGroupResponse>(Arena*);
template<> ::proto::GetUserResponse* Arena::CreateMaybeMessage<::proto::GetUserResponse>(Arena*);
template<> ::proto::RevertSwcVersionResponse* Arena::CreateMaybeMessage<::proto::RevertSwcVersionResponse>(Arena*);
template<> ::proto::UpdateDailyStatisticsResponse* Arena::CreateMaybeMessage<::proto::UpdateDailyStatisticsResponse>(Arena*);
template<> ::proto::UpdateProjectResponse* Arena::CreateMaybeMessage<::proto::UpdateProjectResponse>(Arena*);
template<> ::proto::UpdateSwcAttachmentAnoResponse* Arena::CreateMaybeMessage<::proto::UpdateSwcAttachmentAnoResponse>(Arena*);
template<> ::proto::UpdateSwcAttachmentApoResponse* Arena::CreateMaybeMessage<::proto::UpdateSwcAttachmentApoResponse>(Arena*);
template<> ::proto::UpdateSwcNodeDataResponse* Arena::CreateMaybeMessage<::proto::UpdateSwcNodeDataResponse>(Arena*);
template<> ::proto::UpdateSwcResponse* Arena::CreateMaybeMessage<::proto::UpdateSwcResponse>(Arena*);
template<> ::proto::UpdateUserResponse* Arena::CreateMaybeMessage<::proto::UpdateUserResponse>(Arena*);
template<> ::proto::UserLoginResponse* Arena::CreateMaybeMessage<::proto::UserLoginResponse>(Arena*);
template<> ::proto::UserLogoutResponse* Arena::CreateMaybeMessage<::proto::UserLogoutResponse>(Arena*);
template<> ::proto::UserOnlineHeartBeatResponse* Arena::CreateMaybeMessage<::proto::UserOnlineHeartBeatResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace proto {

// ===================================================================

class CreateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateUserResponse) */ {
 public:
  inline CreateUserResponse() : CreateUserResponse(nullptr) {}
  ~CreateUserResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserResponse(const CreateUserResponse& from);
  CreateUserResponse(CreateUserResponse&& from) noexcept
    : CreateUserResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserResponse& operator=(const CreateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserResponse& operator=(CreateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserResponse*>(
               &_CreateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUserResponse& a, CreateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUserResponse& from) {
    CreateUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateUserResponse";
  }
  protected:
  explicit CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserMetaInfoV1 UserInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteUserResponse) */ {
 public:
  inline DeleteUserResponse() : DeleteUserResponse(nullptr) {}
  ~DeleteUserResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserResponse(const DeleteUserResponse& from);
  DeleteUserResponse(DeleteUserResponse&& from) noexcept
    : DeleteUserResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserResponse& operator=(const DeleteUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserResponse& operator=(DeleteUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserResponse*>(
               &_DeleteUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeleteUserResponse& a, DeleteUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteUserResponse& from) {
    DeleteUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteUserResponse";
  }
  protected:
  explicit DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateUserResponse) */ {
 public:
  inline UpdateUserResponse() : UpdateUserResponse(nullptr) {}
  ~UpdateUserResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUserResponse(const UpdateUserResponse& from);
  UpdateUserResponse(UpdateUserResponse&& from) noexcept
    : UpdateUserResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUserResponse& operator=(const UpdateUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUserResponse& operator=(UpdateUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUserResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUserResponse*>(
               &_UpdateUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateUserResponse& a, UpdateUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateUserResponse& from) {
    UpdateUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateUserResponse";
  }
  protected:
  explicit UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserMetaInfoV1 UserInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserResponse) */ {
 public:
  inline GetUserResponse() : GetUserResponse(nullptr) {}
  ~GetUserResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserResponse(const GetUserResponse& from);
  GetUserResponse(GetUserResponse&& from) noexcept
    : GetUserResponse() {
    *this = ::std::move(from);
  }

  inline GetUserResponse& operator=(const GetUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserResponse& operator=(GetUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserResponse*>(
               &_GetUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUserResponse& a, GetUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserResponse& from) {
    GetUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserResponse";
  }
  protected:
  explicit GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserMetaInfoV1 UserInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // @@protoc_insertion_point(class_scope:proto.GetUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllUserResponse) */ {
 public:
  inline GetAllUserResponse() : GetAllUserResponse(nullptr) {}
  ~GetAllUserResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllUserResponse(const GetAllUserResponse& from);
  GetAllUserResponse(GetAllUserResponse&& from) noexcept
    : GetAllUserResponse() {
    *this = ::std::move(from);
  }

  inline GetAllUserResponse& operator=(const GetAllUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllUserResponse& operator=(GetAllUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllUserResponse*>(
               &_GetAllUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetAllUserResponse& a, GetAllUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllUserResponse& from) {
    GetAllUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllUserResponse";
  }
  protected:
  explicit GetAllUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserInfoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.UserMetaInfoV1 UserInfo = 2;
  int userinfo_size() const;
  private:
  int _internal_userinfo_size() const;
  public:
  void clear_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMetaInfoV1 >*
      mutable_userinfo();
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo(int index) const;
  ::proto::UserMetaInfoV1* _internal_add_userinfo();
  public:
  const ::proto::UserMetaInfoV1& userinfo(int index) const;
  ::proto::UserMetaInfoV1* add_userinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMetaInfoV1 >&
      userinfo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMetaInfoV1 > userinfo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UserLoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLoginResponse) */ {
 public:
  inline UserLoginResponse() : UserLoginResponse(nullptr) {}
  ~UserLoginResponse() override;
  explicit PROTOBUF_CONSTEXPR UserLoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoginResponse(const UserLoginResponse& from);
  UserLoginResponse(UserLoginResponse&& from) noexcept
    : UserLoginResponse() {
    *this = ::std::move(from);
  }

  inline UserLoginResponse& operator=(const UserLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoginResponse& operator=(UserLoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoginResponse* internal_default_instance() {
    return reinterpret_cast<const UserLoginResponse*>(
               &_UserLoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UserLoginResponse& a, UserLoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLoginResponse& from) {
    UserLoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLoginResponse";
  }
  protected:
  explicit UserLoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserInfoFieldNumber = 2,
    kUserVerifyInfoFieldNumber = 3,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserMetaInfoV1 UserInfo = 2;
  bool has_userinfo() const;
  private:
  bool _internal_has_userinfo() const;
  public:
  void clear_userinfo();
  const ::proto::UserMetaInfoV1& userinfo() const;
  PROTOBUF_NODISCARD ::proto::UserMetaInfoV1* release_userinfo();
  ::proto::UserMetaInfoV1* mutable_userinfo();
  void set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo);
  private:
  const ::proto::UserMetaInfoV1& _internal_userinfo() const;
  ::proto::UserMetaInfoV1* _internal_mutable_userinfo();
  public:
  void unsafe_arena_set_allocated_userinfo(
      ::proto::UserMetaInfoV1* userinfo);
  ::proto::UserMetaInfoV1* unsafe_arena_release_userinfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 3;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.UserLoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::UserMetaInfoV1* userinfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UserLogoutResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserLogoutResponse) */ {
 public:
  inline UserLogoutResponse() : UserLogoutResponse(nullptr) {}
  ~UserLogoutResponse() override;
  explicit PROTOBUF_CONSTEXPR UserLogoutResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLogoutResponse(const UserLogoutResponse& from);
  UserLogoutResponse(UserLogoutResponse&& from) noexcept
    : UserLogoutResponse() {
    *this = ::std::move(from);
  }

  inline UserLogoutResponse& operator=(const UserLogoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLogoutResponse& operator=(UserLogoutResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLogoutResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLogoutResponse* internal_default_instance() {
    return reinterpret_cast<const UserLogoutResponse*>(
               &_UserLogoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UserLogoutResponse& a, UserLogoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLogoutResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLogoutResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLogoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLogoutResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLogoutResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLogoutResponse& from) {
    UserLogoutResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLogoutResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserLogoutResponse";
  }
  protected:
  explicit UserLogoutResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.UserLogoutResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UserOnlineHeartBeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UserOnlineHeartBeatResponse) */ {
 public:
  inline UserOnlineHeartBeatResponse() : UserOnlineHeartBeatResponse(nullptr) {}
  ~UserOnlineHeartBeatResponse() override;
  explicit PROTOBUF_CONSTEXPR UserOnlineHeartBeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserOnlineHeartBeatResponse(const UserOnlineHeartBeatResponse& from);
  UserOnlineHeartBeatResponse(UserOnlineHeartBeatResponse&& from) noexcept
    : UserOnlineHeartBeatResponse() {
    *this = ::std::move(from);
  }

  inline UserOnlineHeartBeatResponse& operator=(const UserOnlineHeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserOnlineHeartBeatResponse& operator=(UserOnlineHeartBeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserOnlineHeartBeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserOnlineHeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const UserOnlineHeartBeatResponse*>(
               &_UserOnlineHeartBeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UserOnlineHeartBeatResponse& a, UserOnlineHeartBeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UserOnlineHeartBeatResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserOnlineHeartBeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserOnlineHeartBeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserOnlineHeartBeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserOnlineHeartBeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserOnlineHeartBeatResponse& from) {
    UserOnlineHeartBeatResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserOnlineHeartBeatResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UserOnlineHeartBeatResponse";
  }
  protected:
  explicit UserOnlineHeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kUserVerifyInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
  bool has_userverifyinfo() const;
  private:
  bool _internal_has_userverifyinfo() const;
  public:
  void clear_userverifyinfo();
  const ::proto::UserVerifyInfoV1& userverifyinfo() const;
  PROTOBUF_NODISCARD ::proto::UserVerifyInfoV1* release_userverifyinfo();
  ::proto::UserVerifyInfoV1* mutable_userverifyinfo();
  void set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo);
  private:
  const ::proto::UserVerifyInfoV1& _internal_userverifyinfo() const;
  ::proto::UserVerifyInfoV1* _internal_mutable_userverifyinfo();
  public:
  void unsafe_arena_set_allocated_userverifyinfo(
      ::proto::UserVerifyInfoV1* userverifyinfo);
  ::proto::UserVerifyInfoV1* unsafe_arena_release_userverifyinfo();

  // @@protoc_insertion_point(class_scope:proto.UserOnlineHeartBeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::UserVerifyInfoV1* userverifyinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetUserPermissionGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetUserPermissionGroupResponse) */ {
 public:
  inline GetUserPermissionGroupResponse() : GetUserPermissionGroupResponse(nullptr) {}
  ~GetUserPermissionGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR GetUserPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUserPermissionGroupResponse(const GetUserPermissionGroupResponse& from);
  GetUserPermissionGroupResponse(GetUserPermissionGroupResponse&& from) noexcept
    : GetUserPermissionGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetUserPermissionGroupResponse& operator=(const GetUserPermissionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUserPermissionGroupResponse& operator=(GetUserPermissionGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUserPermissionGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUserPermissionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetUserPermissionGroupResponse*>(
               &_GetUserPermissionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetUserPermissionGroupResponse& a, GetUserPermissionGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUserPermissionGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUserPermissionGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUserPermissionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUserPermissionGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUserPermissionGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetUserPermissionGroupResponse& from) {
    GetUserPermissionGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUserPermissionGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetUserPermissionGroupResponse";
  }
  protected:
  explicit GetUserPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kPermissionGroupFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
  bool has_permissiongroup() const;
  private:
  bool _internal_has_permissiongroup() const;
  public:
  void clear_permissiongroup();
  const ::proto::PermissionGroupMetaInfoV1& permissiongroup() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupMetaInfoV1* release_permissiongroup();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongroup();
  void set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup);
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongroup() const;
  ::proto::PermissionGroupMetaInfoV1* _internal_mutable_permissiongroup();
  public:
  void unsafe_arena_set_allocated_permissiongroup(
      ::proto::PermissionGroupMetaInfoV1* permissiongroup);
  ::proto::PermissionGroupMetaInfoV1* unsafe_arena_release_permissiongroup();

  // @@protoc_insertion_point(class_scope:proto.GetUserPermissionGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::PermissionGroupMetaInfoV1* permissiongroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetPermissionGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetPermissionGroupResponse) */ {
 public:
  inline GetPermissionGroupResponse() : GetPermissionGroupResponse(nullptr) {}
  ~GetPermissionGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPermissionGroupResponse(const GetPermissionGroupResponse& from);
  GetPermissionGroupResponse(GetPermissionGroupResponse&& from) noexcept
    : GetPermissionGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetPermissionGroupResponse& operator=(const GetPermissionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPermissionGroupResponse& operator=(GetPermissionGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPermissionGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPermissionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetPermissionGroupResponse*>(
               &_GetPermissionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPermissionGroupResponse& a, GetPermissionGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPermissionGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPermissionGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPermissionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPermissionGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPermissionGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetPermissionGroupResponse& from) {
    GetPermissionGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPermissionGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetPermissionGroupResponse";
  }
  protected:
  explicit GetPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kPermissionGroupFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
  bool has_permissiongroup() const;
  private:
  bool _internal_has_permissiongroup() const;
  public:
  void clear_permissiongroup();
  const ::proto::PermissionGroupMetaInfoV1& permissiongroup() const;
  PROTOBUF_NODISCARD ::proto::PermissionGroupMetaInfoV1* release_permissiongroup();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongroup();
  void set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup);
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongroup() const;
  ::proto::PermissionGroupMetaInfoV1* _internal_mutable_permissiongroup();
  public:
  void unsafe_arena_set_allocated_permissiongroup(
      ::proto::PermissionGroupMetaInfoV1* permissiongroup);
  ::proto::PermissionGroupMetaInfoV1* unsafe_arena_release_permissiongroup();

  // @@protoc_insertion_point(class_scope:proto.GetPermissionGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::PermissionGroupMetaInfoV1* permissiongroup_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllPermissionGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllPermissionGroupResponse) */ {
 public:
  inline GetAllPermissionGroupResponse() : GetAllPermissionGroupResponse(nullptr) {}
  ~GetAllPermissionGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllPermissionGroupResponse(const GetAllPermissionGroupResponse& from);
  GetAllPermissionGroupResponse(GetAllPermissionGroupResponse&& from) noexcept
    : GetAllPermissionGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetAllPermissionGroupResponse& operator=(const GetAllPermissionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllPermissionGroupResponse& operator=(GetAllPermissionGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllPermissionGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllPermissionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllPermissionGroupResponse*>(
               &_GetAllPermissionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetAllPermissionGroupResponse& a, GetAllPermissionGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllPermissionGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllPermissionGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllPermissionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllPermissionGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllPermissionGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllPermissionGroupResponse& from) {
    GetAllPermissionGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllPermissionGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllPermissionGroupResponse";
  }
  protected:
  explicit GetAllPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionGroupListFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.PermissionGroupMetaInfoV1 PermissionGroupList = 2;
  int permissiongrouplist_size() const;
  private:
  int _internal_permissiongrouplist_size() const;
  public:
  void clear_permissiongrouplist();
  ::proto::PermissionGroupMetaInfoV1* mutable_permissiongrouplist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PermissionGroupMetaInfoV1 >*
      mutable_permissiongrouplist();
  private:
  const ::proto::PermissionGroupMetaInfoV1& _internal_permissiongrouplist(int index) const;
  ::proto::PermissionGroupMetaInfoV1* _internal_add_permissiongrouplist();
  public:
  const ::proto::PermissionGroupMetaInfoV1& permissiongrouplist(int index) const;
  ::proto::PermissionGroupMetaInfoV1* add_permissiongrouplist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PermissionGroupMetaInfoV1 >&
      permissiongrouplist() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllPermissionGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PermissionGroupMetaInfoV1 > permissiongrouplist_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class ChangeUserPermissionGroupResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.ChangeUserPermissionGroupResponse) */ {
 public:
  inline ChangeUserPermissionGroupResponse() : ChangeUserPermissionGroupResponse(nullptr) {}
  ~ChangeUserPermissionGroupResponse() override;
  explicit PROTOBUF_CONSTEXPR ChangeUserPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeUserPermissionGroupResponse(const ChangeUserPermissionGroupResponse& from);
  ChangeUserPermissionGroupResponse(ChangeUserPermissionGroupResponse&& from) noexcept
    : ChangeUserPermissionGroupResponse() {
    *this = ::std::move(from);
  }

  inline ChangeUserPermissionGroupResponse& operator=(const ChangeUserPermissionGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeUserPermissionGroupResponse& operator=(ChangeUserPermissionGroupResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeUserPermissionGroupResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeUserPermissionGroupResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeUserPermissionGroupResponse*>(
               &_ChangeUserPermissionGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChangeUserPermissionGroupResponse& a, ChangeUserPermissionGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeUserPermissionGroupResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeUserPermissionGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeUserPermissionGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeUserPermissionGroupResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeUserPermissionGroupResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeUserPermissionGroupResponse& from) {
    ChangeUserPermissionGroupResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeUserPermissionGroupResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.ChangeUserPermissionGroupResponse";
  }
  protected:
  explicit ChangeUserPermissionGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.ChangeUserPermissionGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateProjectResponse) */ {
 public:
  inline CreateProjectResponse() : CreateProjectResponse(nullptr) {}
  ~CreateProjectResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectResponse(const CreateProjectResponse& from);
  CreateProjectResponse(CreateProjectResponse&& from) noexcept
    : CreateProjectResponse() {
    *this = ::std::move(from);
  }

  inline CreateProjectResponse& operator=(const CreateProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectResponse& operator=(CreateProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProjectResponse*>(
               &_CreateProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateProjectResponse& a, CreateProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateProjectResponse& from) {
    CreateProjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateProjectResponse";
  }
  protected:
  explicit CreateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteProjectResponse) */ {
 public:
  inline DeleteProjectResponse() : DeleteProjectResponse(nullptr) {}
  ~DeleteProjectResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectResponse(const DeleteProjectResponse& from);
  DeleteProjectResponse(DeleteProjectResponse&& from) noexcept
    : DeleteProjectResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProjectResponse& operator=(const DeleteProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectResponse& operator=(DeleteProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectResponse*>(
               &_DeleteProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteProjectResponse& a, DeleteProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteProjectResponse& from) {
    DeleteProjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteProjectResponse";
  }
  protected:
  explicit DeleteProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateProjectResponse) */ {
 public:
  inline UpdateProjectResponse() : UpdateProjectResponse(nullptr) {}
  ~UpdateProjectResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectResponse(const UpdateProjectResponse& from);
  UpdateProjectResponse(UpdateProjectResponse&& from) noexcept
    : UpdateProjectResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProjectResponse& operator=(const UpdateProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectResponse& operator=(UpdateProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectResponse*>(
               &_UpdateProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateProjectResponse& a, UpdateProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateProjectResponse& from) {
    UpdateProjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateProjectResponse";
  }
  protected:
  explicit UpdateProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetProjectResponse) */ {
 public:
  inline GetProjectResponse() : GetProjectResponse(nullptr) {}
  ~GetProjectResponse() override;
  explicit PROTOBUF_CONSTEXPR GetProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetProjectResponse(const GetProjectResponse& from);
  GetProjectResponse(GetProjectResponse&& from) noexcept
    : GetProjectResponse() {
    *this = ::std::move(from);
  }

  inline GetProjectResponse& operator=(const GetProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetProjectResponse& operator=(GetProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetProjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetProjectResponse*>(
               &_GetProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetProjectResponse& a, GetProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetProjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetProjectResponse& from) {
    GetProjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetProjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetProjectResponse";
  }
  protected:
  explicit GetProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kProjectInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  bool has_projectinfo() const;
  private:
  bool _internal_has_projectinfo() const;
  public:
  void clear_projectinfo();
  const ::proto::ProjectMetaInfoV1& projectinfo() const;
  PROTOBUF_NODISCARD ::proto::ProjectMetaInfoV1* release_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo();
  void set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo);
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo() const;
  ::proto::ProjectMetaInfoV1* _internal_mutable_projectinfo();
  public:
  void unsafe_arena_set_allocated_projectinfo(
      ::proto::ProjectMetaInfoV1* projectinfo);
  ::proto::ProjectMetaInfoV1* unsafe_arena_release_projectinfo();

  // @@protoc_insertion_point(class_scope:proto.GetProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::ProjectMetaInfoV1* projectinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllProjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllProjectResponse) */ {
 public:
  inline GetAllProjectResponse() : GetAllProjectResponse(nullptr) {}
  ~GetAllProjectResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllProjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllProjectResponse(const GetAllProjectResponse& from);
  GetAllProjectResponse(GetAllProjectResponse&& from) noexcept
    : GetAllProjectResponse() {
    *this = ::std::move(from);
  }

  inline GetAllProjectResponse& operator=(const GetAllProjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllProjectResponse& operator=(GetAllProjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllProjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllProjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllProjectResponse*>(
               &_GetAllProjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAllProjectResponse& a, GetAllProjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllProjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllProjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllProjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllProjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllProjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllProjectResponse& from) {
    GetAllProjectResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllProjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllProjectResponse";
  }
  protected:
  explicit GetAllProjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectInfoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.ProjectMetaInfoV1 ProjectInfo = 2;
  int projectinfo_size() const;
  private:
  int _internal_projectinfo_size() const;
  public:
  void clear_projectinfo();
  ::proto::ProjectMetaInfoV1* mutable_projectinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectMetaInfoV1 >*
      mutable_projectinfo();
  private:
  const ::proto::ProjectMetaInfoV1& _internal_projectinfo(int index) const;
  ::proto::ProjectMetaInfoV1* _internal_add_projectinfo();
  public:
  const ::proto::ProjectMetaInfoV1& projectinfo(int index) const;
  ::proto::ProjectMetaInfoV1* add_projectinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectMetaInfoV1 >&
      projectinfo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllProjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectMetaInfoV1 > projectinfo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcResponse) */ {
 public:
  inline CreateSwcResponse() : CreateSwcResponse(nullptr) {}
  ~CreateSwcResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcResponse(const CreateSwcResponse& from);
  CreateSwcResponse(CreateSwcResponse&& from) noexcept
    : CreateSwcResponse() {
    *this = ::std::move(from);
  }

  inline CreateSwcResponse& operator=(const CreateSwcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcResponse& operator=(CreateSwcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSwcResponse*>(
               &_CreateSwcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CreateSwcResponse& a, CreateSwcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcResponse& from) {
    CreateSwcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcResponse";
  }
  protected:
  explicit CreateSwcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnoAttachmentUuidFieldNumber = 3,
    kApoAttachmentUuidFieldNumber = 4,
    kMetaInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // string AnoAttachmentUuid = 3;
  void clear_anoattachmentuuid();
  const std::string& anoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_anoattachmentuuid();
  void set_allocated_anoattachmentuuid(std::string* anoattachmentuuid);
  private:
  const std::string& _internal_anoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_anoattachmentuuid();
  public:

  // string ApoAttachmentUuid = 4;
  void clear_apoattachmentuuid();
  const std::string& apoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_apoattachmentuuid();
  void set_allocated_apoattachmentuuid(std::string* apoattachmentuuid);
  private:
  const std::string& _internal_apoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_apoattachmentuuid();
  public:

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anoattachmentuuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apoattachmentuuid_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcResponse) */ {
 public:
  inline DeleteSwcResponse() : DeleteSwcResponse(nullptr) {}
  ~DeleteSwcResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcResponse(const DeleteSwcResponse& from);
  DeleteSwcResponse(DeleteSwcResponse&& from) noexcept
    : DeleteSwcResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSwcResponse& operator=(const DeleteSwcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcResponse& operator=(DeleteSwcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcResponse*>(
               &_DeleteSwcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteSwcResponse& a, DeleteSwcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcResponse& from) {
    DeleteSwcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcResponse";
  }
  protected:
  explicit DeleteSwcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcResponse) */ {
 public:
  inline UpdateSwcResponse() : UpdateSwcResponse(nullptr) {}
  ~UpdateSwcResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcResponse(const UpdateSwcResponse& from);
  UpdateSwcResponse(UpdateSwcResponse&& from) noexcept
    : UpdateSwcResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSwcResponse& operator=(const UpdateSwcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcResponse& operator=(UpdateSwcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcResponse*>(
               &_UpdateSwcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateSwcResponse& a, UpdateSwcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcResponse& from) {
    UpdateSwcResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcResponse";
  }
  protected:
  explicit UpdateSwcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcMetaInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcMetaInfoResponse) */ {
 public:
  inline GetSwcMetaInfoResponse() : GetSwcMetaInfoResponse(nullptr) {}
  ~GetSwcMetaInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcMetaInfoResponse(const GetSwcMetaInfoResponse& from);
  GetSwcMetaInfoResponse(GetSwcMetaInfoResponse&& from) noexcept
    : GetSwcMetaInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcMetaInfoResponse& operator=(const GetSwcMetaInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcMetaInfoResponse& operator=(GetSwcMetaInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcMetaInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcMetaInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcMetaInfoResponse*>(
               &_GetSwcMetaInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetSwcMetaInfoResponse& a, GetSwcMetaInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcMetaInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcMetaInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcMetaInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcMetaInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcMetaInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcMetaInfoResponse& from) {
    GetSwcMetaInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcMetaInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcMetaInfoResponse";
  }
  protected:
  explicit GetSwcMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcMetaInfoV1 SwcInfo = 2;
  bool has_swcinfo() const;
  private:
  bool _internal_has_swcinfo() const;
  public:
  void clear_swcinfo();
  const ::proto::SwcMetaInfoV1& swcinfo() const;
  PROTOBUF_NODISCARD ::proto::SwcMetaInfoV1* release_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo();
  void set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo);
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo() const;
  ::proto::SwcMetaInfoV1* _internal_mutable_swcinfo();
  public:
  void unsafe_arena_set_allocated_swcinfo(
      ::proto::SwcMetaInfoV1* swcinfo);
  ::proto::SwcMetaInfoV1* unsafe_arena_release_swcinfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcMetaInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcMetaInfoV1* swcinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllSwcMetaInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllSwcMetaInfoResponse) */ {
 public:
  inline GetAllSwcMetaInfoResponse() : GetAllSwcMetaInfoResponse(nullptr) {}
  ~GetAllSwcMetaInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllSwcMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllSwcMetaInfoResponse(const GetAllSwcMetaInfoResponse& from);
  GetAllSwcMetaInfoResponse(GetAllSwcMetaInfoResponse&& from) noexcept
    : GetAllSwcMetaInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAllSwcMetaInfoResponse& operator=(const GetAllSwcMetaInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllSwcMetaInfoResponse& operator=(GetAllSwcMetaInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllSwcMetaInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllSwcMetaInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllSwcMetaInfoResponse*>(
               &_GetAllSwcMetaInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetAllSwcMetaInfoResponse& a, GetAllSwcMetaInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllSwcMetaInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllSwcMetaInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllSwcMetaInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllSwcMetaInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllSwcMetaInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllSwcMetaInfoResponse& from) {
    GetAllSwcMetaInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllSwcMetaInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllSwcMetaInfoResponse";
  }
  protected:
  explicit GetAllSwcMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcInfoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.SwcMetaInfoV1 SwcInfo = 2;
  int swcinfo_size() const;
  private:
  int _internal_swcinfo_size() const;
  public:
  void clear_swcinfo();
  ::proto::SwcMetaInfoV1* mutable_swcinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcMetaInfoV1 >*
      mutable_swcinfo();
  private:
  const ::proto::SwcMetaInfoV1& _internal_swcinfo(int index) const;
  ::proto::SwcMetaInfoV1* _internal_add_swcinfo();
  public:
  const ::proto::SwcMetaInfoV1& swcinfo(int index) const;
  ::proto::SwcMetaInfoV1* add_swcinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcMetaInfoV1 >&
      swcinfo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllSwcMetaInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcMetaInfoV1 > swcinfo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcSnapshotResponse) */ {
 public:
  inline CreateSwcSnapshotResponse() : CreateSwcSnapshotResponse(nullptr) {}
  ~CreateSwcSnapshotResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcSnapshotResponse(const CreateSwcSnapshotResponse& from);
  CreateSwcSnapshotResponse(CreateSwcSnapshotResponse&& from) noexcept
    : CreateSwcSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline CreateSwcSnapshotResponse& operator=(const CreateSwcSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcSnapshotResponse& operator=(CreateSwcSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSwcSnapshotResponse*>(
               &_CreateSwcSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateSwcSnapshotResponse& a, CreateSwcSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcSnapshotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcSnapshotResponse& from) {
    CreateSwcSnapshotResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcSnapshotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcSnapshotResponse";
  }
  protected:
  explicit CreateSwcSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllSnapshotMetaInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllSnapshotMetaInfoResponse) */ {
 public:
  inline GetAllSnapshotMetaInfoResponse() : GetAllSnapshotMetaInfoResponse(nullptr) {}
  ~GetAllSnapshotMetaInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllSnapshotMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllSnapshotMetaInfoResponse(const GetAllSnapshotMetaInfoResponse& from);
  GetAllSnapshotMetaInfoResponse(GetAllSnapshotMetaInfoResponse&& from) noexcept
    : GetAllSnapshotMetaInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAllSnapshotMetaInfoResponse& operator=(const GetAllSnapshotMetaInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllSnapshotMetaInfoResponse& operator=(GetAllSnapshotMetaInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllSnapshotMetaInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllSnapshotMetaInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllSnapshotMetaInfoResponse*>(
               &_GetAllSnapshotMetaInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetAllSnapshotMetaInfoResponse& a, GetAllSnapshotMetaInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllSnapshotMetaInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllSnapshotMetaInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllSnapshotMetaInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllSnapshotMetaInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllSnapshotMetaInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllSnapshotMetaInfoResponse& from) {
    GetAllSnapshotMetaInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllSnapshotMetaInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllSnapshotMetaInfoResponse";
  }
  protected:
  explicit GetAllSnapshotMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcSnapshotListFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.SwcSnapshotMetaInfoV1 SwcSnapshotList = 2;
  int swcsnapshotlist_size() const;
  private:
  int _internal_swcsnapshotlist_size() const;
  public:
  void clear_swcsnapshotlist();
  ::proto::SwcSnapshotMetaInfoV1* mutable_swcsnapshotlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >*
      mutable_swcsnapshotlist();
  private:
  const ::proto::SwcSnapshotMetaInfoV1& _internal_swcsnapshotlist(int index) const;
  ::proto::SwcSnapshotMetaInfoV1* _internal_add_swcsnapshotlist();
  public:
  const ::proto::SwcSnapshotMetaInfoV1& swcsnapshotlist(int index) const;
  ::proto::SwcSnapshotMetaInfoV1* add_swcsnapshotlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >&
      swcsnapshotlist() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllSnapshotMetaInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 > swcsnapshotlist_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSnapshotResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSnapshotResponse) */ {
 public:
  inline GetSnapshotResponse() : GetSnapshotResponse(nullptr) {}
  ~GetSnapshotResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSnapshotResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSnapshotResponse(const GetSnapshotResponse& from);
  GetSnapshotResponse(GetSnapshotResponse&& from) noexcept
    : GetSnapshotResponse() {
    *this = ::std::move(from);
  }

  inline GetSnapshotResponse& operator=(const GetSnapshotResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSnapshotResponse& operator=(GetSnapshotResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSnapshotResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSnapshotResponse* internal_default_instance() {
    return reinterpret_cast<const GetSnapshotResponse*>(
               &_GetSnapshotResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetSnapshotResponse& a, GetSnapshotResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSnapshotResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSnapshotResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSnapshotResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSnapshotResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSnapshotResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSnapshotResponse& from) {
    GetSnapshotResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSnapshotResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSnapshotResponse";
  }
  protected:
  explicit GetSnapshotResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 2,
    kSwcNodeDataFieldNumber = 3,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 2;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcDataV1 SwcNodeData = 3;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSnapshotResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllIncrementOperationMetaInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllIncrementOperationMetaInfoResponse) */ {
 public:
  inline GetAllIncrementOperationMetaInfoResponse() : GetAllIncrementOperationMetaInfoResponse(nullptr) {}
  ~GetAllIncrementOperationMetaInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllIncrementOperationMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllIncrementOperationMetaInfoResponse(const GetAllIncrementOperationMetaInfoResponse& from);
  GetAllIncrementOperationMetaInfoResponse(GetAllIncrementOperationMetaInfoResponse&& from) noexcept
    : GetAllIncrementOperationMetaInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetAllIncrementOperationMetaInfoResponse& operator=(const GetAllIncrementOperationMetaInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllIncrementOperationMetaInfoResponse& operator=(GetAllIncrementOperationMetaInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllIncrementOperationMetaInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllIncrementOperationMetaInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllIncrementOperationMetaInfoResponse*>(
               &_GetAllIncrementOperationMetaInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetAllIncrementOperationMetaInfoResponse& a, GetAllIncrementOperationMetaInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllIncrementOperationMetaInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllIncrementOperationMetaInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllIncrementOperationMetaInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllIncrementOperationMetaInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllIncrementOperationMetaInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllIncrementOperationMetaInfoResponse& from) {
    GetAllIncrementOperationMetaInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllIncrementOperationMetaInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllIncrementOperationMetaInfoResponse";
  }
  protected:
  explicit GetAllIncrementOperationMetaInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcIncrementOperationMetaInfoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.SwcIncrementOperationMetaInfoV1 SwcIncrementOperationMetaInfo = 2;
  int swcincrementoperationmetainfo_size() const;
  private:
  int _internal_swcincrementoperationmetainfo_size() const;
  public:
  void clear_swcincrementoperationmetainfo();
  ::proto::SwcIncrementOperationMetaInfoV1* mutable_swcincrementoperationmetainfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >*
      mutable_swcincrementoperationmetainfo();
  private:
  const ::proto::SwcIncrementOperationMetaInfoV1& _internal_swcincrementoperationmetainfo(int index) const;
  ::proto::SwcIncrementOperationMetaInfoV1* _internal_add_swcincrementoperationmetainfo();
  public:
  const ::proto::SwcIncrementOperationMetaInfoV1& swcincrementoperationmetainfo(int index) const;
  ::proto::SwcIncrementOperationMetaInfoV1* add_swcincrementoperationmetainfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >&
      swcincrementoperationmetainfo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllIncrementOperationMetaInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 > swcincrementoperationmetainfo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetIncrementOperationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetIncrementOperationResponse) */ {
 public:
  inline GetIncrementOperationResponse() : GetIncrementOperationResponse(nullptr) {}
  ~GetIncrementOperationResponse() override;
  explicit PROTOBUF_CONSTEXPR GetIncrementOperationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetIncrementOperationResponse(const GetIncrementOperationResponse& from);
  GetIncrementOperationResponse(GetIncrementOperationResponse&& from) noexcept
    : GetIncrementOperationResponse() {
    *this = ::std::move(from);
  }

  inline GetIncrementOperationResponse& operator=(const GetIncrementOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIncrementOperationResponse& operator=(GetIncrementOperationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetIncrementOperationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetIncrementOperationResponse* internal_default_instance() {
    return reinterpret_cast<const GetIncrementOperationResponse*>(
               &_GetIncrementOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetIncrementOperationResponse& a, GetIncrementOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIncrementOperationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIncrementOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetIncrementOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetIncrementOperationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetIncrementOperationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetIncrementOperationResponse& from) {
    GetIncrementOperationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIncrementOperationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetIncrementOperationResponse";
  }
  protected:
  explicit GetIncrementOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcIncrementOperationListFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcIncrementOperationListV1 SwcIncrementOperationList = 2;
  bool has_swcincrementoperationlist() const;
  private:
  bool _internal_has_swcincrementoperationlist() const;
  public:
  void clear_swcincrementoperationlist();
  const ::proto::SwcIncrementOperationListV1& swcincrementoperationlist() const;
  PROTOBUF_NODISCARD ::proto::SwcIncrementOperationListV1* release_swcincrementoperationlist();
  ::proto::SwcIncrementOperationListV1* mutable_swcincrementoperationlist();
  void set_allocated_swcincrementoperationlist(::proto::SwcIncrementOperationListV1* swcincrementoperationlist);
  private:
  const ::proto::SwcIncrementOperationListV1& _internal_swcincrementoperationlist() const;
  ::proto::SwcIncrementOperationListV1* _internal_mutable_swcincrementoperationlist();
  public:
  void unsafe_arena_set_allocated_swcincrementoperationlist(
      ::proto::SwcIncrementOperationListV1* swcincrementoperationlist);
  ::proto::SwcIncrementOperationListV1* unsafe_arena_release_swcincrementoperationlist();

  // @@protoc_insertion_point(class_scope:proto.GetIncrementOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcIncrementOperationListV1* swcincrementoperationlist_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcNodeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcNodeDataResponse) */ {
 public:
  inline CreateSwcNodeDataResponse() : CreateSwcNodeDataResponse(nullptr) {}
  ~CreateSwcNodeDataResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcNodeDataResponse(const CreateSwcNodeDataResponse& from);
  CreateSwcNodeDataResponse(CreateSwcNodeDataResponse&& from) noexcept
    : CreateSwcNodeDataResponse() {
    *this = ::std::move(from);
  }

  inline CreateSwcNodeDataResponse& operator=(const CreateSwcNodeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcNodeDataResponse& operator=(CreateSwcNodeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcNodeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcNodeDataResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSwcNodeDataResponse*>(
               &_CreateSwcNodeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CreateSwcNodeDataResponse& a, CreateSwcNodeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcNodeDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcNodeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcNodeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcNodeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcNodeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcNodeDataResponse& from) {
    CreateSwcNodeDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcNodeDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcNodeDataResponse";
  }
  protected:
  explicit CreateSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedNodesUuidFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated string CreatedNodesUuid = 2;
  int creatednodesuuid_size() const;
  private:
  int _internal_creatednodesuuid_size() const;
  public:
  void clear_creatednodesuuid();
  const std::string& creatednodesuuid(int index) const;
  std::string* mutable_creatednodesuuid(int index);
  void set_creatednodesuuid(int index, const std::string& value);
  void set_creatednodesuuid(int index, std::string&& value);
  void set_creatednodesuuid(int index, const char* value);
  void set_creatednodesuuid(int index, const char* value, size_t size);
  std::string* add_creatednodesuuid();
  void add_creatednodesuuid(const std::string& value);
  void add_creatednodesuuid(std::string&& value);
  void add_creatednodesuuid(const char* value);
  void add_creatednodesuuid(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& creatednodesuuid() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_creatednodesuuid();
  private:
  const std::string& _internal_creatednodesuuid(int index) const;
  std::string* _internal_add_creatednodesuuid();
  public:

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcNodeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> creatednodesuuid_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcNodeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcNodeDataResponse) */ {
 public:
  inline DeleteSwcNodeDataResponse() : DeleteSwcNodeDataResponse(nullptr) {}
  ~DeleteSwcNodeDataResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcNodeDataResponse(const DeleteSwcNodeDataResponse& from);
  DeleteSwcNodeDataResponse(DeleteSwcNodeDataResponse&& from) noexcept
    : DeleteSwcNodeDataResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSwcNodeDataResponse& operator=(const DeleteSwcNodeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcNodeDataResponse& operator=(DeleteSwcNodeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcNodeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcNodeDataResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcNodeDataResponse*>(
               &_DeleteSwcNodeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteSwcNodeDataResponse& a, DeleteSwcNodeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcNodeDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcNodeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcNodeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcNodeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcNodeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcNodeDataResponse& from) {
    DeleteSwcNodeDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcNodeDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcNodeDataResponse";
  }
  protected:
  explicit DeleteSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcNodeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcNodeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcNodeDataResponse) */ {
 public:
  inline UpdateSwcNodeDataResponse() : UpdateSwcNodeDataResponse(nullptr) {}
  ~UpdateSwcNodeDataResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcNodeDataResponse(const UpdateSwcNodeDataResponse& from);
  UpdateSwcNodeDataResponse(UpdateSwcNodeDataResponse&& from) noexcept
    : UpdateSwcNodeDataResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSwcNodeDataResponse& operator=(const UpdateSwcNodeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcNodeDataResponse& operator=(UpdateSwcNodeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcNodeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcNodeDataResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcNodeDataResponse*>(
               &_UpdateSwcNodeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateSwcNodeDataResponse& a, UpdateSwcNodeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcNodeDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcNodeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcNodeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcNodeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcNodeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcNodeDataResponse& from) {
    UpdateSwcNodeDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcNodeDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcNodeDataResponse";
  }
  protected:
  explicit UpdateSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcNodeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataResponse) */ {
 public:
  inline GetSwcNodeDataResponse() : GetSwcNodeDataResponse(nullptr) {}
  ~GetSwcNodeDataResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataResponse(const GetSwcNodeDataResponse& from);
  GetSwcNodeDataResponse(GetSwcNodeDataResponse&& from) noexcept
    : GetSwcNodeDataResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataResponse& operator=(const GetSwcNodeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataResponse& operator=(GetSwcNodeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataResponse*>(
               &_GetSwcNodeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetSwcNodeDataResponse& a, GetSwcNodeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataResponse& from) {
    GetSwcNodeDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataResponse";
  }
  protected:
  explicit GetSwcNodeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcNodeDataFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcDataV1 SwcNodeData = 2;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcFullNodeDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcFullNodeDataResponse) */ {
 public:
  inline GetSwcFullNodeDataResponse() : GetSwcFullNodeDataResponse(nullptr) {}
  ~GetSwcFullNodeDataResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcFullNodeDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcFullNodeDataResponse(const GetSwcFullNodeDataResponse& from);
  GetSwcFullNodeDataResponse(GetSwcFullNodeDataResponse&& from) noexcept
    : GetSwcFullNodeDataResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcFullNodeDataResponse& operator=(const GetSwcFullNodeDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcFullNodeDataResponse& operator=(GetSwcFullNodeDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcFullNodeDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcFullNodeDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcFullNodeDataResponse*>(
               &_GetSwcFullNodeDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetSwcFullNodeDataResponse& a, GetSwcFullNodeDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcFullNodeDataResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcFullNodeDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcFullNodeDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcFullNodeDataResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcFullNodeDataResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcFullNodeDataResponse& from) {
    GetSwcFullNodeDataResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcFullNodeDataResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcFullNodeDataResponse";
  }
  protected:
  explicit GetSwcFullNodeDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcNodeDataFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcDataV1 SwcNodeData = 2;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSwcFullNodeDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcNodeDataListByTimeAndUserResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcNodeDataListByTimeAndUserResponse) */ {
 public:
  inline GetSwcNodeDataListByTimeAndUserResponse() : GetSwcNodeDataListByTimeAndUserResponse(nullptr) {}
  ~GetSwcNodeDataListByTimeAndUserResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcNodeDataListByTimeAndUserResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcNodeDataListByTimeAndUserResponse(const GetSwcNodeDataListByTimeAndUserResponse& from);
  GetSwcNodeDataListByTimeAndUserResponse(GetSwcNodeDataListByTimeAndUserResponse&& from) noexcept
    : GetSwcNodeDataListByTimeAndUserResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcNodeDataListByTimeAndUserResponse& operator=(const GetSwcNodeDataListByTimeAndUserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcNodeDataListByTimeAndUserResponse& operator=(GetSwcNodeDataListByTimeAndUserResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcNodeDataListByTimeAndUserResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcNodeDataListByTimeAndUserResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcNodeDataListByTimeAndUserResponse*>(
               &_GetSwcNodeDataListByTimeAndUserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetSwcNodeDataListByTimeAndUserResponse& a, GetSwcNodeDataListByTimeAndUserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcNodeDataListByTimeAndUserResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcNodeDataListByTimeAndUserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcNodeDataListByTimeAndUserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcNodeDataListByTimeAndUserResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcNodeDataListByTimeAndUserResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcNodeDataListByTimeAndUserResponse& from) {
    GetSwcNodeDataListByTimeAndUserResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcNodeDataListByTimeAndUserResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcNodeDataListByTimeAndUserResponse";
  }
  protected:
  explicit GetSwcNodeDataListByTimeAndUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcNodeDataFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcDataV1 SwcNodeData = 2;
  bool has_swcnodedata() const;
  private:
  bool _internal_has_swcnodedata() const;
  public:
  void clear_swcnodedata();
  const ::proto::SwcDataV1& swcnodedata() const;
  PROTOBUF_NODISCARD ::proto::SwcDataV1* release_swcnodedata();
  ::proto::SwcDataV1* mutable_swcnodedata();
  void set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata);
  private:
  const ::proto::SwcDataV1& _internal_swcnodedata() const;
  ::proto::SwcDataV1* _internal_mutable_swcnodedata();
  public:
  void unsafe_arena_set_allocated_swcnodedata(
      ::proto::SwcDataV1* swcnodedata);
  ::proto::SwcDataV1* unsafe_arena_release_swcnodedata();

  // @@protoc_insertion_point(class_scope:proto.GetSwcNodeDataListByTimeAndUserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcDataV1* swcnodedata_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateDailyStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateDailyStatisticsResponse) */ {
 public:
  inline CreateDailyStatisticsResponse() : CreateDailyStatisticsResponse(nullptr) {}
  ~CreateDailyStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateDailyStatisticsResponse(const CreateDailyStatisticsResponse& from);
  CreateDailyStatisticsResponse(CreateDailyStatisticsResponse&& from) noexcept
    : CreateDailyStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline CreateDailyStatisticsResponse& operator=(const CreateDailyStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateDailyStatisticsResponse& operator=(CreateDailyStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateDailyStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateDailyStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const CreateDailyStatisticsResponse*>(
               &_CreateDailyStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CreateDailyStatisticsResponse& a, CreateDailyStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateDailyStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateDailyStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateDailyStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateDailyStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateDailyStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateDailyStatisticsResponse& from) {
    CreateDailyStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDailyStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateDailyStatisticsResponse";
  }
  protected:
  explicit CreateDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.CreateDailyStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteDailyStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteDailyStatisticsResponse) */ {
 public:
  inline DeleteDailyStatisticsResponse() : DeleteDailyStatisticsResponse(nullptr) {}
  ~DeleteDailyStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteDailyStatisticsResponse(const DeleteDailyStatisticsResponse& from);
  DeleteDailyStatisticsResponse(DeleteDailyStatisticsResponse&& from) noexcept
    : DeleteDailyStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline DeleteDailyStatisticsResponse& operator=(const DeleteDailyStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDailyStatisticsResponse& operator=(DeleteDailyStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteDailyStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteDailyStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteDailyStatisticsResponse*>(
               &_DeleteDailyStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DeleteDailyStatisticsResponse& a, DeleteDailyStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDailyStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDailyStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteDailyStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteDailyStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteDailyStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteDailyStatisticsResponse& from) {
    DeleteDailyStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDailyStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteDailyStatisticsResponse";
  }
  protected:
  explicit DeleteDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteDailyStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateDailyStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateDailyStatisticsResponse) */ {
 public:
  inline UpdateDailyStatisticsResponse() : UpdateDailyStatisticsResponse(nullptr) {}
  ~UpdateDailyStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDailyStatisticsResponse(const UpdateDailyStatisticsResponse& from);
  UpdateDailyStatisticsResponse(UpdateDailyStatisticsResponse&& from) noexcept
    : UpdateDailyStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDailyStatisticsResponse& operator=(const UpdateDailyStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDailyStatisticsResponse& operator=(UpdateDailyStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateDailyStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDailyStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDailyStatisticsResponse*>(
               &_UpdateDailyStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateDailyStatisticsResponse& a, UpdateDailyStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDailyStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDailyStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDailyStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDailyStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateDailyStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateDailyStatisticsResponse& from) {
    UpdateDailyStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateDailyStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateDailyStatisticsResponse";
  }
  protected:
  explicit UpdateDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateDailyStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetDailyStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetDailyStatisticsResponse) */ {
 public:
  inline GetDailyStatisticsResponse() : GetDailyStatisticsResponse(nullptr) {}
  ~GetDailyStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetDailyStatisticsResponse(const GetDailyStatisticsResponse& from);
  GetDailyStatisticsResponse(GetDailyStatisticsResponse&& from) noexcept
    : GetDailyStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetDailyStatisticsResponse& operator=(const GetDailyStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDailyStatisticsResponse& operator=(GetDailyStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDailyStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDailyStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetDailyStatisticsResponse*>(
               &_GetDailyStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetDailyStatisticsResponse& a, GetDailyStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDailyStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDailyStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDailyStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetDailyStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetDailyStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetDailyStatisticsResponse& from) {
    GetDailyStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDailyStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetDailyStatisticsResponse";
  }
  protected:
  explicit GetDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kDailyStatisticsInfoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  bool has_dailystatisticsinfo() const;
  private:
  bool _internal_has_dailystatisticsinfo() const;
  public:
  void clear_dailystatisticsinfo();
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo() const;
  PROTOBUF_NODISCARD ::proto::DailyStatisticsMetaInfoV1* release_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo();
  void set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo() const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_mutable_dailystatisticsinfo();
  public:
  void unsafe_arena_set_allocated_dailystatisticsinfo(
      ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo);
  ::proto::DailyStatisticsMetaInfoV1* unsafe_arena_release_dailystatisticsinfo();

  // @@protoc_insertion_point(class_scope:proto.GetDailyStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetAllDailyStatisticsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetAllDailyStatisticsResponse) */ {
 public:
  inline GetAllDailyStatisticsResponse() : GetAllDailyStatisticsResponse(nullptr) {}
  ~GetAllDailyStatisticsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetAllDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAllDailyStatisticsResponse(const GetAllDailyStatisticsResponse& from);
  GetAllDailyStatisticsResponse(GetAllDailyStatisticsResponse&& from) noexcept
    : GetAllDailyStatisticsResponse() {
    *this = ::std::move(from);
  }

  inline GetAllDailyStatisticsResponse& operator=(const GetAllDailyStatisticsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllDailyStatisticsResponse& operator=(GetAllDailyStatisticsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAllDailyStatisticsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAllDailyStatisticsResponse* internal_default_instance() {
    return reinterpret_cast<const GetAllDailyStatisticsResponse*>(
               &_GetAllDailyStatisticsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetAllDailyStatisticsResponse& a, GetAllDailyStatisticsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllDailyStatisticsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllDailyStatisticsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAllDailyStatisticsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetAllDailyStatisticsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetAllDailyStatisticsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetAllDailyStatisticsResponse& from) {
    GetAllDailyStatisticsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDailyStatisticsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetAllDailyStatisticsResponse";
  }
  protected:
  explicit GetAllDailyStatisticsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDailyStatisticsInfoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
  int dailystatisticsinfo_size() const;
  private:
  int _internal_dailystatisticsinfo_size() const;
  public:
  void clear_dailystatisticsinfo();
  ::proto::DailyStatisticsMetaInfoV1* mutable_dailystatisticsinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::DailyStatisticsMetaInfoV1 >*
      mutable_dailystatisticsinfo();
  private:
  const ::proto::DailyStatisticsMetaInfoV1& _internal_dailystatisticsinfo(int index) const;
  ::proto::DailyStatisticsMetaInfoV1* _internal_add_dailystatisticsinfo();
  public:
  const ::proto::DailyStatisticsMetaInfoV1& dailystatisticsinfo(int index) const;
  ::proto::DailyStatisticsMetaInfoV1* add_dailystatisticsinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::DailyStatisticsMetaInfoV1 >&
      dailystatisticsinfo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetAllDailyStatisticsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::DailyStatisticsMetaInfoV1 > dailystatisticsinfo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcAttachmentAnoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcAttachmentAnoResponse) */ {
 public:
  inline CreateSwcAttachmentAnoResponse() : CreateSwcAttachmentAnoResponse(nullptr) {}
  ~CreateSwcAttachmentAnoResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcAttachmentAnoResponse(const CreateSwcAttachmentAnoResponse& from);
  CreateSwcAttachmentAnoResponse(CreateSwcAttachmentAnoResponse&& from) noexcept
    : CreateSwcAttachmentAnoResponse() {
    *this = ::std::move(from);
  }

  inline CreateSwcAttachmentAnoResponse& operator=(const CreateSwcAttachmentAnoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcAttachmentAnoResponse& operator=(CreateSwcAttachmentAnoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcAttachmentAnoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcAttachmentAnoResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSwcAttachmentAnoResponse*>(
               &_CreateSwcAttachmentAnoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CreateSwcAttachmentAnoResponse& a, CreateSwcAttachmentAnoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcAttachmentAnoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcAttachmentAnoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcAttachmentAnoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcAttachmentAnoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcAttachmentAnoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcAttachmentAnoResponse& from) {
    CreateSwcAttachmentAnoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcAttachmentAnoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcAttachmentAnoResponse";
  }
  protected:
  explicit CreateSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnoAttachmentUuidFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // string AnoAttachmentUuid = 2;
  void clear_anoattachmentuuid();
  const std::string& anoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_anoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_anoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_anoattachmentuuid();
  void set_allocated_anoattachmentuuid(std::string* anoattachmentuuid);
  private:
  const std::string& _internal_anoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_anoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_anoattachmentuuid();
  public:

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcAttachmentAnoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr anoattachmentuuid_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcAttachmentAnoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcAttachmentAnoResponse) */ {
 public:
  inline DeleteSwcAttachmentAnoResponse() : DeleteSwcAttachmentAnoResponse(nullptr) {}
  ~DeleteSwcAttachmentAnoResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcAttachmentAnoResponse(const DeleteSwcAttachmentAnoResponse& from);
  DeleteSwcAttachmentAnoResponse(DeleteSwcAttachmentAnoResponse&& from) noexcept
    : DeleteSwcAttachmentAnoResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSwcAttachmentAnoResponse& operator=(const DeleteSwcAttachmentAnoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcAttachmentAnoResponse& operator=(DeleteSwcAttachmentAnoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcAttachmentAnoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcAttachmentAnoResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcAttachmentAnoResponse*>(
               &_DeleteSwcAttachmentAnoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DeleteSwcAttachmentAnoResponse& a, DeleteSwcAttachmentAnoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcAttachmentAnoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcAttachmentAnoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcAttachmentAnoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcAttachmentAnoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcAttachmentAnoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcAttachmentAnoResponse& from) {
    DeleteSwcAttachmentAnoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcAttachmentAnoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcAttachmentAnoResponse";
  }
  protected:
  explicit DeleteSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcAttachmentAnoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcAttachmentAnoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcAttachmentAnoResponse) */ {
 public:
  inline UpdateSwcAttachmentAnoResponse() : UpdateSwcAttachmentAnoResponse(nullptr) {}
  ~UpdateSwcAttachmentAnoResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcAttachmentAnoResponse(const UpdateSwcAttachmentAnoResponse& from);
  UpdateSwcAttachmentAnoResponse(UpdateSwcAttachmentAnoResponse&& from) noexcept
    : UpdateSwcAttachmentAnoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSwcAttachmentAnoResponse& operator=(const UpdateSwcAttachmentAnoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcAttachmentAnoResponse& operator=(UpdateSwcAttachmentAnoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcAttachmentAnoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcAttachmentAnoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcAttachmentAnoResponse*>(
               &_UpdateSwcAttachmentAnoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(UpdateSwcAttachmentAnoResponse& a, UpdateSwcAttachmentAnoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcAttachmentAnoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcAttachmentAnoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcAttachmentAnoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcAttachmentAnoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcAttachmentAnoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcAttachmentAnoResponse& from) {
    UpdateSwcAttachmentAnoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcAttachmentAnoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcAttachmentAnoResponse";
  }
  protected:
  explicit UpdateSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcAttachmentAnoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcAttachmentAnoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcAttachmentAnoResponse) */ {
 public:
  inline GetSwcAttachmentAnoResponse() : GetSwcAttachmentAnoResponse(nullptr) {}
  ~GetSwcAttachmentAnoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcAttachmentAnoResponse(const GetSwcAttachmentAnoResponse& from);
  GetSwcAttachmentAnoResponse(GetSwcAttachmentAnoResponse&& from) noexcept
    : GetSwcAttachmentAnoResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcAttachmentAnoResponse& operator=(const GetSwcAttachmentAnoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcAttachmentAnoResponse& operator=(GetSwcAttachmentAnoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcAttachmentAnoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcAttachmentAnoResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcAttachmentAnoResponse*>(
               &_GetSwcAttachmentAnoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetSwcAttachmentAnoResponse& a, GetSwcAttachmentAnoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcAttachmentAnoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcAttachmentAnoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcAttachmentAnoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcAttachmentAnoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcAttachmentAnoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcAttachmentAnoResponse& from) {
    GetSwcAttachmentAnoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcAttachmentAnoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcAttachmentAnoResponse";
  }
  protected:
  explicit GetSwcAttachmentAnoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
    kSwcAttachmentAnoFieldNumber = 2,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // .proto.SwcAttachmentAnoV1 SwcAttachmentAno = 2;
  bool has_swcattachmentano() const;
  private:
  bool _internal_has_swcattachmentano() const;
  public:
  void clear_swcattachmentano();
  const ::proto::SwcAttachmentAnoV1& swcattachmentano() const;
  PROTOBUF_NODISCARD ::proto::SwcAttachmentAnoV1* release_swcattachmentano();
  ::proto::SwcAttachmentAnoV1* mutable_swcattachmentano();
  void set_allocated_swcattachmentano(::proto::SwcAttachmentAnoV1* swcattachmentano);
  private:
  const ::proto::SwcAttachmentAnoV1& _internal_swcattachmentano() const;
  ::proto::SwcAttachmentAnoV1* _internal_mutable_swcattachmentano();
  public:
  void unsafe_arena_set_allocated_swcattachmentano(
      ::proto::SwcAttachmentAnoV1* swcattachmentano);
  ::proto::SwcAttachmentAnoV1* unsafe_arena_release_swcattachmentano();

  // @@protoc_insertion_point(class_scope:proto.GetSwcAttachmentAnoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    ::proto::SwcAttachmentAnoV1* swcattachmentano_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class CreateSwcAttachmentApoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.CreateSwcAttachmentApoResponse) */ {
 public:
  inline CreateSwcAttachmentApoResponse() : CreateSwcAttachmentApoResponse(nullptr) {}
  ~CreateSwcAttachmentApoResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateSwcAttachmentApoResponse(const CreateSwcAttachmentApoResponse& from);
  CreateSwcAttachmentApoResponse(CreateSwcAttachmentApoResponse&& from) noexcept
    : CreateSwcAttachmentApoResponse() {
    *this = ::std::move(from);
  }

  inline CreateSwcAttachmentApoResponse& operator=(const CreateSwcAttachmentApoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSwcAttachmentApoResponse& operator=(CreateSwcAttachmentApoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateSwcAttachmentApoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateSwcAttachmentApoResponse* internal_default_instance() {
    return reinterpret_cast<const CreateSwcAttachmentApoResponse*>(
               &_CreateSwcAttachmentApoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CreateSwcAttachmentApoResponse& a, CreateSwcAttachmentApoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSwcAttachmentApoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSwcAttachmentApoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateSwcAttachmentApoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateSwcAttachmentApoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateSwcAttachmentApoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateSwcAttachmentApoResponse& from) {
    CreateSwcAttachmentApoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSwcAttachmentApoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.CreateSwcAttachmentApoResponse";
  }
  protected:
  explicit CreateSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApoAttachmentUuidFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // string ApoAttachmentUuid = 2;
  void clear_apoattachmentuuid();
  const std::string& apoattachmentuuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_apoattachmentuuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_apoattachmentuuid();
  PROTOBUF_NODISCARD std::string* release_apoattachmentuuid();
  void set_allocated_apoattachmentuuid(std::string* apoattachmentuuid);
  private:
  const std::string& _internal_apoattachmentuuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apoattachmentuuid(const std::string& value);
  std::string* _internal_mutable_apoattachmentuuid();
  public:

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.CreateSwcAttachmentApoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apoattachmentuuid_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class DeleteSwcAttachmentApoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.DeleteSwcAttachmentApoResponse) */ {
 public:
  inline DeleteSwcAttachmentApoResponse() : DeleteSwcAttachmentApoResponse(nullptr) {}
  ~DeleteSwcAttachmentApoResponse() override;
  explicit PROTOBUF_CONSTEXPR DeleteSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteSwcAttachmentApoResponse(const DeleteSwcAttachmentApoResponse& from);
  DeleteSwcAttachmentApoResponse(DeleteSwcAttachmentApoResponse&& from) noexcept
    : DeleteSwcAttachmentApoResponse() {
    *this = ::std::move(from);
  }

  inline DeleteSwcAttachmentApoResponse& operator=(const DeleteSwcAttachmentApoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSwcAttachmentApoResponse& operator=(DeleteSwcAttachmentApoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteSwcAttachmentApoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteSwcAttachmentApoResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteSwcAttachmentApoResponse*>(
               &_DeleteSwcAttachmentApoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(DeleteSwcAttachmentApoResponse& a, DeleteSwcAttachmentApoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSwcAttachmentApoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSwcAttachmentApoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteSwcAttachmentApoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteSwcAttachmentApoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteSwcAttachmentApoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DeleteSwcAttachmentApoResponse& from) {
    DeleteSwcAttachmentApoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSwcAttachmentApoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.DeleteSwcAttachmentApoResponse";
  }
  protected:
  explicit DeleteSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.DeleteSwcAttachmentApoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class UpdateSwcAttachmentApoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.UpdateSwcAttachmentApoResponse) */ {
 public:
  inline UpdateSwcAttachmentApoResponse() : UpdateSwcAttachmentApoResponse(nullptr) {}
  ~UpdateSwcAttachmentApoResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateSwcAttachmentApoResponse(const UpdateSwcAttachmentApoResponse& from);
  UpdateSwcAttachmentApoResponse(UpdateSwcAttachmentApoResponse&& from) noexcept
    : UpdateSwcAttachmentApoResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSwcAttachmentApoResponse& operator=(const UpdateSwcAttachmentApoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSwcAttachmentApoResponse& operator=(UpdateSwcAttachmentApoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateSwcAttachmentApoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateSwcAttachmentApoResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSwcAttachmentApoResponse*>(
               &_UpdateSwcAttachmentApoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(UpdateSwcAttachmentApoResponse& a, UpdateSwcAttachmentApoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSwcAttachmentApoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSwcAttachmentApoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateSwcAttachmentApoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateSwcAttachmentApoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateSwcAttachmentApoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateSwcAttachmentApoResponse& from) {
    UpdateSwcAttachmentApoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSwcAttachmentApoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.UpdateSwcAttachmentApoResponse";
  }
  protected:
  explicit UpdateSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.UpdateSwcAttachmentApoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class GetSwcAttachmentApoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.GetSwcAttachmentApoResponse) */ {
 public:
  inline GetSwcAttachmentApoResponse() : GetSwcAttachmentApoResponse(nullptr) {}
  ~GetSwcAttachmentApoResponse() override;
  explicit PROTOBUF_CONSTEXPR GetSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSwcAttachmentApoResponse(const GetSwcAttachmentApoResponse& from);
  GetSwcAttachmentApoResponse(GetSwcAttachmentApoResponse&& from) noexcept
    : GetSwcAttachmentApoResponse() {
    *this = ::std::move(from);
  }

  inline GetSwcAttachmentApoResponse& operator=(const GetSwcAttachmentApoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSwcAttachmentApoResponse& operator=(GetSwcAttachmentApoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSwcAttachmentApoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSwcAttachmentApoResponse* internal_default_instance() {
    return reinterpret_cast<const GetSwcAttachmentApoResponse*>(
               &_GetSwcAttachmentApoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(GetSwcAttachmentApoResponse& a, GetSwcAttachmentApoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSwcAttachmentApoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSwcAttachmentApoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSwcAttachmentApoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSwcAttachmentApoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetSwcAttachmentApoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetSwcAttachmentApoResponse& from) {
    GetSwcAttachmentApoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSwcAttachmentApoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.GetSwcAttachmentApoResponse";
  }
  protected:
  explicit GetSwcAttachmentApoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSwcAttachmentApoFieldNumber = 2,
    kMetaInfoFieldNumber = 1,
  };
  // repeated .proto.SwcAttachmentApoV1 SwcAttachmentApo = 2;
  int swcattachmentapo_size() const;
  private:
  int _internal_swcattachmentapo_size() const;
  public:
  void clear_swcattachmentapo();
  ::proto::SwcAttachmentApoV1* mutable_swcattachmentapo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
      mutable_swcattachmentapo();
  private:
  const ::proto::SwcAttachmentApoV1& _internal_swcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* _internal_add_swcattachmentapo();
  public:
  const ::proto::SwcAttachmentApoV1& swcattachmentapo(int index) const;
  ::proto::SwcAttachmentApoV1* add_swcattachmentapo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
      swcattachmentapo() const;

  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.GetSwcAttachmentApoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 > swcattachmentapo_;
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// -------------------------------------------------------------------

class RevertSwcVersionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:proto.RevertSwcVersionResponse) */ {
 public:
  inline RevertSwcVersionResponse() : RevertSwcVersionResponse(nullptr) {}
  ~RevertSwcVersionResponse() override;
  explicit PROTOBUF_CONSTEXPR RevertSwcVersionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevertSwcVersionResponse(const RevertSwcVersionResponse& from);
  RevertSwcVersionResponse(RevertSwcVersionResponse&& from) noexcept
    : RevertSwcVersionResponse() {
    *this = ::std::move(from);
  }

  inline RevertSwcVersionResponse& operator=(const RevertSwcVersionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevertSwcVersionResponse& operator=(RevertSwcVersionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RevertSwcVersionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevertSwcVersionResponse* internal_default_instance() {
    return reinterpret_cast<const RevertSwcVersionResponse*>(
               &_RevertSwcVersionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(RevertSwcVersionResponse& a, RevertSwcVersionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RevertSwcVersionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevertSwcVersionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevertSwcVersionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevertSwcVersionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RevertSwcVersionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RevertSwcVersionResponse& from) {
    RevertSwcVersionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RevertSwcVersionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "proto.RevertSwcVersionResponse";
  }
  protected:
  explicit RevertSwcVersionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaInfoFieldNumber = 1,
  };
  // .proto.ResponseMetaInfoV1 metaInfo = 1;
  bool has_metainfo() const;
  private:
  bool _internal_has_metainfo() const;
  public:
  void clear_metainfo();
  const ::proto::ResponseMetaInfoV1& metainfo() const;
  PROTOBUF_NODISCARD ::proto::ResponseMetaInfoV1* release_metainfo();
  ::proto::ResponseMetaInfoV1* mutable_metainfo();
  void set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo);
  private:
  const ::proto::ResponseMetaInfoV1& _internal_metainfo() const;
  ::proto::ResponseMetaInfoV1* _internal_mutable_metainfo();
  public:
  void unsafe_arena_set_allocated_metainfo(
      ::proto::ResponseMetaInfoV1* metainfo);
  ::proto::ResponseMetaInfoV1* unsafe_arena_release_metainfo();

  // @@protoc_insertion_point(class_scope:proto.RevertSwcVersionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::proto::ResponseMetaInfoV1* metainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2fResponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateUserResponse.metaInfo)
  return _msg;
}
inline void CreateUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateUserResponse.metaInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 2;
inline bool CreateUserResponse::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool CreateUserResponse::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& CreateUserResponse::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& CreateUserResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateUserResponse.UserInfo)
  return _internal_userinfo();
}
inline void CreateUserResponse::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateUserResponse.UserInfo)
}
inline ::proto::UserMetaInfoV1* CreateUserResponse::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserResponse::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateUserResponse.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* CreateUserResponse::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* CreateUserResponse::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateUserResponse.UserInfo)
  return _msg;
}
inline void CreateUserResponse::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateUserResponse.UserInfo)
}

// -------------------------------------------------------------------

// DeleteUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteUserResponse.metaInfo)
  return _msg;
}
inline void DeleteUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteUserResponse.metaInfo)
}

// -------------------------------------------------------------------

// UpdateUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserResponse.metaInfo)
  return _msg;
}
inline void UpdateUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserResponse.metaInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 2;
inline bool UpdateUserResponse::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UpdateUserResponse::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UpdateUserResponse::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UpdateUserResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateUserResponse.UserInfo)
  return _internal_userinfo();
}
inline void UpdateUserResponse::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateUserResponse.UserInfo)
}
inline ::proto::UserMetaInfoV1* UpdateUserResponse::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserResponse::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateUserResponse.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UpdateUserResponse::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UpdateUserResponse::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateUserResponse.UserInfo)
  return _msg;
}
inline void UpdateUserResponse::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateUserResponse.UserInfo)
}

// -------------------------------------------------------------------

// GetUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserResponse.metaInfo)
  return _msg;
}
inline void GetUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserResponse.metaInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 2;
inline bool GetUserResponse::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool GetUserResponse::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& GetUserResponse::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& GetUserResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserResponse.UserInfo)
  return _internal_userinfo();
}
inline void GetUserResponse::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserResponse.UserInfo)
}
inline ::proto::UserMetaInfoV1* GetUserResponse::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserResponse::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserResponse.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* GetUserResponse::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* GetUserResponse::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserResponse.UserInfo)
  return _msg;
}
inline void GetUserResponse::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserResponse.UserInfo)
}

// -------------------------------------------------------------------

// GetAllUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllUserResponse.metaInfo)
  return _msg;
}
inline void GetAllUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllUserResponse.metaInfo)
}

// repeated .proto.UserMetaInfoV1 UserInfo = 2;
inline int GetAllUserResponse::_internal_userinfo_size() const {
  return _impl_.userinfo_.size();
}
inline int GetAllUserResponse::userinfo_size() const {
  return _internal_userinfo_size();
}
inline ::proto::UserMetaInfoV1* GetAllUserResponse::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllUserResponse.UserInfo)
  return _impl_.userinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMetaInfoV1 >*
GetAllUserResponse::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllUserResponse.UserInfo)
  return &_impl_.userinfo_;
}
inline const ::proto::UserMetaInfoV1& GetAllUserResponse::_internal_userinfo(int index) const {
  return _impl_.userinfo_.Get(index);
}
inline const ::proto::UserMetaInfoV1& GetAllUserResponse::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllUserResponse.UserInfo)
  return _internal_userinfo(index);
}
inline ::proto::UserMetaInfoV1* GetAllUserResponse::_internal_add_userinfo() {
  return _impl_.userinfo_.Add();
}
inline ::proto::UserMetaInfoV1* GetAllUserResponse::add_userinfo() {
  ::proto::UserMetaInfoV1* _add = _internal_add_userinfo();
  // @@protoc_insertion_point(field_add:proto.GetAllUserResponse.UserInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::UserMetaInfoV1 >&
GetAllUserResponse::userinfo() const {
  // @@protoc_insertion_point(field_list:proto.GetAllUserResponse.UserInfo)
  return _impl_.userinfo_;
}

// -------------------------------------------------------------------

// UserLoginResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UserLoginResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserLoginResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UserLoginResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UserLoginResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginResponse.metaInfo)
  return _internal_metainfo();
}
inline void UserLoginResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLoginResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UserLoginResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserLoginResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserLoginResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserLoginResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UserLoginResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginResponse.metaInfo)
  return _msg;
}
inline void UserLoginResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginResponse.metaInfo)
}

// .proto.UserMetaInfoV1 UserInfo = 2;
inline bool UserLoginResponse::_internal_has_userinfo() const {
  return this != internal_default_instance() && _impl_.userinfo_ != nullptr;
}
inline bool UserLoginResponse::has_userinfo() const {
  return _internal_has_userinfo();
}
inline const ::proto::UserMetaInfoV1& UserLoginResponse::_internal_userinfo() const {
  const ::proto::UserMetaInfoV1* p = _impl_.userinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserMetaInfoV1&>(
      ::proto::_UserMetaInfoV1_default_instance_);
}
inline const ::proto::UserMetaInfoV1& UserLoginResponse::userinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginResponse.UserInfo)
  return _internal_userinfo();
}
inline void UserLoginResponse::unsafe_arena_set_allocated_userinfo(
    ::proto::UserMetaInfoV1* userinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  _impl_.userinfo_ = userinfo;
  if (userinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLoginResponse.UserInfo)
}
inline ::proto::UserMetaInfoV1* UserLoginResponse::release_userinfo() {
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserMetaInfoV1* UserLoginResponse::unsafe_arena_release_userinfo() {
  // @@protoc_insertion_point(field_release:proto.UserLoginResponse.UserInfo)
  
  ::proto::UserMetaInfoV1* temp = _impl_.userinfo_;
  _impl_.userinfo_ = nullptr;
  return temp;
}
inline ::proto::UserMetaInfoV1* UserLoginResponse::_internal_mutable_userinfo() {
  
  if (_impl_.userinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserMetaInfoV1>(GetArenaForAllocation());
    _impl_.userinfo_ = p;
  }
  return _impl_.userinfo_;
}
inline ::proto::UserMetaInfoV1* UserLoginResponse::mutable_userinfo() {
  ::proto::UserMetaInfoV1* _msg = _internal_mutable_userinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginResponse.UserInfo)
  return _msg;
}
inline void UserLoginResponse::set_allocated_userinfo(::proto::UserMetaInfoV1* userinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userinfo_);
  }
  if (userinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userinfo));
    if (message_arena != submessage_arena) {
      userinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userinfo_ = userinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginResponse.UserInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 3;
inline bool UserLoginResponse::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UserLoginResponse::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UserLoginResponse::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UserLoginResponse::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLoginResponse.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UserLoginResponse::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLoginResponse.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UserLoginResponse::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserLoginResponse::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UserLoginResponse.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserLoginResponse::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UserLoginResponse::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLoginResponse.UserVerifyInfo)
  return _msg;
}
inline void UserLoginResponse::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLoginResponse.UserVerifyInfo)
}

// -------------------------------------------------------------------

// UserLogoutResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UserLogoutResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserLogoutResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UserLogoutResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UserLogoutResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserLogoutResponse.metaInfo)
  return _internal_metainfo();
}
inline void UserLogoutResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserLogoutResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UserLogoutResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserLogoutResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserLogoutResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserLogoutResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UserLogoutResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserLogoutResponse.metaInfo)
  return _msg;
}
inline void UserLogoutResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserLogoutResponse.metaInfo)
}

// -------------------------------------------------------------------

// UserOnlineHeartBeatResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UserOnlineHeartBeatResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UserOnlineHeartBeatResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UserOnlineHeartBeatResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UserOnlineHeartBeatResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatResponse.metaInfo)
  return _internal_metainfo();
}
inline void UserOnlineHeartBeatResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserOnlineHeartBeatResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UserOnlineHeartBeatResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserOnlineHeartBeatResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UserOnlineHeartBeatResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UserOnlineHeartBeatResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UserOnlineHeartBeatResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UserOnlineHeartBeatResponse.metaInfo)
  return _msg;
}
inline void UserOnlineHeartBeatResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserOnlineHeartBeatResponse.metaInfo)
}

// .proto.UserVerifyInfoV1 UserVerifyInfo = 2;
inline bool UserOnlineHeartBeatResponse::_internal_has_userverifyinfo() const {
  return this != internal_default_instance() && _impl_.userverifyinfo_ != nullptr;
}
inline bool UserOnlineHeartBeatResponse::has_userverifyinfo() const {
  return _internal_has_userverifyinfo();
}
inline const ::proto::UserVerifyInfoV1& UserOnlineHeartBeatResponse::_internal_userverifyinfo() const {
  const ::proto::UserVerifyInfoV1* p = _impl_.userverifyinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::UserVerifyInfoV1&>(
      ::proto::_UserVerifyInfoV1_default_instance_);
}
inline const ::proto::UserVerifyInfoV1& UserOnlineHeartBeatResponse::userverifyinfo() const {
  // @@protoc_insertion_point(field_get:proto.UserOnlineHeartBeatResponse.UserVerifyInfo)
  return _internal_userverifyinfo();
}
inline void UserOnlineHeartBeatResponse::unsafe_arena_set_allocated_userverifyinfo(
    ::proto::UserVerifyInfoV1* userverifyinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  if (userverifyinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UserOnlineHeartBeatResponse.UserVerifyInfo)
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatResponse::release_userverifyinfo() {
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatResponse::unsafe_arena_release_userverifyinfo() {
  // @@protoc_insertion_point(field_release:proto.UserOnlineHeartBeatResponse.UserVerifyInfo)
  
  ::proto::UserVerifyInfoV1* temp = _impl_.userverifyinfo_;
  _impl_.userverifyinfo_ = nullptr;
  return temp;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatResponse::_internal_mutable_userverifyinfo() {
  
  if (_impl_.userverifyinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::UserVerifyInfoV1>(GetArenaForAllocation());
    _impl_.userverifyinfo_ = p;
  }
  return _impl_.userverifyinfo_;
}
inline ::proto::UserVerifyInfoV1* UserOnlineHeartBeatResponse::mutable_userverifyinfo() {
  ::proto::UserVerifyInfoV1* _msg = _internal_mutable_userverifyinfo();
  // @@protoc_insertion_point(field_mutable:proto.UserOnlineHeartBeatResponse.UserVerifyInfo)
  return _msg;
}
inline void UserOnlineHeartBeatResponse::set_allocated_userverifyinfo(::proto::UserVerifyInfoV1* userverifyinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.userverifyinfo_);
  }
  if (userverifyinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(userverifyinfo));
    if (message_arena != submessage_arena) {
      userverifyinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, userverifyinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.userverifyinfo_ = userverifyinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UserOnlineHeartBeatResponse.UserVerifyInfo)
}

// -------------------------------------------------------------------

// GetUserPermissionGroupResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetUserPermissionGroupResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetUserPermissionGroupResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetUserPermissionGroupResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetUserPermissionGroupResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetUserPermissionGroupResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetUserPermissionGroupResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserPermissionGroupResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetUserPermissionGroupResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetUserPermissionGroupResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetUserPermissionGroupResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetUserPermissionGroupResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetUserPermissionGroupResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetUserPermissionGroupResponse.metaInfo)
  return _msg;
}
inline void GetUserPermissionGroupResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserPermissionGroupResponse.metaInfo)
}

// .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
inline bool GetUserPermissionGroupResponse::_internal_has_permissiongroup() const {
  return this != internal_default_instance() && _impl_.permissiongroup_ != nullptr;
}
inline bool GetUserPermissionGroupResponse::has_permissiongroup() const {
  return _internal_has_permissiongroup();
}
inline const ::proto::PermissionGroupMetaInfoV1& GetUserPermissionGroupResponse::_internal_permissiongroup() const {
  const ::proto::PermissionGroupMetaInfoV1* p = _impl_.permissiongroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupMetaInfoV1&>(
      ::proto::_PermissionGroupMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionGroupMetaInfoV1& GetUserPermissionGroupResponse::permissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.GetUserPermissionGroupResponse.PermissionGroup)
  return _internal_permissiongroup();
}
inline void GetUserPermissionGroupResponse::unsafe_arena_set_allocated_permissiongroup(
    ::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  _impl_.permissiongroup_ = permissiongroup;
  if (permissiongroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetUserPermissionGroupResponse.PermissionGroup)
}
inline ::proto::PermissionGroupMetaInfoV1* GetUserPermissionGroupResponse::release_permissiongroup() {
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetUserPermissionGroupResponse::unsafe_arena_release_permissiongroup() {
  // @@protoc_insertion_point(field_release:proto.GetUserPermissionGroupResponse.PermissionGroup)
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetUserPermissionGroupResponse::_internal_mutable_permissiongroup() {
  
  if (_impl_.permissiongroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(GetArenaForAllocation());
    _impl_.permissiongroup_ = p;
  }
  return _impl_.permissiongroup_;
}
inline ::proto::PermissionGroupMetaInfoV1* GetUserPermissionGroupResponse::mutable_permissiongroup() {
  ::proto::PermissionGroupMetaInfoV1* _msg = _internal_mutable_permissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.GetUserPermissionGroupResponse.PermissionGroup)
  return _msg;
}
inline void GetUserPermissionGroupResponse::set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  if (permissiongroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permissiongroup));
    if (message_arena != submessage_arena) {
      permissiongroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroup_ = permissiongroup;
  // @@protoc_insertion_point(field_set_allocated:proto.GetUserPermissionGroupResponse.PermissionGroup)
}

// -------------------------------------------------------------------

// GetPermissionGroupResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetPermissionGroupResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetPermissionGroupResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetPermissionGroupResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetPermissionGroupResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetPermissionGroupResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetPermissionGroupResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetPermissionGroupResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetPermissionGroupResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetPermissionGroupResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupResponse.metaInfo)
  return _msg;
}
inline void GetPermissionGroupResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupResponse.metaInfo)
}

// .proto.PermissionGroupMetaInfoV1 PermissionGroup = 2;
inline bool GetPermissionGroupResponse::_internal_has_permissiongroup() const {
  return this != internal_default_instance() && _impl_.permissiongroup_ != nullptr;
}
inline bool GetPermissionGroupResponse::has_permissiongroup() const {
  return _internal_has_permissiongroup();
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupResponse::_internal_permissiongroup() const {
  const ::proto::PermissionGroupMetaInfoV1* p = _impl_.permissiongroup_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::PermissionGroupMetaInfoV1&>(
      ::proto::_PermissionGroupMetaInfoV1_default_instance_);
}
inline const ::proto::PermissionGroupMetaInfoV1& GetPermissionGroupResponse::permissiongroup() const {
  // @@protoc_insertion_point(field_get:proto.GetPermissionGroupResponse.PermissionGroup)
  return _internal_permissiongroup();
}
inline void GetPermissionGroupResponse::unsafe_arena_set_allocated_permissiongroup(
    ::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  _impl_.permissiongroup_ = permissiongroup;
  if (permissiongroup) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetPermissionGroupResponse.PermissionGroup)
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupResponse::release_permissiongroup() {
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupResponse::unsafe_arena_release_permissiongroup() {
  // @@protoc_insertion_point(field_release:proto.GetPermissionGroupResponse.PermissionGroup)
  
  ::proto::PermissionGroupMetaInfoV1* temp = _impl_.permissiongroup_;
  _impl_.permissiongroup_ = nullptr;
  return temp;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupResponse::_internal_mutable_permissiongroup() {
  
  if (_impl_.permissiongroup_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::PermissionGroupMetaInfoV1>(GetArenaForAllocation());
    _impl_.permissiongroup_ = p;
  }
  return _impl_.permissiongroup_;
}
inline ::proto::PermissionGroupMetaInfoV1* GetPermissionGroupResponse::mutable_permissiongroup() {
  ::proto::PermissionGroupMetaInfoV1* _msg = _internal_mutable_permissiongroup();
  // @@protoc_insertion_point(field_mutable:proto.GetPermissionGroupResponse.PermissionGroup)
  return _msg;
}
inline void GetPermissionGroupResponse::set_allocated_permissiongroup(::proto::PermissionGroupMetaInfoV1* permissiongroup) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.permissiongroup_);
  }
  if (permissiongroup) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(permissiongroup));
    if (message_arena != submessage_arena) {
      permissiongroup = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, permissiongroup, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.permissiongroup_ = permissiongroup;
  // @@protoc_insertion_point(field_set_allocated:proto.GetPermissionGroupResponse.PermissionGroup)
}

// -------------------------------------------------------------------

// GetAllPermissionGroupResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllPermissionGroupResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllPermissionGroupResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllPermissionGroupResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllPermissionGroupResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllPermissionGroupResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllPermissionGroupResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllPermissionGroupResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllPermissionGroupResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllPermissionGroupResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllPermissionGroupResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllPermissionGroupResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllPermissionGroupResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllPermissionGroupResponse.metaInfo)
  return _msg;
}
inline void GetAllPermissionGroupResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllPermissionGroupResponse.metaInfo)
}

// repeated .proto.PermissionGroupMetaInfoV1 PermissionGroupList = 2;
inline int GetAllPermissionGroupResponse::_internal_permissiongrouplist_size() const {
  return _impl_.permissiongrouplist_.size();
}
inline int GetAllPermissionGroupResponse::permissiongrouplist_size() const {
  return _internal_permissiongrouplist_size();
}
inline ::proto::PermissionGroupMetaInfoV1* GetAllPermissionGroupResponse::mutable_permissiongrouplist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllPermissionGroupResponse.PermissionGroupList)
  return _impl_.permissiongrouplist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PermissionGroupMetaInfoV1 >*
GetAllPermissionGroupResponse::mutable_permissiongrouplist() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllPermissionGroupResponse.PermissionGroupList)
  return &_impl_.permissiongrouplist_;
}
inline const ::proto::PermissionGroupMetaInfoV1& GetAllPermissionGroupResponse::_internal_permissiongrouplist(int index) const {
  return _impl_.permissiongrouplist_.Get(index);
}
inline const ::proto::PermissionGroupMetaInfoV1& GetAllPermissionGroupResponse::permissiongrouplist(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllPermissionGroupResponse.PermissionGroupList)
  return _internal_permissiongrouplist(index);
}
inline ::proto::PermissionGroupMetaInfoV1* GetAllPermissionGroupResponse::_internal_add_permissiongrouplist() {
  return _impl_.permissiongrouplist_.Add();
}
inline ::proto::PermissionGroupMetaInfoV1* GetAllPermissionGroupResponse::add_permissiongrouplist() {
  ::proto::PermissionGroupMetaInfoV1* _add = _internal_add_permissiongrouplist();
  // @@protoc_insertion_point(field_add:proto.GetAllPermissionGroupResponse.PermissionGroupList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::PermissionGroupMetaInfoV1 >&
GetAllPermissionGroupResponse::permissiongrouplist() const {
  // @@protoc_insertion_point(field_list:proto.GetAllPermissionGroupResponse.PermissionGroupList)
  return _impl_.permissiongrouplist_;
}

// -------------------------------------------------------------------

// ChangeUserPermissionGroupResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool ChangeUserPermissionGroupResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool ChangeUserPermissionGroupResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& ChangeUserPermissionGroupResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& ChangeUserPermissionGroupResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.ChangeUserPermissionGroupResponse.metaInfo)
  return _internal_metainfo();
}
inline void ChangeUserPermissionGroupResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.ChangeUserPermissionGroupResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* ChangeUserPermissionGroupResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* ChangeUserPermissionGroupResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.ChangeUserPermissionGroupResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* ChangeUserPermissionGroupResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* ChangeUserPermissionGroupResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.ChangeUserPermissionGroupResponse.metaInfo)
  return _msg;
}
inline void ChangeUserPermissionGroupResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.ChangeUserPermissionGroupResponse.metaInfo)
}

// -------------------------------------------------------------------

// CreateProjectResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateProjectResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateProjectResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateProjectResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateProjectResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateProjectResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateProjectResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateProjectResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateProjectResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateProjectResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectResponse.metaInfo)
  return _msg;
}
inline void CreateProjectResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectResponse.metaInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool CreateProjectResponse::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool CreateProjectResponse::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectResponse::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& CreateProjectResponse::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateProjectResponse.ProjectInfo)
  return _internal_projectinfo();
}
inline void CreateProjectResponse::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateProjectResponse.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* CreateProjectResponse::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectResponse::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateProjectResponse.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectResponse::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* CreateProjectResponse::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateProjectResponse.ProjectInfo)
  return _msg;
}
inline void CreateProjectResponse::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateProjectResponse.ProjectInfo)
}

// -------------------------------------------------------------------

// DeleteProjectResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteProjectResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteProjectResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteProjectResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteProjectResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteProjectResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteProjectResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteProjectResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteProjectResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteProjectResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectResponse.metaInfo)
  return _msg;
}
inline void DeleteProjectResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectResponse.metaInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool DeleteProjectResponse::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool DeleteProjectResponse::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& DeleteProjectResponse::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& DeleteProjectResponse::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteProjectResponse.ProjectInfo)
  return _internal_projectinfo();
}
inline void DeleteProjectResponse::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteProjectResponse.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectResponse::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectResponse::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteProjectResponse.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectResponse::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* DeleteProjectResponse::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteProjectResponse.ProjectInfo)
  return _msg;
}
inline void DeleteProjectResponse::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteProjectResponse.ProjectInfo)
}

// -------------------------------------------------------------------

// UpdateProjectResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateProjectResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateProjectResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateProjectResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateProjectResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateProjectResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateProjectResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateProjectResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateProjectResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateProjectResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectResponse.metaInfo)
  return _msg;
}
inline void UpdateProjectResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectResponse.metaInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool UpdateProjectResponse::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool UpdateProjectResponse::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectResponse::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& UpdateProjectResponse::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateProjectResponse.ProjectInfo)
  return _internal_projectinfo();
}
inline void UpdateProjectResponse::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateProjectResponse.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectResponse::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectResponse::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateProjectResponse.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectResponse::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* UpdateProjectResponse::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateProjectResponse.ProjectInfo)
  return _msg;
}
inline void UpdateProjectResponse::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateProjectResponse.ProjectInfo)
}

// -------------------------------------------------------------------

// GetProjectResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetProjectResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetProjectResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetProjectResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetProjectResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetProjectResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetProjectResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetProjectResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetProjectResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetProjectResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectResponse.metaInfo)
  return _msg;
}
inline void GetProjectResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectResponse.metaInfo)
}

// .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline bool GetProjectResponse::_internal_has_projectinfo() const {
  return this != internal_default_instance() && _impl_.projectinfo_ != nullptr;
}
inline bool GetProjectResponse::has_projectinfo() const {
  return _internal_has_projectinfo();
}
inline const ::proto::ProjectMetaInfoV1& GetProjectResponse::_internal_projectinfo() const {
  const ::proto::ProjectMetaInfoV1* p = _impl_.projectinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ProjectMetaInfoV1&>(
      ::proto::_ProjectMetaInfoV1_default_instance_);
}
inline const ::proto::ProjectMetaInfoV1& GetProjectResponse::projectinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetProjectResponse.ProjectInfo)
  return _internal_projectinfo();
}
inline void GetProjectResponse::unsafe_arena_set_allocated_projectinfo(
    ::proto::ProjectMetaInfoV1* projectinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  _impl_.projectinfo_ = projectinfo;
  if (projectinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetProjectResponse.ProjectInfo)
}
inline ::proto::ProjectMetaInfoV1* GetProjectResponse::release_projectinfo() {
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ProjectMetaInfoV1* GetProjectResponse::unsafe_arena_release_projectinfo() {
  // @@protoc_insertion_point(field_release:proto.GetProjectResponse.ProjectInfo)
  
  ::proto::ProjectMetaInfoV1* temp = _impl_.projectinfo_;
  _impl_.projectinfo_ = nullptr;
  return temp;
}
inline ::proto::ProjectMetaInfoV1* GetProjectResponse::_internal_mutable_projectinfo() {
  
  if (_impl_.projectinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ProjectMetaInfoV1>(GetArenaForAllocation());
    _impl_.projectinfo_ = p;
  }
  return _impl_.projectinfo_;
}
inline ::proto::ProjectMetaInfoV1* GetProjectResponse::mutable_projectinfo() {
  ::proto::ProjectMetaInfoV1* _msg = _internal_mutable_projectinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetProjectResponse.ProjectInfo)
  return _msg;
}
inline void GetProjectResponse::set_allocated_projectinfo(::proto::ProjectMetaInfoV1* projectinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectinfo_);
  }
  if (projectinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectinfo));
    if (message_arena != submessage_arena) {
      projectinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.projectinfo_ = projectinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetProjectResponse.ProjectInfo)
}

// -------------------------------------------------------------------

// GetAllProjectResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllProjectResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllProjectResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllProjectResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllProjectResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllProjectResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllProjectResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllProjectResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllProjectResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllProjectResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllProjectResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllProjectResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllProjectResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllProjectResponse.metaInfo)
  return _msg;
}
inline void GetAllProjectResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllProjectResponse.metaInfo)
}

// repeated .proto.ProjectMetaInfoV1 ProjectInfo = 2;
inline int GetAllProjectResponse::_internal_projectinfo_size() const {
  return _impl_.projectinfo_.size();
}
inline int GetAllProjectResponse::projectinfo_size() const {
  return _internal_projectinfo_size();
}
inline ::proto::ProjectMetaInfoV1* GetAllProjectResponse::mutable_projectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllProjectResponse.ProjectInfo)
  return _impl_.projectinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectMetaInfoV1 >*
GetAllProjectResponse::mutable_projectinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllProjectResponse.ProjectInfo)
  return &_impl_.projectinfo_;
}
inline const ::proto::ProjectMetaInfoV1& GetAllProjectResponse::_internal_projectinfo(int index) const {
  return _impl_.projectinfo_.Get(index);
}
inline const ::proto::ProjectMetaInfoV1& GetAllProjectResponse::projectinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllProjectResponse.ProjectInfo)
  return _internal_projectinfo(index);
}
inline ::proto::ProjectMetaInfoV1* GetAllProjectResponse::_internal_add_projectinfo() {
  return _impl_.projectinfo_.Add();
}
inline ::proto::ProjectMetaInfoV1* GetAllProjectResponse::add_projectinfo() {
  ::proto::ProjectMetaInfoV1* _add = _internal_add_projectinfo();
  // @@protoc_insertion_point(field_add:proto.GetAllProjectResponse.ProjectInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::ProjectMetaInfoV1 >&
GetAllProjectResponse::projectinfo() const {
  // @@protoc_insertion_point(field_list:proto.GetAllProjectResponse.ProjectInfo)
  return _impl_.projectinfo_;
}

// -------------------------------------------------------------------

// CreateSwcResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateSwcResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateSwcResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcResponse.metaInfo)
  return _msg;
}
inline void CreateSwcResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcResponse.metaInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool CreateSwcResponse::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool CreateSwcResponse::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& CreateSwcResponse::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& CreateSwcResponse::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcResponse.SwcInfo)
  return _internal_swcinfo();
}
inline void CreateSwcResponse::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcResponse.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* CreateSwcResponse::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcResponse::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcResponse.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* CreateSwcResponse::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* CreateSwcResponse::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcResponse.SwcInfo)
  return _msg;
}
inline void CreateSwcResponse::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcResponse.SwcInfo)
}

// string AnoAttachmentUuid = 3;
inline void CreateSwcResponse::clear_anoattachmentuuid() {
  _impl_.anoattachmentuuid_.ClearToEmpty();
}
inline const std::string& CreateSwcResponse::anoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcResponse.AnoAttachmentUuid)
  return _internal_anoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcResponse::set_anoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcResponse.AnoAttachmentUuid)
}
inline std::string* CreateSwcResponse::mutable_anoattachmentuuid() {
  std::string* _s = _internal_mutable_anoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcResponse.AnoAttachmentUuid)
  return _s;
}
inline const std::string& CreateSwcResponse::_internal_anoattachmentuuid() const {
  return _impl_.anoattachmentuuid_.Get();
}
inline void CreateSwcResponse::_internal_set_anoattachmentuuid(const std::string& value) {
  
  _impl_.anoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcResponse::_internal_mutable_anoattachmentuuid() {
  
  return _impl_.anoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcResponse::release_anoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcResponse.AnoAttachmentUuid)
  return _impl_.anoattachmentuuid_.Release();
}
inline void CreateSwcResponse::set_allocated_anoattachmentuuid(std::string* anoattachmentuuid) {
  if (anoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.anoattachmentuuid_.SetAllocated(anoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anoattachmentuuid_.IsDefault()) {
    _impl_.anoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcResponse.AnoAttachmentUuid)
}

// string ApoAttachmentUuid = 4;
inline void CreateSwcResponse::clear_apoattachmentuuid() {
  _impl_.apoattachmentuuid_.ClearToEmpty();
}
inline const std::string& CreateSwcResponse::apoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcResponse.ApoAttachmentUuid)
  return _internal_apoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcResponse::set_apoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcResponse.ApoAttachmentUuid)
}
inline std::string* CreateSwcResponse::mutable_apoattachmentuuid() {
  std::string* _s = _internal_mutable_apoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcResponse.ApoAttachmentUuid)
  return _s;
}
inline const std::string& CreateSwcResponse::_internal_apoattachmentuuid() const {
  return _impl_.apoattachmentuuid_.Get();
}
inline void CreateSwcResponse::_internal_set_apoattachmentuuid(const std::string& value) {
  
  _impl_.apoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcResponse::_internal_mutable_apoattachmentuuid() {
  
  return _impl_.apoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcResponse::release_apoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcResponse.ApoAttachmentUuid)
  return _impl_.apoattachmentuuid_.Release();
}
inline void CreateSwcResponse::set_allocated_apoattachmentuuid(std::string* apoattachmentuuid) {
  if (apoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.apoattachmentuuid_.SetAllocated(apoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apoattachmentuuid_.IsDefault()) {
    _impl_.apoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcResponse.ApoAttachmentUuid)
}

// -------------------------------------------------------------------

// DeleteSwcResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcResponse.metaInfo)
  return _msg;
}
inline void DeleteSwcResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcResponse.metaInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool DeleteSwcResponse::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool DeleteSwcResponse::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcResponse::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& DeleteSwcResponse::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcResponse.SwcInfo)
  return _internal_swcinfo();
}
inline void DeleteSwcResponse::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcResponse.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* DeleteSwcResponse::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcResponse::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcResponse.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcResponse::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* DeleteSwcResponse::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcResponse.SwcInfo)
  return _msg;
}
inline void DeleteSwcResponse::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcResponse.SwcInfo)
}

// -------------------------------------------------------------------

// UpdateSwcResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcResponse.metaInfo)
  return _msg;
}
inline void UpdateSwcResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcResponse.metaInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool UpdateSwcResponse::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool UpdateSwcResponse::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcResponse::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& UpdateSwcResponse::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcResponse.SwcInfo)
  return _internal_swcinfo();
}
inline void UpdateSwcResponse::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcResponse.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* UpdateSwcResponse::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcResponse::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcResponse.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcResponse::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* UpdateSwcResponse::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcResponse.SwcInfo)
  return _msg;
}
inline void UpdateSwcResponse::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcResponse.SwcInfo)
}

// -------------------------------------------------------------------

// GetSwcMetaInfoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcMetaInfoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcMetaInfoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcMetaInfoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcMetaInfoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcMetaInfoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcMetaInfoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcMetaInfoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcMetaInfoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcMetaInfoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoResponse.metaInfo)
  return _msg;
}
inline void GetSwcMetaInfoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoResponse.metaInfo)
}

// .proto.SwcMetaInfoV1 SwcInfo = 2;
inline bool GetSwcMetaInfoResponse::_internal_has_swcinfo() const {
  return this != internal_default_instance() && _impl_.swcinfo_ != nullptr;
}
inline bool GetSwcMetaInfoResponse::has_swcinfo() const {
  return _internal_has_swcinfo();
}
inline const ::proto::SwcMetaInfoV1& GetSwcMetaInfoResponse::_internal_swcinfo() const {
  const ::proto::SwcMetaInfoV1* p = _impl_.swcinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcMetaInfoV1&>(
      ::proto::_SwcMetaInfoV1_default_instance_);
}
inline const ::proto::SwcMetaInfoV1& GetSwcMetaInfoResponse::swcinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcMetaInfoResponse.SwcInfo)
  return _internal_swcinfo();
}
inline void GetSwcMetaInfoResponse::unsafe_arena_set_allocated_swcinfo(
    ::proto::SwcMetaInfoV1* swcinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  _impl_.swcinfo_ = swcinfo;
  if (swcinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcMetaInfoResponse.SwcInfo)
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoResponse::release_swcinfo() {
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoResponse::unsafe_arena_release_swcinfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcMetaInfoResponse.SwcInfo)
  
  ::proto::SwcMetaInfoV1* temp = _impl_.swcinfo_;
  _impl_.swcinfo_ = nullptr;
  return temp;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoResponse::_internal_mutable_swcinfo() {
  
  if (_impl_.swcinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcMetaInfoV1>(GetArenaForAllocation());
    _impl_.swcinfo_ = p;
  }
  return _impl_.swcinfo_;
}
inline ::proto::SwcMetaInfoV1* GetSwcMetaInfoResponse::mutable_swcinfo() {
  ::proto::SwcMetaInfoV1* _msg = _internal_mutable_swcinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcMetaInfoResponse.SwcInfo)
  return _msg;
}
inline void GetSwcMetaInfoResponse::set_allocated_swcinfo(::proto::SwcMetaInfoV1* swcinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcinfo_);
  }
  if (swcinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcinfo));
    if (message_arena != submessage_arena) {
      swcinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcinfo_ = swcinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcMetaInfoResponse.SwcInfo)
}

// -------------------------------------------------------------------

// GetAllSwcMetaInfoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllSwcMetaInfoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllSwcMetaInfoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllSwcMetaInfoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllSwcMetaInfoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSwcMetaInfoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllSwcMetaInfoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSwcMetaInfoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllSwcMetaInfoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllSwcMetaInfoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSwcMetaInfoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllSwcMetaInfoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllSwcMetaInfoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSwcMetaInfoResponse.metaInfo)
  return _msg;
}
inline void GetAllSwcMetaInfoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSwcMetaInfoResponse.metaInfo)
}

// repeated .proto.SwcMetaInfoV1 SwcInfo = 2;
inline int GetAllSwcMetaInfoResponse::_internal_swcinfo_size() const {
  return _impl_.swcinfo_.size();
}
inline int GetAllSwcMetaInfoResponse::swcinfo_size() const {
  return _internal_swcinfo_size();
}
inline ::proto::SwcMetaInfoV1* GetAllSwcMetaInfoResponse::mutable_swcinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllSwcMetaInfoResponse.SwcInfo)
  return _impl_.swcinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcMetaInfoV1 >*
GetAllSwcMetaInfoResponse::mutable_swcinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllSwcMetaInfoResponse.SwcInfo)
  return &_impl_.swcinfo_;
}
inline const ::proto::SwcMetaInfoV1& GetAllSwcMetaInfoResponse::_internal_swcinfo(int index) const {
  return _impl_.swcinfo_.Get(index);
}
inline const ::proto::SwcMetaInfoV1& GetAllSwcMetaInfoResponse::swcinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllSwcMetaInfoResponse.SwcInfo)
  return _internal_swcinfo(index);
}
inline ::proto::SwcMetaInfoV1* GetAllSwcMetaInfoResponse::_internal_add_swcinfo() {
  return _impl_.swcinfo_.Add();
}
inline ::proto::SwcMetaInfoV1* GetAllSwcMetaInfoResponse::add_swcinfo() {
  ::proto::SwcMetaInfoV1* _add = _internal_add_swcinfo();
  // @@protoc_insertion_point(field_add:proto.GetAllSwcMetaInfoResponse.SwcInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcMetaInfoV1 >&
GetAllSwcMetaInfoResponse::swcinfo() const {
  // @@protoc_insertion_point(field_list:proto.GetAllSwcMetaInfoResponse.SwcInfo)
  return _impl_.swcinfo_;
}

// -------------------------------------------------------------------

// CreateSwcSnapshotResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateSwcSnapshotResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcSnapshotResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcSnapshotResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcSnapshotResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcSnapshotResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcSnapshotResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcSnapshotResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateSwcSnapshotResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcSnapshotResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcSnapshotResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcSnapshotResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcSnapshotResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcSnapshotResponse.metaInfo)
  return _msg;
}
inline void CreateSwcSnapshotResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcSnapshotResponse.metaInfo)
}

// -------------------------------------------------------------------

// GetAllSnapshotMetaInfoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllSnapshotMetaInfoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllSnapshotMetaInfoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllSnapshotMetaInfoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllSnapshotMetaInfoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllSnapshotMetaInfoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllSnapshotMetaInfoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllSnapshotMetaInfoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllSnapshotMetaInfoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllSnapshotMetaInfoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllSnapshotMetaInfoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllSnapshotMetaInfoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllSnapshotMetaInfoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllSnapshotMetaInfoResponse.metaInfo)
  return _msg;
}
inline void GetAllSnapshotMetaInfoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllSnapshotMetaInfoResponse.metaInfo)
}

// repeated .proto.SwcSnapshotMetaInfoV1 SwcSnapshotList = 2;
inline int GetAllSnapshotMetaInfoResponse::_internal_swcsnapshotlist_size() const {
  return _impl_.swcsnapshotlist_.size();
}
inline int GetAllSnapshotMetaInfoResponse::swcsnapshotlist_size() const {
  return _internal_swcsnapshotlist_size();
}
inline ::proto::SwcSnapshotMetaInfoV1* GetAllSnapshotMetaInfoResponse::mutable_swcsnapshotlist(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllSnapshotMetaInfoResponse.SwcSnapshotList)
  return _impl_.swcsnapshotlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >*
GetAllSnapshotMetaInfoResponse::mutable_swcsnapshotlist() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllSnapshotMetaInfoResponse.SwcSnapshotList)
  return &_impl_.swcsnapshotlist_;
}
inline const ::proto::SwcSnapshotMetaInfoV1& GetAllSnapshotMetaInfoResponse::_internal_swcsnapshotlist(int index) const {
  return _impl_.swcsnapshotlist_.Get(index);
}
inline const ::proto::SwcSnapshotMetaInfoV1& GetAllSnapshotMetaInfoResponse::swcsnapshotlist(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllSnapshotMetaInfoResponse.SwcSnapshotList)
  return _internal_swcsnapshotlist(index);
}
inline ::proto::SwcSnapshotMetaInfoV1* GetAllSnapshotMetaInfoResponse::_internal_add_swcsnapshotlist() {
  return _impl_.swcsnapshotlist_.Add();
}
inline ::proto::SwcSnapshotMetaInfoV1* GetAllSnapshotMetaInfoResponse::add_swcsnapshotlist() {
  ::proto::SwcSnapshotMetaInfoV1* _add = _internal_add_swcsnapshotlist();
  // @@protoc_insertion_point(field_add:proto.GetAllSnapshotMetaInfoResponse.SwcSnapshotList)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcSnapshotMetaInfoV1 >&
GetAllSnapshotMetaInfoResponse::swcsnapshotlist() const {
  // @@protoc_insertion_point(field_list:proto.GetAllSnapshotMetaInfoResponse.SwcSnapshotList)
  return _impl_.swcsnapshotlist_;
}

// -------------------------------------------------------------------

// GetSnapshotResponse

// .proto.ResponseMetaInfoV1 metaInfo = 2;
inline bool GetSnapshotResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSnapshotResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSnapshotResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSnapshotResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSnapshotResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSnapshotResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSnapshotResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSnapshotResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSnapshotResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSnapshotResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSnapshotResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSnapshotResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSnapshotResponse.metaInfo)
  return _msg;
}
inline void GetSnapshotResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSnapshotResponse.metaInfo)
}

// .proto.SwcDataV1 SwcNodeData = 3;
inline bool GetSnapshotResponse::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSnapshotResponse::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSnapshotResponse::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSnapshotResponse::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSnapshotResponse.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSnapshotResponse::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSnapshotResponse.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSnapshotResponse::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSnapshotResponse::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSnapshotResponse.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSnapshotResponse::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSnapshotResponse::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSnapshotResponse.SwcNodeData)
  return _msg;
}
inline void GetSnapshotResponse::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSnapshotResponse.SwcNodeData)
}

// -------------------------------------------------------------------

// GetAllIncrementOperationMetaInfoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllIncrementOperationMetaInfoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllIncrementOperationMetaInfoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllIncrementOperationMetaInfoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllIncrementOperationMetaInfoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllIncrementOperationMetaInfoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllIncrementOperationMetaInfoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllIncrementOperationMetaInfoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllIncrementOperationMetaInfoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllIncrementOperationMetaInfoResponse.metaInfo)
  return _msg;
}
inline void GetAllIncrementOperationMetaInfoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllIncrementOperationMetaInfoResponse.metaInfo)
}

// repeated .proto.SwcIncrementOperationMetaInfoV1 SwcIncrementOperationMetaInfo = 2;
inline int GetAllIncrementOperationMetaInfoResponse::_internal_swcincrementoperationmetainfo_size() const {
  return _impl_.swcincrementoperationmetainfo_.size();
}
inline int GetAllIncrementOperationMetaInfoResponse::swcincrementoperationmetainfo_size() const {
  return _internal_swcincrementoperationmetainfo_size();
}
inline ::proto::SwcIncrementOperationMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::mutable_swcincrementoperationmetainfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllIncrementOperationMetaInfoResponse.SwcIncrementOperationMetaInfo)
  return _impl_.swcincrementoperationmetainfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >*
GetAllIncrementOperationMetaInfoResponse::mutable_swcincrementoperationmetainfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllIncrementOperationMetaInfoResponse.SwcIncrementOperationMetaInfo)
  return &_impl_.swcincrementoperationmetainfo_;
}
inline const ::proto::SwcIncrementOperationMetaInfoV1& GetAllIncrementOperationMetaInfoResponse::_internal_swcincrementoperationmetainfo(int index) const {
  return _impl_.swcincrementoperationmetainfo_.Get(index);
}
inline const ::proto::SwcIncrementOperationMetaInfoV1& GetAllIncrementOperationMetaInfoResponse::swcincrementoperationmetainfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllIncrementOperationMetaInfoResponse.SwcIncrementOperationMetaInfo)
  return _internal_swcincrementoperationmetainfo(index);
}
inline ::proto::SwcIncrementOperationMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::_internal_add_swcincrementoperationmetainfo() {
  return _impl_.swcincrementoperationmetainfo_.Add();
}
inline ::proto::SwcIncrementOperationMetaInfoV1* GetAllIncrementOperationMetaInfoResponse::add_swcincrementoperationmetainfo() {
  ::proto::SwcIncrementOperationMetaInfoV1* _add = _internal_add_swcincrementoperationmetainfo();
  // @@protoc_insertion_point(field_add:proto.GetAllIncrementOperationMetaInfoResponse.SwcIncrementOperationMetaInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcIncrementOperationMetaInfoV1 >&
GetAllIncrementOperationMetaInfoResponse::swcincrementoperationmetainfo() const {
  // @@protoc_insertion_point(field_list:proto.GetAllIncrementOperationMetaInfoResponse.SwcIncrementOperationMetaInfo)
  return _impl_.swcincrementoperationmetainfo_;
}

// -------------------------------------------------------------------

// GetIncrementOperationResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetIncrementOperationResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetIncrementOperationResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetIncrementOperationResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetIncrementOperationResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetIncrementOperationResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetIncrementOperationResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetIncrementOperationResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetIncrementOperationResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetIncrementOperationResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetIncrementOperationResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetIncrementOperationResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetIncrementOperationResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetIncrementOperationResponse.metaInfo)
  return _msg;
}
inline void GetIncrementOperationResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetIncrementOperationResponse.metaInfo)
}

// .proto.SwcIncrementOperationListV1 SwcIncrementOperationList = 2;
inline bool GetIncrementOperationResponse::_internal_has_swcincrementoperationlist() const {
  return this != internal_default_instance() && _impl_.swcincrementoperationlist_ != nullptr;
}
inline bool GetIncrementOperationResponse::has_swcincrementoperationlist() const {
  return _internal_has_swcincrementoperationlist();
}
inline const ::proto::SwcIncrementOperationListV1& GetIncrementOperationResponse::_internal_swcincrementoperationlist() const {
  const ::proto::SwcIncrementOperationListV1* p = _impl_.swcincrementoperationlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcIncrementOperationListV1&>(
      ::proto::_SwcIncrementOperationListV1_default_instance_);
}
inline const ::proto::SwcIncrementOperationListV1& GetIncrementOperationResponse::swcincrementoperationlist() const {
  // @@protoc_insertion_point(field_get:proto.GetIncrementOperationResponse.SwcIncrementOperationList)
  return _internal_swcincrementoperationlist();
}
inline void GetIncrementOperationResponse::unsafe_arena_set_allocated_swcincrementoperationlist(
    ::proto::SwcIncrementOperationListV1* swcincrementoperationlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcincrementoperationlist_);
  }
  _impl_.swcincrementoperationlist_ = swcincrementoperationlist;
  if (swcincrementoperationlist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetIncrementOperationResponse.SwcIncrementOperationList)
}
inline ::proto::SwcIncrementOperationListV1* GetIncrementOperationResponse::release_swcincrementoperationlist() {
  
  ::proto::SwcIncrementOperationListV1* temp = _impl_.swcincrementoperationlist_;
  _impl_.swcincrementoperationlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcIncrementOperationListV1* GetIncrementOperationResponse::unsafe_arena_release_swcincrementoperationlist() {
  // @@protoc_insertion_point(field_release:proto.GetIncrementOperationResponse.SwcIncrementOperationList)
  
  ::proto::SwcIncrementOperationListV1* temp = _impl_.swcincrementoperationlist_;
  _impl_.swcincrementoperationlist_ = nullptr;
  return temp;
}
inline ::proto::SwcIncrementOperationListV1* GetIncrementOperationResponse::_internal_mutable_swcincrementoperationlist() {
  
  if (_impl_.swcincrementoperationlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcIncrementOperationListV1>(GetArenaForAllocation());
    _impl_.swcincrementoperationlist_ = p;
  }
  return _impl_.swcincrementoperationlist_;
}
inline ::proto::SwcIncrementOperationListV1* GetIncrementOperationResponse::mutable_swcincrementoperationlist() {
  ::proto::SwcIncrementOperationListV1* _msg = _internal_mutable_swcincrementoperationlist();
  // @@protoc_insertion_point(field_mutable:proto.GetIncrementOperationResponse.SwcIncrementOperationList)
  return _msg;
}
inline void GetIncrementOperationResponse::set_allocated_swcincrementoperationlist(::proto::SwcIncrementOperationListV1* swcincrementoperationlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcincrementoperationlist_);
  }
  if (swcincrementoperationlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcincrementoperationlist));
    if (message_arena != submessage_arena) {
      swcincrementoperationlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcincrementoperationlist, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcincrementoperationlist_ = swcincrementoperationlist;
  // @@protoc_insertion_point(field_set_allocated:proto.GetIncrementOperationResponse.SwcIncrementOperationList)
}

// -------------------------------------------------------------------

// CreateSwcNodeDataResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateSwcNodeDataResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcNodeDataResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcNodeDataResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcNodeDataResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcNodeDataResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcNodeDataResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateSwcNodeDataResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcNodeDataResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcNodeDataResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcNodeDataResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcNodeDataResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataResponse.metaInfo)
  return _msg;
}
inline void CreateSwcNodeDataResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcNodeDataResponse.metaInfo)
}

// repeated string CreatedNodesUuid = 2;
inline int CreateSwcNodeDataResponse::_internal_creatednodesuuid_size() const {
  return _impl_.creatednodesuuid_.size();
}
inline int CreateSwcNodeDataResponse::creatednodesuuid_size() const {
  return _internal_creatednodesuuid_size();
}
inline void CreateSwcNodeDataResponse::clear_creatednodesuuid() {
  _impl_.creatednodesuuid_.Clear();
}
inline std::string* CreateSwcNodeDataResponse::add_creatednodesuuid() {
  std::string* _s = _internal_add_creatednodesuuid();
  // @@protoc_insertion_point(field_add_mutable:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
  return _s;
}
inline const std::string& CreateSwcNodeDataResponse::_internal_creatednodesuuid(int index) const {
  return _impl_.creatednodesuuid_.Get(index);
}
inline const std::string& CreateSwcNodeDataResponse::creatednodesuuid(int index) const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
  return _internal_creatednodesuuid(index);
}
inline std::string* CreateSwcNodeDataResponse::mutable_creatednodesuuid(int index) {
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
  return _impl_.creatednodesuuid_.Mutable(index);
}
inline void CreateSwcNodeDataResponse::set_creatednodesuuid(int index, const std::string& value) {
  _impl_.creatednodesuuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::set_creatednodesuuid(int index, std::string&& value) {
  _impl_.creatednodesuuid_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::set_creatednodesuuid(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.creatednodesuuid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::set_creatednodesuuid(int index, const char* value, size_t size) {
  _impl_.creatednodesuuid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline std::string* CreateSwcNodeDataResponse::_internal_add_creatednodesuuid() {
  return _impl_.creatednodesuuid_.Add();
}
inline void CreateSwcNodeDataResponse::add_creatednodesuuid(const std::string& value) {
  _impl_.creatednodesuuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::add_creatednodesuuid(std::string&& value) {
  _impl_.creatednodesuuid_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::add_creatednodesuuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.creatednodesuuid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline void CreateSwcNodeDataResponse::add_creatednodesuuid(const char* value, size_t size) {
  _impl_.creatednodesuuid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateSwcNodeDataResponse::creatednodesuuid() const {
  // @@protoc_insertion_point(field_list:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
  return _impl_.creatednodesuuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateSwcNodeDataResponse::mutable_creatednodesuuid() {
  // @@protoc_insertion_point(field_mutable_list:proto.CreateSwcNodeDataResponse.CreatedNodesUuid)
  return &_impl_.creatednodesuuid_;
}

// -------------------------------------------------------------------

// DeleteSwcNodeDataResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcNodeDataResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcNodeDataResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcNodeDataResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcNodeDataResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcNodeDataResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcNodeDataResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcNodeDataResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcNodeDataResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcNodeDataResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcNodeDataResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcNodeDataResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcNodeDataResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcNodeDataResponse.metaInfo)
  return _msg;
}
inline void DeleteSwcNodeDataResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcNodeDataResponse.metaInfo)
}

// -------------------------------------------------------------------

// UpdateSwcNodeDataResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcNodeDataResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcNodeDataResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcNodeDataResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcNodeDataResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcNodeDataResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcNodeDataResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcNodeDataResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcNodeDataResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcNodeDataResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcNodeDataResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcNodeDataResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcNodeDataResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcNodeDataResponse.metaInfo)
  return _msg;
}
inline void UpdateSwcNodeDataResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcNodeDataResponse.metaInfo)
}

// -------------------------------------------------------------------

// GetSwcNodeDataResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcNodeDataResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcNodeDataResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcNodeDataResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcNodeDataResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcNodeDataResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataResponse.metaInfo)
  return _msg;
}
inline void GetSwcNodeDataResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataResponse.metaInfo)
}

// .proto.SwcDataV1 SwcNodeData = 2;
inline bool GetSwcNodeDataResponse::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcNodeDataResponse::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSwcNodeDataResponse::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSwcNodeDataResponse::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataResponse.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcNodeDataResponse::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataResponse.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSwcNodeDataResponse::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataResponse::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataResponse.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataResponse::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSwcNodeDataResponse::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataResponse.SwcNodeData)
  return _msg;
}
inline void GetSwcNodeDataResponse::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataResponse.SwcNodeData)
}

// -------------------------------------------------------------------

// GetSwcFullNodeDataResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcFullNodeDataResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcFullNodeDataResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcFullNodeDataResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcFullNodeDataResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcFullNodeDataResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcFullNodeDataResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcFullNodeDataResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcFullNodeDataResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcFullNodeDataResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataResponse.metaInfo)
  return _msg;
}
inline void GetSwcFullNodeDataResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataResponse.metaInfo)
}

// .proto.SwcDataV1 SwcNodeData = 2;
inline bool GetSwcFullNodeDataResponse::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcFullNodeDataResponse::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSwcFullNodeDataResponse::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSwcFullNodeDataResponse::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcFullNodeDataResponse.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcFullNodeDataResponse::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcFullNodeDataResponse.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSwcFullNodeDataResponse::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSwcFullNodeDataResponse::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcFullNodeDataResponse.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSwcFullNodeDataResponse::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSwcFullNodeDataResponse::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcFullNodeDataResponse.SwcNodeData)
  return _msg;
}
inline void GetSwcFullNodeDataResponse::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcFullNodeDataResponse.SwcNodeData)
}

// -------------------------------------------------------------------

// GetSwcNodeDataListByTimeAndUserResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcNodeDataListByTimeAndUserResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcNodeDataListByTimeAndUserResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcNodeDataListByTimeAndUserResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcNodeDataListByTimeAndUserResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataListByTimeAndUserResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataListByTimeAndUserResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataListByTimeAndUserResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcNodeDataListByTimeAndUserResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserResponse.metaInfo)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserResponse.metaInfo)
}

// .proto.SwcDataV1 SwcNodeData = 2;
inline bool GetSwcNodeDataListByTimeAndUserResponse::_internal_has_swcnodedata() const {
  return this != internal_default_instance() && _impl_.swcnodedata_ != nullptr;
}
inline bool GetSwcNodeDataListByTimeAndUserResponse::has_swcnodedata() const {
  return _internal_has_swcnodedata();
}
inline const ::proto::SwcDataV1& GetSwcNodeDataListByTimeAndUserResponse::_internal_swcnodedata() const {
  const ::proto::SwcDataV1* p = _impl_.swcnodedata_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcDataV1&>(
      ::proto::_SwcDataV1_default_instance_);
}
inline const ::proto::SwcDataV1& GetSwcNodeDataListByTimeAndUserResponse::swcnodedata() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcNodeDataListByTimeAndUserResponse.SwcNodeData)
  return _internal_swcnodedata();
}
inline void GetSwcNodeDataListByTimeAndUserResponse::unsafe_arena_set_allocated_swcnodedata(
    ::proto::SwcDataV1* swcnodedata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  _impl_.swcnodedata_ = swcnodedata;
  if (swcnodedata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcNodeDataListByTimeAndUserResponse.SwcNodeData)
}
inline ::proto::SwcDataV1* GetSwcNodeDataListByTimeAndUserResponse::release_swcnodedata() {
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataListByTimeAndUserResponse::unsafe_arena_release_swcnodedata() {
  // @@protoc_insertion_point(field_release:proto.GetSwcNodeDataListByTimeAndUserResponse.SwcNodeData)
  
  ::proto::SwcDataV1* temp = _impl_.swcnodedata_;
  _impl_.swcnodedata_ = nullptr;
  return temp;
}
inline ::proto::SwcDataV1* GetSwcNodeDataListByTimeAndUserResponse::_internal_mutable_swcnodedata() {
  
  if (_impl_.swcnodedata_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcDataV1>(GetArenaForAllocation());
    _impl_.swcnodedata_ = p;
  }
  return _impl_.swcnodedata_;
}
inline ::proto::SwcDataV1* GetSwcNodeDataListByTimeAndUserResponse::mutable_swcnodedata() {
  ::proto::SwcDataV1* _msg = _internal_mutable_swcnodedata();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcNodeDataListByTimeAndUserResponse.SwcNodeData)
  return _msg;
}
inline void GetSwcNodeDataListByTimeAndUserResponse::set_allocated_swcnodedata(::proto::SwcDataV1* swcnodedata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcnodedata_);
  }
  if (swcnodedata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcnodedata));
    if (message_arena != submessage_arena) {
      swcnodedata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcnodedata, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcnodedata_ = swcnodedata;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcNodeDataListByTimeAndUserResponse.SwcNodeData)
}

// -------------------------------------------------------------------

// CreateDailyStatisticsResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateDailyStatisticsResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateDailyStatisticsResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateDailyStatisticsResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateDailyStatisticsResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateDailyStatisticsResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateDailyStatisticsResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateDailyStatisticsResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateDailyStatisticsResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateDailyStatisticsResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsResponse.metaInfo)
  return _msg;
}
inline void CreateDailyStatisticsResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsResponse.metaInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool CreateDailyStatisticsResponse::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool CreateDailyStatisticsResponse::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsResponse::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& CreateDailyStatisticsResponse::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateDailyStatisticsResponse.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void CreateDailyStatisticsResponse::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateDailyStatisticsResponse.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsResponse::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsResponse::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.CreateDailyStatisticsResponse.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsResponse::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* CreateDailyStatisticsResponse::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateDailyStatisticsResponse.DailyStatisticsInfo)
  return _msg;
}
inline void CreateDailyStatisticsResponse::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDailyStatisticsResponse.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// DeleteDailyStatisticsResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteDailyStatisticsResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteDailyStatisticsResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteDailyStatisticsResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteDailyStatisticsResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteDailyStatisticsResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteDailyStatisticsResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteDailyStatisticsResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteDailyStatisticsResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteDailyStatisticsResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsResponse.metaInfo)
  return _msg;
}
inline void DeleteDailyStatisticsResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsResponse.metaInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool DeleteDailyStatisticsResponse::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool DeleteDailyStatisticsResponse::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& DeleteDailyStatisticsResponse::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& DeleteDailyStatisticsResponse::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteDailyStatisticsResponse.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void DeleteDailyStatisticsResponse::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteDailyStatisticsResponse.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsResponse::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsResponse::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteDailyStatisticsResponse.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsResponse::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* DeleteDailyStatisticsResponse::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteDailyStatisticsResponse.DailyStatisticsInfo)
  return _msg;
}
inline void DeleteDailyStatisticsResponse::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteDailyStatisticsResponse.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// UpdateDailyStatisticsResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateDailyStatisticsResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateDailyStatisticsResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateDailyStatisticsResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateDailyStatisticsResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateDailyStatisticsResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateDailyStatisticsResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateDailyStatisticsResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateDailyStatisticsResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateDailyStatisticsResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsResponse.metaInfo)
  return _msg;
}
inline void UpdateDailyStatisticsResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsResponse.metaInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool UpdateDailyStatisticsResponse::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool UpdateDailyStatisticsResponse::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsResponse::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& UpdateDailyStatisticsResponse::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateDailyStatisticsResponse.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void UpdateDailyStatisticsResponse::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateDailyStatisticsResponse.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsResponse::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsResponse::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateDailyStatisticsResponse.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsResponse::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* UpdateDailyStatisticsResponse::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateDailyStatisticsResponse.DailyStatisticsInfo)
  return _msg;
}
inline void UpdateDailyStatisticsResponse::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateDailyStatisticsResponse.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// GetDailyStatisticsResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetDailyStatisticsResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetDailyStatisticsResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetDailyStatisticsResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetDailyStatisticsResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetDailyStatisticsResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetDailyStatisticsResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetDailyStatisticsResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetDailyStatisticsResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetDailyStatisticsResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsResponse.metaInfo)
  return _msg;
}
inline void GetDailyStatisticsResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsResponse.metaInfo)
}

// .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline bool GetDailyStatisticsResponse::_internal_has_dailystatisticsinfo() const {
  return this != internal_default_instance() && _impl_.dailystatisticsinfo_ != nullptr;
}
inline bool GetDailyStatisticsResponse::has_dailystatisticsinfo() const {
  return _internal_has_dailystatisticsinfo();
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetDailyStatisticsResponse::_internal_dailystatisticsinfo() const {
  const ::proto::DailyStatisticsMetaInfoV1* p = _impl_.dailystatisticsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::DailyStatisticsMetaInfoV1&>(
      ::proto::_DailyStatisticsMetaInfoV1_default_instance_);
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetDailyStatisticsResponse::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_get:proto.GetDailyStatisticsResponse.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo();
}
inline void GetDailyStatisticsResponse::unsafe_arena_set_allocated_dailystatisticsinfo(
    ::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  if (dailystatisticsinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetDailyStatisticsResponse.DailyStatisticsInfo)
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsResponse::release_dailystatisticsinfo() {
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsResponse::unsafe_arena_release_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_release:proto.GetDailyStatisticsResponse.DailyStatisticsInfo)
  
  ::proto::DailyStatisticsMetaInfoV1* temp = _impl_.dailystatisticsinfo_;
  _impl_.dailystatisticsinfo_ = nullptr;
  return temp;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsResponse::_internal_mutable_dailystatisticsinfo() {
  
  if (_impl_.dailystatisticsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::DailyStatisticsMetaInfoV1>(GetArenaForAllocation());
    _impl_.dailystatisticsinfo_ = p;
  }
  return _impl_.dailystatisticsinfo_;
}
inline ::proto::DailyStatisticsMetaInfoV1* GetDailyStatisticsResponse::mutable_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _msg = _internal_mutable_dailystatisticsinfo();
  // @@protoc_insertion_point(field_mutable:proto.GetDailyStatisticsResponse.DailyStatisticsInfo)
  return _msg;
}
inline void GetDailyStatisticsResponse::set_allocated_dailystatisticsinfo(::proto::DailyStatisticsMetaInfoV1* dailystatisticsinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dailystatisticsinfo_);
  }
  if (dailystatisticsinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dailystatisticsinfo));
    if (message_arena != submessage_arena) {
      dailystatisticsinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dailystatisticsinfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.dailystatisticsinfo_ = dailystatisticsinfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetDailyStatisticsResponse.DailyStatisticsInfo)
}

// -------------------------------------------------------------------

// GetAllDailyStatisticsResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetAllDailyStatisticsResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetAllDailyStatisticsResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetAllDailyStatisticsResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetAllDailyStatisticsResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetAllDailyStatisticsResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetAllDailyStatisticsResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetAllDailyStatisticsResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetAllDailyStatisticsResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllDailyStatisticsResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetAllDailyStatisticsResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetAllDailyStatisticsResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetAllDailyStatisticsResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetAllDailyStatisticsResponse.metaInfo)
  return _msg;
}
inline void GetAllDailyStatisticsResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetAllDailyStatisticsResponse.metaInfo)
}

// repeated .proto.DailyStatisticsMetaInfoV1 DailyStatisticsInfo = 2;
inline int GetAllDailyStatisticsResponse::_internal_dailystatisticsinfo_size() const {
  return _impl_.dailystatisticsinfo_.size();
}
inline int GetAllDailyStatisticsResponse::dailystatisticsinfo_size() const {
  return _internal_dailystatisticsinfo_size();
}
inline ::proto::DailyStatisticsMetaInfoV1* GetAllDailyStatisticsResponse::mutable_dailystatisticsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetAllDailyStatisticsResponse.DailyStatisticsInfo)
  return _impl_.dailystatisticsinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::DailyStatisticsMetaInfoV1 >*
GetAllDailyStatisticsResponse::mutable_dailystatisticsinfo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetAllDailyStatisticsResponse.DailyStatisticsInfo)
  return &_impl_.dailystatisticsinfo_;
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetAllDailyStatisticsResponse::_internal_dailystatisticsinfo(int index) const {
  return _impl_.dailystatisticsinfo_.Get(index);
}
inline const ::proto::DailyStatisticsMetaInfoV1& GetAllDailyStatisticsResponse::dailystatisticsinfo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetAllDailyStatisticsResponse.DailyStatisticsInfo)
  return _internal_dailystatisticsinfo(index);
}
inline ::proto::DailyStatisticsMetaInfoV1* GetAllDailyStatisticsResponse::_internal_add_dailystatisticsinfo() {
  return _impl_.dailystatisticsinfo_.Add();
}
inline ::proto::DailyStatisticsMetaInfoV1* GetAllDailyStatisticsResponse::add_dailystatisticsinfo() {
  ::proto::DailyStatisticsMetaInfoV1* _add = _internal_add_dailystatisticsinfo();
  // @@protoc_insertion_point(field_add:proto.GetAllDailyStatisticsResponse.DailyStatisticsInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::DailyStatisticsMetaInfoV1 >&
GetAllDailyStatisticsResponse::dailystatisticsinfo() const {
  // @@protoc_insertion_point(field_list:proto.GetAllDailyStatisticsResponse.DailyStatisticsInfo)
  return _impl_.dailystatisticsinfo_;
}

// -------------------------------------------------------------------

// CreateSwcAttachmentAnoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateSwcAttachmentAnoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcAttachmentAnoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcAttachmentAnoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcAttachmentAnoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcAttachmentAnoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentAnoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentAnoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentAnoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentAnoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentAnoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoResponse.metaInfo)
  return _msg;
}
inline void CreateSwcAttachmentAnoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoResponse.metaInfo)
}

// string AnoAttachmentUuid = 2;
inline void CreateSwcAttachmentAnoResponse::clear_anoattachmentuuid() {
  _impl_.anoattachmentuuid_.ClearToEmpty();
}
inline const std::string& CreateSwcAttachmentAnoResponse::anoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentAnoResponse.AnoAttachmentUuid)
  return _internal_anoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcAttachmentAnoResponse::set_anoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.anoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcAttachmentAnoResponse.AnoAttachmentUuid)
}
inline std::string* CreateSwcAttachmentAnoResponse::mutable_anoattachmentuuid() {
  std::string* _s = _internal_mutable_anoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentAnoResponse.AnoAttachmentUuid)
  return _s;
}
inline const std::string& CreateSwcAttachmentAnoResponse::_internal_anoattachmentuuid() const {
  return _impl_.anoattachmentuuid_.Get();
}
inline void CreateSwcAttachmentAnoResponse::_internal_set_anoattachmentuuid(const std::string& value) {
  
  _impl_.anoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentAnoResponse::_internal_mutable_anoattachmentuuid() {
  
  return _impl_.anoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentAnoResponse::release_anoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentAnoResponse.AnoAttachmentUuid)
  return _impl_.anoattachmentuuid_.Release();
}
inline void CreateSwcAttachmentAnoResponse::set_allocated_anoattachmentuuid(std::string* anoattachmentuuid) {
  if (anoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.anoattachmentuuid_.SetAllocated(anoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.anoattachmentuuid_.IsDefault()) {
    _impl_.anoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentAnoResponse.AnoAttachmentUuid)
}

// -------------------------------------------------------------------

// DeleteSwcAttachmentAnoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcAttachmentAnoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcAttachmentAnoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcAttachmentAnoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcAttachmentAnoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentAnoResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcAttachmentAnoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentAnoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentAnoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentAnoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentAnoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentAnoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentAnoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentAnoResponse.metaInfo)
  return _msg;
}
inline void DeleteSwcAttachmentAnoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentAnoResponse.metaInfo)
}

// -------------------------------------------------------------------

// UpdateSwcAttachmentAnoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcAttachmentAnoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcAttachmentAnoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcAttachmentAnoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcAttachmentAnoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentAnoResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcAttachmentAnoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentAnoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentAnoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentAnoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentAnoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentAnoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentAnoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentAnoResponse.metaInfo)
  return _msg;
}
inline void UpdateSwcAttachmentAnoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentAnoResponse.metaInfo)
}

// -------------------------------------------------------------------

// GetSwcAttachmentAnoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcAttachmentAnoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcAttachmentAnoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcAttachmentAnoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcAttachmentAnoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcAttachmentAnoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentAnoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentAnoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentAnoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentAnoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentAnoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoResponse.metaInfo)
  return _msg;
}
inline void GetSwcAttachmentAnoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoResponse.metaInfo)
}

// .proto.SwcAttachmentAnoV1 SwcAttachmentAno = 2;
inline bool GetSwcAttachmentAnoResponse::_internal_has_swcattachmentano() const {
  return this != internal_default_instance() && _impl_.swcattachmentano_ != nullptr;
}
inline bool GetSwcAttachmentAnoResponse::has_swcattachmentano() const {
  return _internal_has_swcattachmentano();
}
inline const ::proto::SwcAttachmentAnoV1& GetSwcAttachmentAnoResponse::_internal_swcattachmentano() const {
  const ::proto::SwcAttachmentAnoV1* p = _impl_.swcattachmentano_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::SwcAttachmentAnoV1&>(
      ::proto::_SwcAttachmentAnoV1_default_instance_);
}
inline const ::proto::SwcAttachmentAnoV1& GetSwcAttachmentAnoResponse::swcattachmentano() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentAnoResponse.SwcAttachmentAno)
  return _internal_swcattachmentano();
}
inline void GetSwcAttachmentAnoResponse::unsafe_arena_set_allocated_swcattachmentano(
    ::proto::SwcAttachmentAnoV1* swcattachmentano) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentano_);
  }
  _impl_.swcattachmentano_ = swcattachmentano;
  if (swcattachmentano) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentAnoResponse.SwcAttachmentAno)
}
inline ::proto::SwcAttachmentAnoV1* GetSwcAttachmentAnoResponse::release_swcattachmentano() {
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.swcattachmentano_;
  _impl_.swcattachmentano_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* GetSwcAttachmentAnoResponse::unsafe_arena_release_swcattachmentano() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentAnoResponse.SwcAttachmentAno)
  
  ::proto::SwcAttachmentAnoV1* temp = _impl_.swcattachmentano_;
  _impl_.swcattachmentano_ = nullptr;
  return temp;
}
inline ::proto::SwcAttachmentAnoV1* GetSwcAttachmentAnoResponse::_internal_mutable_swcattachmentano() {
  
  if (_impl_.swcattachmentano_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::SwcAttachmentAnoV1>(GetArenaForAllocation());
    _impl_.swcattachmentano_ = p;
  }
  return _impl_.swcattachmentano_;
}
inline ::proto::SwcAttachmentAnoV1* GetSwcAttachmentAnoResponse::mutable_swcattachmentano() {
  ::proto::SwcAttachmentAnoV1* _msg = _internal_mutable_swcattachmentano();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentAnoResponse.SwcAttachmentAno)
  return _msg;
}
inline void GetSwcAttachmentAnoResponse::set_allocated_swcattachmentano(::proto::SwcAttachmentAnoV1* swcattachmentano) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.swcattachmentano_);
  }
  if (swcattachmentano) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(swcattachmentano));
    if (message_arena != submessage_arena) {
      swcattachmentano = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, swcattachmentano, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.swcattachmentano_ = swcattachmentano;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentAnoResponse.SwcAttachmentAno)
}

// -------------------------------------------------------------------

// CreateSwcAttachmentApoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool CreateSwcAttachmentApoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool CreateSwcAttachmentApoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcAttachmentApoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& CreateSwcAttachmentApoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoResponse.metaInfo)
  return _internal_metainfo();
}
inline void CreateSwcAttachmentApoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.CreateSwcAttachmentApoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentApoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentApoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentApoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentApoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* CreateSwcAttachmentApoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoResponse.metaInfo)
  return _msg;
}
inline void CreateSwcAttachmentApoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentApoResponse.metaInfo)
}

// string ApoAttachmentUuid = 2;
inline void CreateSwcAttachmentApoResponse::clear_apoattachmentuuid() {
  _impl_.apoattachmentuuid_.ClearToEmpty();
}
inline const std::string& CreateSwcAttachmentApoResponse::apoattachmentuuid() const {
  // @@protoc_insertion_point(field_get:proto.CreateSwcAttachmentApoResponse.ApoAttachmentUuid)
  return _internal_apoattachmentuuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateSwcAttachmentApoResponse::set_apoattachmentuuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.apoattachmentuuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:proto.CreateSwcAttachmentApoResponse.ApoAttachmentUuid)
}
inline std::string* CreateSwcAttachmentApoResponse::mutable_apoattachmentuuid() {
  std::string* _s = _internal_mutable_apoattachmentuuid();
  // @@protoc_insertion_point(field_mutable:proto.CreateSwcAttachmentApoResponse.ApoAttachmentUuid)
  return _s;
}
inline const std::string& CreateSwcAttachmentApoResponse::_internal_apoattachmentuuid() const {
  return _impl_.apoattachmentuuid_.Get();
}
inline void CreateSwcAttachmentApoResponse::_internal_set_apoattachmentuuid(const std::string& value) {
  
  _impl_.apoattachmentuuid_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentApoResponse::_internal_mutable_apoattachmentuuid() {
  
  return _impl_.apoattachmentuuid_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateSwcAttachmentApoResponse::release_apoattachmentuuid() {
  // @@protoc_insertion_point(field_release:proto.CreateSwcAttachmentApoResponse.ApoAttachmentUuid)
  return _impl_.apoattachmentuuid_.Release();
}
inline void CreateSwcAttachmentApoResponse::set_allocated_apoattachmentuuid(std::string* apoattachmentuuid) {
  if (apoattachmentuuid != nullptr) {
    
  } else {
    
  }
  _impl_.apoattachmentuuid_.SetAllocated(apoattachmentuuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.apoattachmentuuid_.IsDefault()) {
    _impl_.apoattachmentuuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:proto.CreateSwcAttachmentApoResponse.ApoAttachmentUuid)
}

// -------------------------------------------------------------------

// DeleteSwcAttachmentApoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool DeleteSwcAttachmentApoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool DeleteSwcAttachmentApoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcAttachmentApoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& DeleteSwcAttachmentApoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.DeleteSwcAttachmentApoResponse.metaInfo)
  return _internal_metainfo();
}
inline void DeleteSwcAttachmentApoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.DeleteSwcAttachmentApoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentApoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentApoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.DeleteSwcAttachmentApoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentApoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* DeleteSwcAttachmentApoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.DeleteSwcAttachmentApoResponse.metaInfo)
  return _msg;
}
inline void DeleteSwcAttachmentApoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.DeleteSwcAttachmentApoResponse.metaInfo)
}

// -------------------------------------------------------------------

// UpdateSwcAttachmentApoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool UpdateSwcAttachmentApoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool UpdateSwcAttachmentApoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcAttachmentApoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& UpdateSwcAttachmentApoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.UpdateSwcAttachmentApoResponse.metaInfo)
  return _internal_metainfo();
}
inline void UpdateSwcAttachmentApoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.UpdateSwcAttachmentApoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentApoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentApoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.UpdateSwcAttachmentApoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentApoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* UpdateSwcAttachmentApoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.UpdateSwcAttachmentApoResponse.metaInfo)
  return _msg;
}
inline void UpdateSwcAttachmentApoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.UpdateSwcAttachmentApoResponse.metaInfo)
}

// -------------------------------------------------------------------

// GetSwcAttachmentApoResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool GetSwcAttachmentApoResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool GetSwcAttachmentApoResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& GetSwcAttachmentApoResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& GetSwcAttachmentApoResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoResponse.metaInfo)
  return _internal_metainfo();
}
inline void GetSwcAttachmentApoResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.GetSwcAttachmentApoResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentApoResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentApoResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.GetSwcAttachmentApoResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentApoResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* GetSwcAttachmentApoResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoResponse.metaInfo)
  return _msg;
}
inline void GetSwcAttachmentApoResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.GetSwcAttachmentApoResponse.metaInfo)
}

// repeated .proto.SwcAttachmentApoV1 SwcAttachmentApo = 2;
inline int GetSwcAttachmentApoResponse::_internal_swcattachmentapo_size() const {
  return _impl_.swcattachmentapo_.size();
}
inline int GetSwcAttachmentApoResponse::swcattachmentapo_size() const {
  return _internal_swcattachmentapo_size();
}
inline ::proto::SwcAttachmentApoV1* GetSwcAttachmentApoResponse::mutable_swcattachmentapo(int index) {
  // @@protoc_insertion_point(field_mutable:proto.GetSwcAttachmentApoResponse.SwcAttachmentApo)
  return _impl_.swcattachmentapo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >*
GetSwcAttachmentApoResponse::mutable_swcattachmentapo() {
  // @@protoc_insertion_point(field_mutable_list:proto.GetSwcAttachmentApoResponse.SwcAttachmentApo)
  return &_impl_.swcattachmentapo_;
}
inline const ::proto::SwcAttachmentApoV1& GetSwcAttachmentApoResponse::_internal_swcattachmentapo(int index) const {
  return _impl_.swcattachmentapo_.Get(index);
}
inline const ::proto::SwcAttachmentApoV1& GetSwcAttachmentApoResponse::swcattachmentapo(int index) const {
  // @@protoc_insertion_point(field_get:proto.GetSwcAttachmentApoResponse.SwcAttachmentApo)
  return _internal_swcattachmentapo(index);
}
inline ::proto::SwcAttachmentApoV1* GetSwcAttachmentApoResponse::_internal_add_swcattachmentapo() {
  return _impl_.swcattachmentapo_.Add();
}
inline ::proto::SwcAttachmentApoV1* GetSwcAttachmentApoResponse::add_swcattachmentapo() {
  ::proto::SwcAttachmentApoV1* _add = _internal_add_swcattachmentapo();
  // @@protoc_insertion_point(field_add:proto.GetSwcAttachmentApoResponse.SwcAttachmentApo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::proto::SwcAttachmentApoV1 >&
GetSwcAttachmentApoResponse::swcattachmentapo() const {
  // @@protoc_insertion_point(field_list:proto.GetSwcAttachmentApoResponse.SwcAttachmentApo)
  return _impl_.swcattachmentapo_;
}

// -------------------------------------------------------------------

// RevertSwcVersionResponse

// .proto.ResponseMetaInfoV1 metaInfo = 1;
inline bool RevertSwcVersionResponse::_internal_has_metainfo() const {
  return this != internal_default_instance() && _impl_.metainfo_ != nullptr;
}
inline bool RevertSwcVersionResponse::has_metainfo() const {
  return _internal_has_metainfo();
}
inline const ::proto::ResponseMetaInfoV1& RevertSwcVersionResponse::_internal_metainfo() const {
  const ::proto::ResponseMetaInfoV1* p = _impl_.metainfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::proto::ResponseMetaInfoV1&>(
      ::proto::_ResponseMetaInfoV1_default_instance_);
}
inline const ::proto::ResponseMetaInfoV1& RevertSwcVersionResponse::metainfo() const {
  // @@protoc_insertion_point(field_get:proto.RevertSwcVersionResponse.metaInfo)
  return _internal_metainfo();
}
inline void RevertSwcVersionResponse::unsafe_arena_set_allocated_metainfo(
    ::proto::ResponseMetaInfoV1* metainfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  _impl_.metainfo_ = metainfo;
  if (metainfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:proto.RevertSwcVersionResponse.metaInfo)
}
inline ::proto::ResponseMetaInfoV1* RevertSwcVersionResponse::release_metainfo() {
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::proto::ResponseMetaInfoV1* RevertSwcVersionResponse::unsafe_arena_release_metainfo() {
  // @@protoc_insertion_point(field_release:proto.RevertSwcVersionResponse.metaInfo)
  
  ::proto::ResponseMetaInfoV1* temp = _impl_.metainfo_;
  _impl_.metainfo_ = nullptr;
  return temp;
}
inline ::proto::ResponseMetaInfoV1* RevertSwcVersionResponse::_internal_mutable_metainfo() {
  
  if (_impl_.metainfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::proto::ResponseMetaInfoV1>(GetArenaForAllocation());
    _impl_.metainfo_ = p;
  }
  return _impl_.metainfo_;
}
inline ::proto::ResponseMetaInfoV1* RevertSwcVersionResponse::mutable_metainfo() {
  ::proto::ResponseMetaInfoV1* _msg = _internal_mutable_metainfo();
  // @@protoc_insertion_point(field_mutable:proto.RevertSwcVersionResponse.metaInfo)
  return _msg;
}
inline void RevertSwcVersionResponse::set_allocated_metainfo(::proto::ResponseMetaInfoV1* metainfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.metainfo_);
  }
  if (metainfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metainfo));
    if (message_arena != submessage_arena) {
      metainfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metainfo, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.metainfo_ = metainfo;
  // @@protoc_insertion_point(field_set_allocated:proto.RevertSwcVersionResponse.metaInfo)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2fResponse_2eproto
